
LCD_4x20.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e92  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000056  00800060  00002e92  00002f06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000026b8  00000000  00000000  00002f5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000fab  00000000  00000000  00005614  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  000065bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  000066ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  0000686f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  000084b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  000093a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000a150  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000a2b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000a53d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000ad0b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e9       	ldi	r30, 0x92	; 146
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3b       	cpi	r26, 0xB6	; 182
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 98 13 	call	0x2730	; 0x2730 <main>
      7a:	0c 94 47 17 	jmp	0x2e8e	; 0x2e8e <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 10 17 	jmp	0x2e20	; 0x2e20 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	aa e7       	ldi	r26, 0x7A	; 122
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 2c 17 	jmp	0x2e58	; 0x2e58 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 1c 17 	jmp	0x2e38	; 0x2e38 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 38 17 	jmp	0x2e70	; 0x2e70 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 1c 17 	jmp	0x2e38	; 0x2e38 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 38 17 	jmp	0x2e70	; 0x2e70 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 10 17 	jmp	0x2e20	; 0x2e20 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8a e7       	ldi	r24, 0x7A	; 122
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 2c 17 	jmp	0x2e58	; 0x2e58 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 1c 17 	jmp	0x2e38	; 0x2e38 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 38 17 	jmp	0x2e70	; 0x2e70 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 1c 17 	jmp	0x2e38	; 0x2e38 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 38 17 	jmp	0x2e70	; 0x2e70 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 1c 17 	jmp	0x2e38	; 0x2e38 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 38 17 	jmp	0x2e70	; 0x2e70 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 20 17 	jmp	0x2e40	; 0x2e40 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 3c 17 	jmp	0x2e78	; 0x2e78 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <PORT_voidInit>:
#include "Port_Interface.h"
#include "Port_Register.h"


void PORT_voidInit(void)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
    DDRA = PORTA_DIR ;
     b3e:	ea e3       	ldi	r30, 0x3A	; 58
     b40:	f0 e0       	ldi	r31, 0x00	; 0
     b42:	8c e0       	ldi	r24, 0x0C	; 12
     b44:	80 83       	st	Z, r24
    DDRB = PORTB_DIR ;
     b46:	e7 e3       	ldi	r30, 0x37	; 55
     b48:	f0 e0       	ldi	r31, 0x00	; 0
     b4a:	87 e1       	ldi	r24, 0x17	; 23
     b4c:	80 83       	st	Z, r24
    DDRC = PORTC_DIR ;
     b4e:	e4 e3       	ldi	r30, 0x34	; 52
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	8f ef       	ldi	r24, 0xFF	; 255
     b54:	80 83       	st	Z, r24
    DDRD = PORTD_DIR ;
     b56:	e1 e3       	ldi	r30, 0x31	; 49
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	10 82       	st	Z, r1

    PORTA = PORTA_INIT_VALUE;
     b5c:	eb e3       	ldi	r30, 0x3B	; 59
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
     b60:	10 82       	st	Z, r1
    PORTB = PORTB_INIT_VALUE;
     b62:	e8 e3       	ldi	r30, 0x38	; 56
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	10 82       	st	Z, r1
    PORTC = PORTC_INIT_VALUE;
     b68:	e5 e3       	ldi	r30, 0x35	; 53
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	10 82       	st	Z, r1
    PORTD = PORTD_INIT_VALUE;
     b6e:	e2 e3       	ldi	r30, 0x32	; 50
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 ee       	ldi	r24, 0xE0	; 224
     b74:	80 83       	st	Z, r24


}
     b76:	cf 91       	pop	r28
     b78:	df 91       	pop	r29
     b7a:	08 95       	ret

00000b7c <DIO_u8SetPinValue>:
}
*/

// Set "Pin" Value
u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
     b7c:	df 93       	push	r29
     b7e:	cf 93       	push	r28
     b80:	00 d0       	rcall	.+0      	; 0xb82 <DIO_u8SetPinValue+0x6>
     b82:	00 d0       	rcall	.+0      	; 0xb84 <DIO_u8SetPinValue+0x8>
     b84:	00 d0       	rcall	.+0      	; 0xb86 <DIO_u8SetPinValue+0xa>
     b86:	cd b7       	in	r28, 0x3d	; 61
     b88:	de b7       	in	r29, 0x3e	; 62
     b8a:	8a 83       	std	Y+2, r24	; 0x02
     b8c:	6b 83       	std	Y+3, r22	; 0x03
     b8e:	4c 83       	std	Y+4, r20	; 0x04
    u8 ERROR_FLAG = 0;
     b90:	19 82       	std	Y+1, r1	; 0x01

    switch (Copy_u8Port)
     b92:	8a 81       	ldd	r24, Y+2	; 0x02
     b94:	28 2f       	mov	r18, r24
     b96:	30 e0       	ldi	r19, 0x00	; 0
     b98:	3e 83       	std	Y+6, r19	; 0x06
     b9a:	2d 83       	std	Y+5, r18	; 0x05
     b9c:	8d 81       	ldd	r24, Y+5	; 0x05
     b9e:	9e 81       	ldd	r25, Y+6	; 0x06
     ba0:	81 30       	cpi	r24, 0x01	; 1
     ba2:	91 05       	cpc	r25, r1
     ba4:	09 f4       	brne	.+2      	; 0xba8 <DIO_u8SetPinValue+0x2c>
     ba6:	49 c0       	rjmp	.+146    	; 0xc3a <DIO_u8SetPinValue+0xbe>
     ba8:	2d 81       	ldd	r18, Y+5	; 0x05
     baa:	3e 81       	ldd	r19, Y+6	; 0x06
     bac:	22 30       	cpi	r18, 0x02	; 2
     bae:	31 05       	cpc	r19, r1
     bb0:	2c f4       	brge	.+10     	; 0xbbc <DIO_u8SetPinValue+0x40>
     bb2:	8d 81       	ldd	r24, Y+5	; 0x05
     bb4:	9e 81       	ldd	r25, Y+6	; 0x06
     bb6:	00 97       	sbiw	r24, 0x00	; 0
     bb8:	71 f0       	breq	.+28     	; 0xbd6 <DIO_u8SetPinValue+0x5a>
     bba:	d4 c0       	rjmp	.+424    	; 0xd64 <DIO_u8SetPinValue+0x1e8>
     bbc:	2d 81       	ldd	r18, Y+5	; 0x05
     bbe:	3e 81       	ldd	r19, Y+6	; 0x06
     bc0:	22 30       	cpi	r18, 0x02	; 2
     bc2:	31 05       	cpc	r19, r1
     bc4:	09 f4       	brne	.+2      	; 0xbc8 <DIO_u8SetPinValue+0x4c>
     bc6:	6b c0       	rjmp	.+214    	; 0xc9e <DIO_u8SetPinValue+0x122>
     bc8:	8d 81       	ldd	r24, Y+5	; 0x05
     bca:	9e 81       	ldd	r25, Y+6	; 0x06
     bcc:	83 30       	cpi	r24, 0x03	; 3
     bce:	91 05       	cpc	r25, r1
     bd0:	09 f4       	brne	.+2      	; 0xbd4 <DIO_u8SetPinValue+0x58>
     bd2:	97 c0       	rjmp	.+302    	; 0xd02 <DIO_u8SetPinValue+0x186>
     bd4:	c7 c0       	rjmp	.+398    	; 0xd64 <DIO_u8SetPinValue+0x1e8>
    {
    case DIO_u8PORTA:
        if (Copy_u8Value == DIO_u8PIN_HIGH)
     bd6:	8c 81       	ldd	r24, Y+4	; 0x04
     bd8:	81 30       	cpi	r24, 0x01	; 1
     bda:	a1 f4       	brne	.+40     	; 0xc04 <DIO_u8SetPinValue+0x88>
            Set_Bit(PORTA, Copy_u8Pin);
     bdc:	ab e3       	ldi	r26, 0x3B	; 59
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	eb e3       	ldi	r30, 0x3B	; 59
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	48 2f       	mov	r20, r24
     be8:	8b 81       	ldd	r24, Y+3	; 0x03
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	02 2e       	mov	r0, r18
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <DIO_u8SetPinValue+0x7e>
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	0a 94       	dec	r0
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <DIO_u8SetPinValue+0x7a>
     bfe:	84 2b       	or	r24, r20
     c00:	8c 93       	st	X, r24
     c02:	b0 c0       	rjmp	.+352    	; 0xd64 <DIO_u8SetPinValue+0x1e8>
        else if (Copy_u8Value == DIO_u8PIN_LOW)
     c04:	8c 81       	ldd	r24, Y+4	; 0x04
     c06:	88 23       	and	r24, r24
     c08:	a9 f4       	brne	.+42     	; 0xc34 <DIO_u8SetPinValue+0xb8>
            Clear_Bit(PORTA, Copy_u8Pin);
     c0a:	ab e3       	ldi	r26, 0x3B	; 59
     c0c:	b0 e0       	ldi	r27, 0x00	; 0
     c0e:	eb e3       	ldi	r30, 0x3B	; 59
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	80 81       	ld	r24, Z
     c14:	48 2f       	mov	r20, r24
     c16:	8b 81       	ldd	r24, Y+3	; 0x03
     c18:	28 2f       	mov	r18, r24
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	02 2e       	mov	r0, r18
     c22:	02 c0       	rjmp	.+4      	; 0xc28 <DIO_u8SetPinValue+0xac>
     c24:	88 0f       	add	r24, r24
     c26:	99 1f       	adc	r25, r25
     c28:	0a 94       	dec	r0
     c2a:	e2 f7       	brpl	.-8      	; 0xc24 <DIO_u8SetPinValue+0xa8>
     c2c:	80 95       	com	r24
     c2e:	84 23       	and	r24, r20
     c30:	8c 93       	st	X, r24
     c32:	98 c0       	rjmp	.+304    	; 0xd64 <DIO_u8SetPinValue+0x1e8>
        else
            ERROR_FLAG = 1;
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	89 83       	std	Y+1, r24	; 0x01
     c38:	95 c0       	rjmp	.+298    	; 0xd64 <DIO_u8SetPinValue+0x1e8>
        break;

    case DIO_u8PORTB:
        if (Copy_u8Value == DIO_u8PIN_HIGH)
     c3a:	8c 81       	ldd	r24, Y+4	; 0x04
     c3c:	81 30       	cpi	r24, 0x01	; 1
     c3e:	a1 f4       	brne	.+40     	; 0xc68 <DIO_u8SetPinValue+0xec>
            Set_Bit(PORTB, Copy_u8Pin);
     c40:	a8 e3       	ldi	r26, 0x38	; 56
     c42:	b0 e0       	ldi	r27, 0x00	; 0
     c44:	e8 e3       	ldi	r30, 0x38	; 56
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	80 81       	ld	r24, Z
     c4a:	48 2f       	mov	r20, r24
     c4c:	8b 81       	ldd	r24, Y+3	; 0x03
     c4e:	28 2f       	mov	r18, r24
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	02 2e       	mov	r0, r18
     c58:	02 c0       	rjmp	.+4      	; 0xc5e <DIO_u8SetPinValue+0xe2>
     c5a:	88 0f       	add	r24, r24
     c5c:	99 1f       	adc	r25, r25
     c5e:	0a 94       	dec	r0
     c60:	e2 f7       	brpl	.-8      	; 0xc5a <DIO_u8SetPinValue+0xde>
     c62:	84 2b       	or	r24, r20
     c64:	8c 93       	st	X, r24
     c66:	7e c0       	rjmp	.+252    	; 0xd64 <DIO_u8SetPinValue+0x1e8>
        else if (Copy_u8Value == DIO_u8PIN_LOW)
     c68:	8c 81       	ldd	r24, Y+4	; 0x04
     c6a:	88 23       	and	r24, r24
     c6c:	a9 f4       	brne	.+42     	; 0xc98 <DIO_u8SetPinValue+0x11c>
            Clear_Bit(PORTB, Copy_u8Pin);
     c6e:	a8 e3       	ldi	r26, 0x38	; 56
     c70:	b0 e0       	ldi	r27, 0x00	; 0
     c72:	e8 e3       	ldi	r30, 0x38	; 56
     c74:	f0 e0       	ldi	r31, 0x00	; 0
     c76:	80 81       	ld	r24, Z
     c78:	48 2f       	mov	r20, r24
     c7a:	8b 81       	ldd	r24, Y+3	; 0x03
     c7c:	28 2f       	mov	r18, r24
     c7e:	30 e0       	ldi	r19, 0x00	; 0
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	02 2e       	mov	r0, r18
     c86:	02 c0       	rjmp	.+4      	; 0xc8c <DIO_u8SetPinValue+0x110>
     c88:	88 0f       	add	r24, r24
     c8a:	99 1f       	adc	r25, r25
     c8c:	0a 94       	dec	r0
     c8e:	e2 f7       	brpl	.-8      	; 0xc88 <DIO_u8SetPinValue+0x10c>
     c90:	80 95       	com	r24
     c92:	84 23       	and	r24, r20
     c94:	8c 93       	st	X, r24
     c96:	66 c0       	rjmp	.+204    	; 0xd64 <DIO_u8SetPinValue+0x1e8>
        else
            ERROR_FLAG = 1;
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	89 83       	std	Y+1, r24	; 0x01
     c9c:	63 c0       	rjmp	.+198    	; 0xd64 <DIO_u8SetPinValue+0x1e8>
        break;

    case DIO_u8PORTC:
        if (Copy_u8Value == DIO_u8PIN_HIGH)
     c9e:	8c 81       	ldd	r24, Y+4	; 0x04
     ca0:	81 30       	cpi	r24, 0x01	; 1
     ca2:	a1 f4       	brne	.+40     	; 0xccc <DIO_u8SetPinValue+0x150>
            Set_Bit(PORTC, Copy_u8Pin);
     ca4:	a5 e3       	ldi	r26, 0x35	; 53
     ca6:	b0 e0       	ldi	r27, 0x00	; 0
     ca8:	e5 e3       	ldi	r30, 0x35	; 53
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	80 81       	ld	r24, Z
     cae:	48 2f       	mov	r20, r24
     cb0:	8b 81       	ldd	r24, Y+3	; 0x03
     cb2:	28 2f       	mov	r18, r24
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	02 2e       	mov	r0, r18
     cbc:	02 c0       	rjmp	.+4      	; 0xcc2 <DIO_u8SetPinValue+0x146>
     cbe:	88 0f       	add	r24, r24
     cc0:	99 1f       	adc	r25, r25
     cc2:	0a 94       	dec	r0
     cc4:	e2 f7       	brpl	.-8      	; 0xcbe <DIO_u8SetPinValue+0x142>
     cc6:	84 2b       	or	r24, r20
     cc8:	8c 93       	st	X, r24
     cca:	4c c0       	rjmp	.+152    	; 0xd64 <DIO_u8SetPinValue+0x1e8>
        else if (Copy_u8Value == DIO_u8PIN_LOW)
     ccc:	8c 81       	ldd	r24, Y+4	; 0x04
     cce:	88 23       	and	r24, r24
     cd0:	a9 f4       	brne	.+42     	; 0xcfc <DIO_u8SetPinValue+0x180>
            Clear_Bit(PORTC, Copy_u8Pin);
     cd2:	a5 e3       	ldi	r26, 0x35	; 53
     cd4:	b0 e0       	ldi	r27, 0x00	; 0
     cd6:	e5 e3       	ldi	r30, 0x35	; 53
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	80 81       	ld	r24, Z
     cdc:	48 2f       	mov	r20, r24
     cde:	8b 81       	ldd	r24, Y+3	; 0x03
     ce0:	28 2f       	mov	r18, r24
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	02 2e       	mov	r0, r18
     cea:	02 c0       	rjmp	.+4      	; 0xcf0 <DIO_u8SetPinValue+0x174>
     cec:	88 0f       	add	r24, r24
     cee:	99 1f       	adc	r25, r25
     cf0:	0a 94       	dec	r0
     cf2:	e2 f7       	brpl	.-8      	; 0xcec <DIO_u8SetPinValue+0x170>
     cf4:	80 95       	com	r24
     cf6:	84 23       	and	r24, r20
     cf8:	8c 93       	st	X, r24
     cfa:	34 c0       	rjmp	.+104    	; 0xd64 <DIO_u8SetPinValue+0x1e8>
        else
            ERROR_FLAG = 1;
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	89 83       	std	Y+1, r24	; 0x01
     d00:	31 c0       	rjmp	.+98     	; 0xd64 <DIO_u8SetPinValue+0x1e8>
        break;

    case DIO_u8PORTD:
        if (Copy_u8Value == DIO_u8PIN_HIGH)
     d02:	8c 81       	ldd	r24, Y+4	; 0x04
     d04:	81 30       	cpi	r24, 0x01	; 1
     d06:	a1 f4       	brne	.+40     	; 0xd30 <DIO_u8SetPinValue+0x1b4>
            Set_Bit(PORTD, Copy_u8Pin);
     d08:	a2 e3       	ldi	r26, 0x32	; 50
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	e2 e3       	ldi	r30, 0x32	; 50
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	48 2f       	mov	r20, r24
     d14:	8b 81       	ldd	r24, Y+3	; 0x03
     d16:	28 2f       	mov	r18, r24
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	02 2e       	mov	r0, r18
     d20:	02 c0       	rjmp	.+4      	; 0xd26 <DIO_u8SetPinValue+0x1aa>
     d22:	88 0f       	add	r24, r24
     d24:	99 1f       	adc	r25, r25
     d26:	0a 94       	dec	r0
     d28:	e2 f7       	brpl	.-8      	; 0xd22 <DIO_u8SetPinValue+0x1a6>
     d2a:	84 2b       	or	r24, r20
     d2c:	8c 93       	st	X, r24
     d2e:	1a c0       	rjmp	.+52     	; 0xd64 <DIO_u8SetPinValue+0x1e8>
        else if (Copy_u8Value == DIO_u8PIN_LOW)
     d30:	8c 81       	ldd	r24, Y+4	; 0x04
     d32:	88 23       	and	r24, r24
     d34:	a9 f4       	brne	.+42     	; 0xd60 <DIO_u8SetPinValue+0x1e4>
            Clear_Bit(PORTD, Copy_u8Pin);
     d36:	a2 e3       	ldi	r26, 0x32	; 50
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	e2 e3       	ldi	r30, 0x32	; 50
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	48 2f       	mov	r20, r24
     d42:	8b 81       	ldd	r24, Y+3	; 0x03
     d44:	28 2f       	mov	r18, r24
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	02 2e       	mov	r0, r18
     d4e:	02 c0       	rjmp	.+4      	; 0xd54 <DIO_u8SetPinValue+0x1d8>
     d50:	88 0f       	add	r24, r24
     d52:	99 1f       	adc	r25, r25
     d54:	0a 94       	dec	r0
     d56:	e2 f7       	brpl	.-8      	; 0xd50 <DIO_u8SetPinValue+0x1d4>
     d58:	80 95       	com	r24
     d5a:	84 23       	and	r24, r20
     d5c:	8c 93       	st	X, r24
     d5e:	02 c0       	rjmp	.+4      	; 0xd64 <DIO_u8SetPinValue+0x1e8>
        else
            ERROR_FLAG = 1;
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	89 83       	std	Y+1, r24	; 0x01

    default:
        break;
    }

    return ERROR_FLAG;
     d64:	89 81       	ldd	r24, Y+1	; 0x01
}
     d66:	26 96       	adiw	r28, 0x06	; 6
     d68:	0f b6       	in	r0, 0x3f	; 63
     d6a:	f8 94       	cli
     d6c:	de bf       	out	0x3e, r29	; 62
     d6e:	0f be       	out	0x3f, r0	; 63
     d70:	cd bf       	out	0x3d, r28	; 61
     d72:	cf 91       	pop	r28
     d74:	df 91       	pop	r29
     d76:	08 95       	ret

00000d78 <DIO_u8SetPortValue>:
    return Local_u8Error;
}*/

// Set "Port" Value
u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
     d78:	df 93       	push	r29
     d7a:	cf 93       	push	r28
     d7c:	00 d0       	rcall	.+0      	; 0xd7e <DIO_u8SetPortValue+0x6>
     d7e:	00 d0       	rcall	.+0      	; 0xd80 <DIO_u8SetPortValue+0x8>
     d80:	0f 92       	push	r0
     d82:	cd b7       	in	r28, 0x3d	; 61
     d84:	de b7       	in	r29, 0x3e	; 62
     d86:	8a 83       	std	Y+2, r24	; 0x02
     d88:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8Error = 0;
     d8a:	19 82       	std	Y+1, r1	; 0x01
    if (Copy_u8Port < 4)
     d8c:	8a 81       	ldd	r24, Y+2	; 0x02
     d8e:	84 30       	cpi	r24, 0x04	; 4
     d90:	98 f5       	brcc	.+102    	; 0xdf8 <DIO_u8SetPortValue+0x80>
    {
        switch (Copy_u8Port)
     d92:	8a 81       	ldd	r24, Y+2	; 0x02
     d94:	28 2f       	mov	r18, r24
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	3d 83       	std	Y+5, r19	; 0x05
     d9a:	2c 83       	std	Y+4, r18	; 0x04
     d9c:	8c 81       	ldd	r24, Y+4	; 0x04
     d9e:	9d 81       	ldd	r25, Y+5	; 0x05
     da0:	81 30       	cpi	r24, 0x01	; 1
     da2:	91 05       	cpc	r25, r1
     da4:	d1 f0       	breq	.+52     	; 0xdda <DIO_u8SetPortValue+0x62>
     da6:	2c 81       	ldd	r18, Y+4	; 0x04
     da8:	3d 81       	ldd	r19, Y+5	; 0x05
     daa:	22 30       	cpi	r18, 0x02	; 2
     dac:	31 05       	cpc	r19, r1
     dae:	2c f4       	brge	.+10     	; 0xdba <DIO_u8SetPortValue+0x42>
     db0:	8c 81       	ldd	r24, Y+4	; 0x04
     db2:	9d 81       	ldd	r25, Y+5	; 0x05
     db4:	00 97       	sbiw	r24, 0x00	; 0
     db6:	61 f0       	breq	.+24     	; 0xdd0 <DIO_u8SetPortValue+0x58>
     db8:	21 c0       	rjmp	.+66     	; 0xdfc <DIO_u8SetPortValue+0x84>
     dba:	2c 81       	ldd	r18, Y+4	; 0x04
     dbc:	3d 81       	ldd	r19, Y+5	; 0x05
     dbe:	22 30       	cpi	r18, 0x02	; 2
     dc0:	31 05       	cpc	r19, r1
     dc2:	81 f0       	breq	.+32     	; 0xde4 <DIO_u8SetPortValue+0x6c>
     dc4:	8c 81       	ldd	r24, Y+4	; 0x04
     dc6:	9d 81       	ldd	r25, Y+5	; 0x05
     dc8:	83 30       	cpi	r24, 0x03	; 3
     dca:	91 05       	cpc	r25, r1
     dcc:	81 f0       	breq	.+32     	; 0xdee <DIO_u8SetPortValue+0x76>
     dce:	16 c0       	rjmp	.+44     	; 0xdfc <DIO_u8SetPortValue+0x84>
        {
        case DIO_u8PORTA:
            PORTA = Copy_u8Value;
     dd0:	eb e3       	ldi	r30, 0x3B	; 59
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	8b 81       	ldd	r24, Y+3	; 0x03
     dd6:	80 83       	st	Z, r24
     dd8:	11 c0       	rjmp	.+34     	; 0xdfc <DIO_u8SetPortValue+0x84>
            break;
        case DIO_u8PORTB:
            PORTB = Copy_u8Value;
     dda:	e8 e3       	ldi	r30, 0x38	; 56
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	8b 81       	ldd	r24, Y+3	; 0x03
     de0:	80 83       	st	Z, r24
     de2:	0c c0       	rjmp	.+24     	; 0xdfc <DIO_u8SetPortValue+0x84>
            break;
        case DIO_u8PORTC:
            PORTC = Copy_u8Value;
     de4:	e5 e3       	ldi	r30, 0x35	; 53
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	8b 81       	ldd	r24, Y+3	; 0x03
     dea:	80 83       	st	Z, r24
     dec:	07 c0       	rjmp	.+14     	; 0xdfc <DIO_u8SetPortValue+0x84>
            break;
        case DIO_u8PORTD:
            PORTD = Copy_u8Value;
     dee:	e2 e3       	ldi	r30, 0x32	; 50
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	8b 81       	ldd	r24, Y+3	; 0x03
     df4:	80 83       	st	Z, r24
     df6:	02 c0       	rjmp	.+4      	; 0xdfc <DIO_u8SetPortValue+0x84>
            break;
        }
    }
    else
    {
        Local_u8Error = 1;
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8Error;
     dfc:	89 81       	ldd	r24, Y+1	; 0x01
}
     dfe:	0f 90       	pop	r0
     e00:	0f 90       	pop	r0
     e02:	0f 90       	pop	r0
     e04:	0f 90       	pop	r0
     e06:	0f 90       	pop	r0
     e08:	cf 91       	pop	r28
     e0a:	df 91       	pop	r29
     e0c:	08 95       	ret

00000e0e <DIO_GetPinValue>:

// Get/Read "Pin" value
u8 DIO_GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 *Copy_u8Value)
{
     e0e:	df 93       	push	r29
     e10:	cf 93       	push	r28
     e12:	cd b7       	in	r28, 0x3d	; 61
     e14:	de b7       	in	r29, 0x3e	; 62
     e16:	27 97       	sbiw	r28, 0x07	; 7
     e18:	0f b6       	in	r0, 0x3f	; 63
     e1a:	f8 94       	cli
     e1c:	de bf       	out	0x3e, r29	; 62
     e1e:	0f be       	out	0x3f, r0	; 63
     e20:	cd bf       	out	0x3d, r28	; 61
     e22:	89 83       	std	Y+1, r24	; 0x01
     e24:	6a 83       	std	Y+2, r22	; 0x02
     e26:	5c 83       	std	Y+4, r21	; 0x04
     e28:	4b 83       	std	Y+3, r20	; 0x03

    switch (Copy_u8Port)
     e2a:	89 81       	ldd	r24, Y+1	; 0x01
     e2c:	28 2f       	mov	r18, r24
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	3f 83       	std	Y+7, r19	; 0x07
     e32:	2e 83       	std	Y+6, r18	; 0x06
     e34:	4e 81       	ldd	r20, Y+6	; 0x06
     e36:	5f 81       	ldd	r21, Y+7	; 0x07
     e38:	41 30       	cpi	r20, 0x01	; 1
     e3a:	51 05       	cpc	r21, r1
     e3c:	59 f1       	breq	.+86     	; 0xe94 <DIO_GetPinValue+0x86>
     e3e:	8e 81       	ldd	r24, Y+6	; 0x06
     e40:	9f 81       	ldd	r25, Y+7	; 0x07
     e42:	82 30       	cpi	r24, 0x02	; 2
     e44:	91 05       	cpc	r25, r1
     e46:	34 f4       	brge	.+12     	; 0xe54 <DIO_GetPinValue+0x46>
     e48:	2e 81       	ldd	r18, Y+6	; 0x06
     e4a:	3f 81       	ldd	r19, Y+7	; 0x07
     e4c:	21 15       	cp	r18, r1
     e4e:	31 05       	cpc	r19, r1
     e50:	69 f0       	breq	.+26     	; 0xe6c <DIO_GetPinValue+0x5e>
     e52:	5c c0       	rjmp	.+184    	; 0xf0c <DIO_GetPinValue+0xfe>
     e54:	4e 81       	ldd	r20, Y+6	; 0x06
     e56:	5f 81       	ldd	r21, Y+7	; 0x07
     e58:	42 30       	cpi	r20, 0x02	; 2
     e5a:	51 05       	cpc	r21, r1
     e5c:	79 f1       	breq	.+94     	; 0xebc <DIO_GetPinValue+0xae>
     e5e:	8e 81       	ldd	r24, Y+6	; 0x06
     e60:	9f 81       	ldd	r25, Y+7	; 0x07
     e62:	83 30       	cpi	r24, 0x03	; 3
     e64:	91 05       	cpc	r25, r1
     e66:	09 f4       	brne	.+2      	; 0xe6a <DIO_GetPinValue+0x5c>
     e68:	3d c0       	rjmp	.+122    	; 0xee4 <DIO_GetPinValue+0xd6>
     e6a:	50 c0       	rjmp	.+160    	; 0xf0c <DIO_GetPinValue+0xfe>
    {
    case DIO_u8PORTA:
        *Copy_u8Value = Get_Bit(PINA, Copy_u8Pin);
     e6c:	e9 e3       	ldi	r30, 0x39	; 57
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	28 2f       	mov	r18, r24
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	8a 81       	ldd	r24, Y+2	; 0x02
     e78:	88 2f       	mov	r24, r24
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	a9 01       	movw	r20, r18
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <DIO_GetPinValue+0x76>
     e80:	55 95       	asr	r21
     e82:	47 95       	ror	r20
     e84:	8a 95       	dec	r24
     e86:	e2 f7       	brpl	.-8      	; 0xe80 <DIO_GetPinValue+0x72>
     e88:	ca 01       	movw	r24, r20
     e8a:	81 70       	andi	r24, 0x01	; 1
     e8c:	eb 81       	ldd	r30, Y+3	; 0x03
     e8e:	fc 81       	ldd	r31, Y+4	; 0x04
     e90:	80 83       	st	Z, r24
     e92:	3f c0       	rjmp	.+126    	; 0xf12 <DIO_GetPinValue+0x104>
        break;
    case DIO_u8PORTB:
        *Copy_u8Value = Get_Bit(PINB, Copy_u8Pin);
     e94:	e6 e3       	ldi	r30, 0x36	; 54
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	28 2f       	mov	r18, r24
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	88 2f       	mov	r24, r24
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	a9 01       	movw	r20, r18
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <DIO_GetPinValue+0x9e>
     ea8:	55 95       	asr	r21
     eaa:	47 95       	ror	r20
     eac:	8a 95       	dec	r24
     eae:	e2 f7       	brpl	.-8      	; 0xea8 <DIO_GetPinValue+0x9a>
     eb0:	ca 01       	movw	r24, r20
     eb2:	81 70       	andi	r24, 0x01	; 1
     eb4:	eb 81       	ldd	r30, Y+3	; 0x03
     eb6:	fc 81       	ldd	r31, Y+4	; 0x04
     eb8:	80 83       	st	Z, r24
     eba:	2b c0       	rjmp	.+86     	; 0xf12 <DIO_GetPinValue+0x104>
        break;
    case DIO_u8PORTC:
        *Copy_u8Value = Get_Bit(PINC, Copy_u8Pin);
     ebc:	e3 e3       	ldi	r30, 0x33	; 51
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	28 2f       	mov	r18, r24
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	88 2f       	mov	r24, r24
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	a9 01       	movw	r20, r18
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <DIO_GetPinValue+0xc6>
     ed0:	55 95       	asr	r21
     ed2:	47 95       	ror	r20
     ed4:	8a 95       	dec	r24
     ed6:	e2 f7       	brpl	.-8      	; 0xed0 <DIO_GetPinValue+0xc2>
     ed8:	ca 01       	movw	r24, r20
     eda:	81 70       	andi	r24, 0x01	; 1
     edc:	eb 81       	ldd	r30, Y+3	; 0x03
     ede:	fc 81       	ldd	r31, Y+4	; 0x04
     ee0:	80 83       	st	Z, r24
     ee2:	17 c0       	rjmp	.+46     	; 0xf12 <DIO_GetPinValue+0x104>
        break;
    case DIO_u8PORTD:
        *Copy_u8Value = Get_Bit(PIND, Copy_u8Pin);
     ee4:	e0 e3       	ldi	r30, 0x30	; 48
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	28 2f       	mov	r18, r24
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	8a 81       	ldd	r24, Y+2	; 0x02
     ef0:	88 2f       	mov	r24, r24
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	a9 01       	movw	r20, r18
     ef6:	02 c0       	rjmp	.+4      	; 0xefc <DIO_GetPinValue+0xee>
     ef8:	55 95       	asr	r21
     efa:	47 95       	ror	r20
     efc:	8a 95       	dec	r24
     efe:	e2 f7       	brpl	.-8      	; 0xef8 <DIO_GetPinValue+0xea>
     f00:	ca 01       	movw	r24, r20
     f02:	81 70       	andi	r24, 0x01	; 1
     f04:	eb 81       	ldd	r30, Y+3	; 0x03
     f06:	fc 81       	ldd	r31, Y+4	; 0x04
     f08:	80 83       	st	Z, r24
     f0a:	03 c0       	rjmp	.+6      	; 0xf12 <DIO_GetPinValue+0x104>
        break;

    default:
    	return NOK;
     f0c:	52 e0       	ldi	r21, 0x02	; 2
     f0e:	5d 83       	std	Y+5, r21	; 0x05
     f10:	02 c0       	rjmp	.+4      	; 0xf16 <DIO_GetPinValue+0x108>
        break;
    }

    return OK;
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	8d 83       	std	Y+5, r24	; 0x05
     f16:	8d 81       	ldd	r24, Y+5	; 0x05
}
     f18:	27 96       	adiw	r28, 0x07	; 7
     f1a:	0f b6       	in	r0, 0x3f	; 63
     f1c:	f8 94       	cli
     f1e:	de bf       	out	0x3e, r29	; 62
     f20:	0f be       	out	0x3f, r0	; 63
     f22:	cd bf       	out	0x3d, r28	; 61
     f24:	cf 91       	pop	r28
     f26:	df 91       	pop	r29
     f28:	08 95       	ret

00000f2a <DIO_voidSetPortValue>:


void DIO_voidSetPortValue( u8 PORT_OUTPUT_VAL )
{
     f2a:	df 93       	push	r29
     f2c:	cf 93       	push	r28
     f2e:	0f 92       	push	r0
     f30:	cd b7       	in	r28, 0x3d	; 61
     f32:	de b7       	in	r29, 0x3e	; 62
     f34:	89 83       	std	Y+1, r24	; 0x01

#if SELECTED_PORT == PORT_u8_A
    PORTA = PORT_OUTPUT_VAL;
     f36:	eb e3       	ldi	r30, 0x3B	; 59
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	89 81       	ldd	r24, Y+1	; 0x01
     f3c:	80 83       	st	Z, r24
    PORTD = PORT_OUTPUT_VAL;
#else

#endif

}
     f3e:	0f 90       	pop	r0
     f40:	cf 91       	pop	r28
     f42:	df 91       	pop	r29
     f44:	08 95       	ret

00000f46 <LCD_voidInit>:
#include "LCD_Private.h"

#include "avr/delay.h"


void LCD_voidInit(){
     f46:	0f 93       	push	r16
     f48:	1f 93       	push	r17
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
     f52:	cc 58       	subi	r28, 0x8C	; 140
     f54:	d0 40       	sbci	r29, 0x00	; 0
     f56:	0f b6       	in	r0, 0x3f	; 63
     f58:	f8 94       	cli
     f5a:	de bf       	out	0x3e, r29	; 62
     f5c:	0f be       	out	0x3f, r0	; 63
     f5e:	cd bf       	out	0x3d, r28	; 61
     f60:	fe 01       	movw	r30, r28
     f62:	e7 57       	subi	r30, 0x77	; 119
     f64:	ff 4f       	sbci	r31, 0xFF	; 255
     f66:	80 e0       	ldi	r24, 0x00	; 0
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	ac e0       	ldi	r26, 0x0C	; 12
     f6c:	b2 e4       	ldi	r27, 0x42	; 66
     f6e:	80 83       	st	Z, r24
     f70:	91 83       	std	Z+1, r25	; 0x01
     f72:	a2 83       	std	Z+2, r26	; 0x02
     f74:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f76:	8e 01       	movw	r16, r28
     f78:	0b 57       	subi	r16, 0x7B	; 123
     f7a:	1f 4f       	sbci	r17, 0xFF	; 255
     f7c:	fe 01       	movw	r30, r28
     f7e:	e7 57       	subi	r30, 0x77	; 119
     f80:	ff 4f       	sbci	r31, 0xFF	; 255
     f82:	60 81       	ld	r22, Z
     f84:	71 81       	ldd	r23, Z+1	; 0x01
     f86:	82 81       	ldd	r24, Z+2	; 0x02
     f88:	93 81       	ldd	r25, Z+3	; 0x03
     f8a:	20 e0       	ldi	r18, 0x00	; 0
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	4a ef       	ldi	r20, 0xFA	; 250
     f90:	54 e4       	ldi	r21, 0x44	; 68
     f92:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f96:	dc 01       	movw	r26, r24
     f98:	cb 01       	movw	r24, r22
     f9a:	f8 01       	movw	r30, r16
     f9c:	80 83       	st	Z, r24
     f9e:	91 83       	std	Z+1, r25	; 0x01
     fa0:	a2 83       	std	Z+2, r26	; 0x02
     fa2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     fa4:	fe 01       	movw	r30, r28
     fa6:	eb 57       	subi	r30, 0x7B	; 123
     fa8:	ff 4f       	sbci	r31, 0xFF	; 255
     faa:	60 81       	ld	r22, Z
     fac:	71 81       	ldd	r23, Z+1	; 0x01
     fae:	82 81       	ldd	r24, Z+2	; 0x02
     fb0:	93 81       	ldd	r25, Z+3	; 0x03
     fb2:	20 e0       	ldi	r18, 0x00	; 0
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	40 e8       	ldi	r20, 0x80	; 128
     fb8:	5f e3       	ldi	r21, 0x3F	; 63
     fba:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     fbe:	88 23       	and	r24, r24
     fc0:	44 f4       	brge	.+16     	; 0xfd2 <LCD_voidInit+0x8c>
		__ticks = 1;
     fc2:	fe 01       	movw	r30, r28
     fc4:	ed 57       	subi	r30, 0x7D	; 125
     fc6:	ff 4f       	sbci	r31, 0xFF	; 255
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	91 83       	std	Z+1, r25	; 0x01
     fce:	80 83       	st	Z, r24
     fd0:	64 c0       	rjmp	.+200    	; 0x109a <LCD_voidInit+0x154>
	else if (__tmp > 65535)
     fd2:	fe 01       	movw	r30, r28
     fd4:	eb 57       	subi	r30, 0x7B	; 123
     fd6:	ff 4f       	sbci	r31, 0xFF	; 255
     fd8:	60 81       	ld	r22, Z
     fda:	71 81       	ldd	r23, Z+1	; 0x01
     fdc:	82 81       	ldd	r24, Z+2	; 0x02
     fde:	93 81       	ldd	r25, Z+3	; 0x03
     fe0:	20 e0       	ldi	r18, 0x00	; 0
     fe2:	3f ef       	ldi	r19, 0xFF	; 255
     fe4:	4f e7       	ldi	r20, 0x7F	; 127
     fe6:	57 e4       	ldi	r21, 0x47	; 71
     fe8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     fec:	18 16       	cp	r1, r24
     fee:	0c f0       	brlt	.+2      	; 0xff2 <LCD_voidInit+0xac>
     ff0:	43 c0       	rjmp	.+134    	; 0x1078 <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ff2:	fe 01       	movw	r30, r28
     ff4:	e7 57       	subi	r30, 0x77	; 119
     ff6:	ff 4f       	sbci	r31, 0xFF	; 255
     ff8:	60 81       	ld	r22, Z
     ffa:	71 81       	ldd	r23, Z+1	; 0x01
     ffc:	82 81       	ldd	r24, Z+2	; 0x02
     ffe:	93 81       	ldd	r25, Z+3	; 0x03
    1000:	20 e0       	ldi	r18, 0x00	; 0
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	40 e2       	ldi	r20, 0x20	; 32
    1006:	51 e4       	ldi	r21, 0x41	; 65
    1008:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    100c:	dc 01       	movw	r26, r24
    100e:	cb 01       	movw	r24, r22
    1010:	8e 01       	movw	r16, r28
    1012:	0d 57       	subi	r16, 0x7D	; 125
    1014:	1f 4f       	sbci	r17, 0xFF	; 255
    1016:	bc 01       	movw	r22, r24
    1018:	cd 01       	movw	r24, r26
    101a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    101e:	dc 01       	movw	r26, r24
    1020:	cb 01       	movw	r24, r22
    1022:	f8 01       	movw	r30, r16
    1024:	91 83       	std	Z+1, r25	; 0x01
    1026:	80 83       	st	Z, r24
    1028:	1f c0       	rjmp	.+62     	; 0x1068 <LCD_voidInit+0x122>
    102a:	fe 01       	movw	r30, r28
    102c:	ef 57       	subi	r30, 0x7F	; 127
    102e:	ff 4f       	sbci	r31, 0xFF	; 255
    1030:	88 ec       	ldi	r24, 0xC8	; 200
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	91 83       	std	Z+1, r25	; 0x01
    1036:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1038:	fe 01       	movw	r30, r28
    103a:	ef 57       	subi	r30, 0x7F	; 127
    103c:	ff 4f       	sbci	r31, 0xFF	; 255
    103e:	80 81       	ld	r24, Z
    1040:	91 81       	ldd	r25, Z+1	; 0x01
    1042:	01 97       	sbiw	r24, 0x01	; 1
    1044:	f1 f7       	brne	.-4      	; 0x1042 <LCD_voidInit+0xfc>
    1046:	fe 01       	movw	r30, r28
    1048:	ef 57       	subi	r30, 0x7F	; 127
    104a:	ff 4f       	sbci	r31, 0xFF	; 255
    104c:	91 83       	std	Z+1, r25	; 0x01
    104e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1050:	de 01       	movw	r26, r28
    1052:	ad 57       	subi	r26, 0x7D	; 125
    1054:	bf 4f       	sbci	r27, 0xFF	; 255
    1056:	fe 01       	movw	r30, r28
    1058:	ed 57       	subi	r30, 0x7D	; 125
    105a:	ff 4f       	sbci	r31, 0xFF	; 255
    105c:	80 81       	ld	r24, Z
    105e:	91 81       	ldd	r25, Z+1	; 0x01
    1060:	01 97       	sbiw	r24, 0x01	; 1
    1062:	11 96       	adiw	r26, 0x01	; 1
    1064:	9c 93       	st	X, r25
    1066:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1068:	fe 01       	movw	r30, r28
    106a:	ed 57       	subi	r30, 0x7D	; 125
    106c:	ff 4f       	sbci	r31, 0xFF	; 255
    106e:	80 81       	ld	r24, Z
    1070:	91 81       	ldd	r25, Z+1	; 0x01
    1072:	00 97       	sbiw	r24, 0x00	; 0
    1074:	d1 f6       	brne	.-76     	; 0x102a <LCD_voidInit+0xe4>
    1076:	27 c0       	rjmp	.+78     	; 0x10c6 <LCD_voidInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1078:	8e 01       	movw	r16, r28
    107a:	0d 57       	subi	r16, 0x7D	; 125
    107c:	1f 4f       	sbci	r17, 0xFF	; 255
    107e:	fe 01       	movw	r30, r28
    1080:	eb 57       	subi	r30, 0x7B	; 123
    1082:	ff 4f       	sbci	r31, 0xFF	; 255
    1084:	60 81       	ld	r22, Z
    1086:	71 81       	ldd	r23, Z+1	; 0x01
    1088:	82 81       	ldd	r24, Z+2	; 0x02
    108a:	93 81       	ldd	r25, Z+3	; 0x03
    108c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1090:	dc 01       	movw	r26, r24
    1092:	cb 01       	movw	r24, r22
    1094:	f8 01       	movw	r30, r16
    1096:	91 83       	std	Z+1, r25	; 0x01
    1098:	80 83       	st	Z, r24
    109a:	de 01       	movw	r26, r28
    109c:	a1 58       	subi	r26, 0x81	; 129
    109e:	bf 4f       	sbci	r27, 0xFF	; 255
    10a0:	fe 01       	movw	r30, r28
    10a2:	ed 57       	subi	r30, 0x7D	; 125
    10a4:	ff 4f       	sbci	r31, 0xFF	; 255
    10a6:	80 81       	ld	r24, Z
    10a8:	91 81       	ldd	r25, Z+1	; 0x01
    10aa:	8d 93       	st	X+, r24
    10ac:	9c 93       	st	X, r25
    10ae:	fe 01       	movw	r30, r28
    10b0:	e1 58       	subi	r30, 0x81	; 129
    10b2:	ff 4f       	sbci	r31, 0xFF	; 255
    10b4:	80 81       	ld	r24, Z
    10b6:	91 81       	ldd	r25, Z+1	; 0x01
    10b8:	01 97       	sbiw	r24, 0x01	; 1
    10ba:	f1 f7       	brne	.-4      	; 0x10b8 <LCD_voidInit+0x172>
    10bc:	fe 01       	movw	r30, r28
    10be:	e1 58       	subi	r30, 0x81	; 129
    10c0:	ff 4f       	sbci	r31, 0xFF	; 255
    10c2:	91 83       	std	Z+1, r25	; 0x01
    10c4:	80 83       	st	Z, r24
	_delay_ms(35);
#if LCD_BITS == LCD_4_BIT_MODE
	LCD_voidSendInitCommand(LCD_SpecialFunctionSet);
    10c6:	80 e3       	ldi	r24, 0x30	; 48
    10c8:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <LCD_voidSendInitCommand>
    10cc:	fe 01       	movw	r30, r28
    10ce:	e5 58       	subi	r30, 0x85	; 133
    10d0:	ff 4f       	sbci	r31, 0xFF	; 255
    10d2:	80 e0       	ldi	r24, 0x00	; 0
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	a0 ea       	ldi	r26, 0xA0	; 160
    10d8:	b0 e4       	ldi	r27, 0x40	; 64
    10da:	80 83       	st	Z, r24
    10dc:	91 83       	std	Z+1, r25	; 0x01
    10de:	a2 83       	std	Z+2, r26	; 0x02
    10e0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10e2:	8e 01       	movw	r16, r28
    10e4:	09 58       	subi	r16, 0x89	; 137
    10e6:	1f 4f       	sbci	r17, 0xFF	; 255
    10e8:	fe 01       	movw	r30, r28
    10ea:	e5 58       	subi	r30, 0x85	; 133
    10ec:	ff 4f       	sbci	r31, 0xFF	; 255
    10ee:	60 81       	ld	r22, Z
    10f0:	71 81       	ldd	r23, Z+1	; 0x01
    10f2:	82 81       	ldd	r24, Z+2	; 0x02
    10f4:	93 81       	ldd	r25, Z+3	; 0x03
    10f6:	20 e0       	ldi	r18, 0x00	; 0
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	4a ef       	ldi	r20, 0xFA	; 250
    10fc:	54 e4       	ldi	r21, 0x44	; 68
    10fe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1102:	dc 01       	movw	r26, r24
    1104:	cb 01       	movw	r24, r22
    1106:	f8 01       	movw	r30, r16
    1108:	80 83       	st	Z, r24
    110a:	91 83       	std	Z+1, r25	; 0x01
    110c:	a2 83       	std	Z+2, r26	; 0x02
    110e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1110:	fe 01       	movw	r30, r28
    1112:	e9 58       	subi	r30, 0x89	; 137
    1114:	ff 4f       	sbci	r31, 0xFF	; 255
    1116:	60 81       	ld	r22, Z
    1118:	71 81       	ldd	r23, Z+1	; 0x01
    111a:	82 81       	ldd	r24, Z+2	; 0x02
    111c:	93 81       	ldd	r25, Z+3	; 0x03
    111e:	20 e0       	ldi	r18, 0x00	; 0
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	40 e8       	ldi	r20, 0x80	; 128
    1124:	5f e3       	ldi	r21, 0x3F	; 63
    1126:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    112a:	88 23       	and	r24, r24
    112c:	44 f4       	brge	.+16     	; 0x113e <LCD_voidInit+0x1f8>
		__ticks = 1;
    112e:	fe 01       	movw	r30, r28
    1130:	eb 58       	subi	r30, 0x8B	; 139
    1132:	ff 4f       	sbci	r31, 0xFF	; 255
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	91 83       	std	Z+1, r25	; 0x01
    113a:	80 83       	st	Z, r24
    113c:	64 c0       	rjmp	.+200    	; 0x1206 <LCD_voidInit+0x2c0>
	else if (__tmp > 65535)
    113e:	fe 01       	movw	r30, r28
    1140:	e9 58       	subi	r30, 0x89	; 137
    1142:	ff 4f       	sbci	r31, 0xFF	; 255
    1144:	60 81       	ld	r22, Z
    1146:	71 81       	ldd	r23, Z+1	; 0x01
    1148:	82 81       	ldd	r24, Z+2	; 0x02
    114a:	93 81       	ldd	r25, Z+3	; 0x03
    114c:	20 e0       	ldi	r18, 0x00	; 0
    114e:	3f ef       	ldi	r19, 0xFF	; 255
    1150:	4f e7       	ldi	r20, 0x7F	; 127
    1152:	57 e4       	ldi	r21, 0x47	; 71
    1154:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1158:	18 16       	cp	r1, r24
    115a:	0c f0       	brlt	.+2      	; 0x115e <LCD_voidInit+0x218>
    115c:	43 c0       	rjmp	.+134    	; 0x11e4 <LCD_voidInit+0x29e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    115e:	fe 01       	movw	r30, r28
    1160:	e5 58       	subi	r30, 0x85	; 133
    1162:	ff 4f       	sbci	r31, 0xFF	; 255
    1164:	60 81       	ld	r22, Z
    1166:	71 81       	ldd	r23, Z+1	; 0x01
    1168:	82 81       	ldd	r24, Z+2	; 0x02
    116a:	93 81       	ldd	r25, Z+3	; 0x03
    116c:	20 e0       	ldi	r18, 0x00	; 0
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	40 e2       	ldi	r20, 0x20	; 32
    1172:	51 e4       	ldi	r21, 0x41	; 65
    1174:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1178:	dc 01       	movw	r26, r24
    117a:	cb 01       	movw	r24, r22
    117c:	8e 01       	movw	r16, r28
    117e:	0b 58       	subi	r16, 0x8B	; 139
    1180:	1f 4f       	sbci	r17, 0xFF	; 255
    1182:	bc 01       	movw	r22, r24
    1184:	cd 01       	movw	r24, r26
    1186:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    118a:	dc 01       	movw	r26, r24
    118c:	cb 01       	movw	r24, r22
    118e:	f8 01       	movw	r30, r16
    1190:	91 83       	std	Z+1, r25	; 0x01
    1192:	80 83       	st	Z, r24
    1194:	1f c0       	rjmp	.+62     	; 0x11d4 <LCD_voidInit+0x28e>
    1196:	fe 01       	movw	r30, r28
    1198:	ed 58       	subi	r30, 0x8D	; 141
    119a:	ff 4f       	sbci	r31, 0xFF	; 255
    119c:	88 ec       	ldi	r24, 0xC8	; 200
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	91 83       	std	Z+1, r25	; 0x01
    11a2:	80 83       	st	Z, r24
    11a4:	fe 01       	movw	r30, r28
    11a6:	ed 58       	subi	r30, 0x8D	; 141
    11a8:	ff 4f       	sbci	r31, 0xFF	; 255
    11aa:	80 81       	ld	r24, Z
    11ac:	91 81       	ldd	r25, Z+1	; 0x01
    11ae:	01 97       	sbiw	r24, 0x01	; 1
    11b0:	f1 f7       	brne	.-4      	; 0x11ae <LCD_voidInit+0x268>
    11b2:	fe 01       	movw	r30, r28
    11b4:	ed 58       	subi	r30, 0x8D	; 141
    11b6:	ff 4f       	sbci	r31, 0xFF	; 255
    11b8:	91 83       	std	Z+1, r25	; 0x01
    11ba:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11bc:	de 01       	movw	r26, r28
    11be:	ab 58       	subi	r26, 0x8B	; 139
    11c0:	bf 4f       	sbci	r27, 0xFF	; 255
    11c2:	fe 01       	movw	r30, r28
    11c4:	eb 58       	subi	r30, 0x8B	; 139
    11c6:	ff 4f       	sbci	r31, 0xFF	; 255
    11c8:	80 81       	ld	r24, Z
    11ca:	91 81       	ldd	r25, Z+1	; 0x01
    11cc:	01 97       	sbiw	r24, 0x01	; 1
    11ce:	11 96       	adiw	r26, 0x01	; 1
    11d0:	9c 93       	st	X, r25
    11d2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11d4:	fe 01       	movw	r30, r28
    11d6:	eb 58       	subi	r30, 0x8B	; 139
    11d8:	ff 4f       	sbci	r31, 0xFF	; 255
    11da:	80 81       	ld	r24, Z
    11dc:	91 81       	ldd	r25, Z+1	; 0x01
    11de:	00 97       	sbiw	r24, 0x00	; 0
    11e0:	d1 f6       	brne	.-76     	; 0x1196 <LCD_voidInit+0x250>
    11e2:	27 c0       	rjmp	.+78     	; 0x1232 <LCD_voidInit+0x2ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11e4:	8e 01       	movw	r16, r28
    11e6:	0b 58       	subi	r16, 0x8B	; 139
    11e8:	1f 4f       	sbci	r17, 0xFF	; 255
    11ea:	fe 01       	movw	r30, r28
    11ec:	e9 58       	subi	r30, 0x89	; 137
    11ee:	ff 4f       	sbci	r31, 0xFF	; 255
    11f0:	60 81       	ld	r22, Z
    11f2:	71 81       	ldd	r23, Z+1	; 0x01
    11f4:	82 81       	ldd	r24, Z+2	; 0x02
    11f6:	93 81       	ldd	r25, Z+3	; 0x03
    11f8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11fc:	dc 01       	movw	r26, r24
    11fe:	cb 01       	movw	r24, r22
    1200:	f8 01       	movw	r30, r16
    1202:	91 83       	std	Z+1, r25	; 0x01
    1204:	80 83       	st	Z, r24
    1206:	de 01       	movw	r26, r28
    1208:	af 58       	subi	r26, 0x8F	; 143
    120a:	bf 4f       	sbci	r27, 0xFF	; 255
    120c:	fe 01       	movw	r30, r28
    120e:	eb 58       	subi	r30, 0x8B	; 139
    1210:	ff 4f       	sbci	r31, 0xFF	; 255
    1212:	80 81       	ld	r24, Z
    1214:	91 81       	ldd	r25, Z+1	; 0x01
    1216:	8d 93       	st	X+, r24
    1218:	9c 93       	st	X, r25
    121a:	fe 01       	movw	r30, r28
    121c:	ef 58       	subi	r30, 0x8F	; 143
    121e:	ff 4f       	sbci	r31, 0xFF	; 255
    1220:	80 81       	ld	r24, Z
    1222:	91 81       	ldd	r25, Z+1	; 0x01
    1224:	01 97       	sbiw	r24, 0x01	; 1
    1226:	f1 f7       	brne	.-4      	; 0x1224 <LCD_voidInit+0x2de>
    1228:	fe 01       	movw	r30, r28
    122a:	ef 58       	subi	r30, 0x8F	; 143
    122c:	ff 4f       	sbci	r31, 0xFF	; 255
    122e:	91 83       	std	Z+1, r25	; 0x01
    1230:	80 83       	st	Z, r24
	_delay_ms(5);
	LCD_voidSendInitCommand(LCD_SpecialFunctionSet);
    1232:	80 e3       	ldi	r24, 0x30	; 48
    1234:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <LCD_voidSendInitCommand>
    1238:	fe 01       	movw	r30, r28
    123a:	e3 59       	subi	r30, 0x93	; 147
    123c:	ff 4f       	sbci	r31, 0xFF	; 255
    123e:	80 e0       	ldi	r24, 0x00	; 0
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	a0 e8       	ldi	r26, 0x80	; 128
    1244:	bf e3       	ldi	r27, 0x3F	; 63
    1246:	80 83       	st	Z, r24
    1248:	91 83       	std	Z+1, r25	; 0x01
    124a:	a2 83       	std	Z+2, r26	; 0x02
    124c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    124e:	8e 01       	movw	r16, r28
    1250:	07 59       	subi	r16, 0x97	; 151
    1252:	1f 4f       	sbci	r17, 0xFF	; 255
    1254:	fe 01       	movw	r30, r28
    1256:	e3 59       	subi	r30, 0x93	; 147
    1258:	ff 4f       	sbci	r31, 0xFF	; 255
    125a:	60 81       	ld	r22, Z
    125c:	71 81       	ldd	r23, Z+1	; 0x01
    125e:	82 81       	ldd	r24, Z+2	; 0x02
    1260:	93 81       	ldd	r25, Z+3	; 0x03
    1262:	20 e0       	ldi	r18, 0x00	; 0
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	4a ef       	ldi	r20, 0xFA	; 250
    1268:	54 e4       	ldi	r21, 0x44	; 68
    126a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    126e:	dc 01       	movw	r26, r24
    1270:	cb 01       	movw	r24, r22
    1272:	f8 01       	movw	r30, r16
    1274:	80 83       	st	Z, r24
    1276:	91 83       	std	Z+1, r25	; 0x01
    1278:	a2 83       	std	Z+2, r26	; 0x02
    127a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    127c:	fe 01       	movw	r30, r28
    127e:	e7 59       	subi	r30, 0x97	; 151
    1280:	ff 4f       	sbci	r31, 0xFF	; 255
    1282:	60 81       	ld	r22, Z
    1284:	71 81       	ldd	r23, Z+1	; 0x01
    1286:	82 81       	ldd	r24, Z+2	; 0x02
    1288:	93 81       	ldd	r25, Z+3	; 0x03
    128a:	20 e0       	ldi	r18, 0x00	; 0
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	40 e8       	ldi	r20, 0x80	; 128
    1290:	5f e3       	ldi	r21, 0x3F	; 63
    1292:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1296:	88 23       	and	r24, r24
    1298:	44 f4       	brge	.+16     	; 0x12aa <LCD_voidInit+0x364>
		__ticks = 1;
    129a:	fe 01       	movw	r30, r28
    129c:	e9 59       	subi	r30, 0x99	; 153
    129e:	ff 4f       	sbci	r31, 0xFF	; 255
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	91 83       	std	Z+1, r25	; 0x01
    12a6:	80 83       	st	Z, r24
    12a8:	64 c0       	rjmp	.+200    	; 0x1372 <LCD_voidInit+0x42c>
	else if (__tmp > 65535)
    12aa:	fe 01       	movw	r30, r28
    12ac:	e7 59       	subi	r30, 0x97	; 151
    12ae:	ff 4f       	sbci	r31, 0xFF	; 255
    12b0:	60 81       	ld	r22, Z
    12b2:	71 81       	ldd	r23, Z+1	; 0x01
    12b4:	82 81       	ldd	r24, Z+2	; 0x02
    12b6:	93 81       	ldd	r25, Z+3	; 0x03
    12b8:	20 e0       	ldi	r18, 0x00	; 0
    12ba:	3f ef       	ldi	r19, 0xFF	; 255
    12bc:	4f e7       	ldi	r20, 0x7F	; 127
    12be:	57 e4       	ldi	r21, 0x47	; 71
    12c0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    12c4:	18 16       	cp	r1, r24
    12c6:	0c f0       	brlt	.+2      	; 0x12ca <LCD_voidInit+0x384>
    12c8:	43 c0       	rjmp	.+134    	; 0x1350 <LCD_voidInit+0x40a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12ca:	fe 01       	movw	r30, r28
    12cc:	e3 59       	subi	r30, 0x93	; 147
    12ce:	ff 4f       	sbci	r31, 0xFF	; 255
    12d0:	60 81       	ld	r22, Z
    12d2:	71 81       	ldd	r23, Z+1	; 0x01
    12d4:	82 81       	ldd	r24, Z+2	; 0x02
    12d6:	93 81       	ldd	r25, Z+3	; 0x03
    12d8:	20 e0       	ldi	r18, 0x00	; 0
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	40 e2       	ldi	r20, 0x20	; 32
    12de:	51 e4       	ldi	r21, 0x41	; 65
    12e0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12e4:	dc 01       	movw	r26, r24
    12e6:	cb 01       	movw	r24, r22
    12e8:	8e 01       	movw	r16, r28
    12ea:	09 59       	subi	r16, 0x99	; 153
    12ec:	1f 4f       	sbci	r17, 0xFF	; 255
    12ee:	bc 01       	movw	r22, r24
    12f0:	cd 01       	movw	r24, r26
    12f2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12f6:	dc 01       	movw	r26, r24
    12f8:	cb 01       	movw	r24, r22
    12fa:	f8 01       	movw	r30, r16
    12fc:	91 83       	std	Z+1, r25	; 0x01
    12fe:	80 83       	st	Z, r24
    1300:	1f c0       	rjmp	.+62     	; 0x1340 <LCD_voidInit+0x3fa>
    1302:	fe 01       	movw	r30, r28
    1304:	eb 59       	subi	r30, 0x9B	; 155
    1306:	ff 4f       	sbci	r31, 0xFF	; 255
    1308:	88 ec       	ldi	r24, 0xC8	; 200
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	91 83       	std	Z+1, r25	; 0x01
    130e:	80 83       	st	Z, r24
    1310:	fe 01       	movw	r30, r28
    1312:	eb 59       	subi	r30, 0x9B	; 155
    1314:	ff 4f       	sbci	r31, 0xFF	; 255
    1316:	80 81       	ld	r24, Z
    1318:	91 81       	ldd	r25, Z+1	; 0x01
    131a:	01 97       	sbiw	r24, 0x01	; 1
    131c:	f1 f7       	brne	.-4      	; 0x131a <LCD_voidInit+0x3d4>
    131e:	fe 01       	movw	r30, r28
    1320:	eb 59       	subi	r30, 0x9B	; 155
    1322:	ff 4f       	sbci	r31, 0xFF	; 255
    1324:	91 83       	std	Z+1, r25	; 0x01
    1326:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1328:	de 01       	movw	r26, r28
    132a:	a9 59       	subi	r26, 0x99	; 153
    132c:	bf 4f       	sbci	r27, 0xFF	; 255
    132e:	fe 01       	movw	r30, r28
    1330:	e9 59       	subi	r30, 0x99	; 153
    1332:	ff 4f       	sbci	r31, 0xFF	; 255
    1334:	80 81       	ld	r24, Z
    1336:	91 81       	ldd	r25, Z+1	; 0x01
    1338:	01 97       	sbiw	r24, 0x01	; 1
    133a:	11 96       	adiw	r26, 0x01	; 1
    133c:	9c 93       	st	X, r25
    133e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1340:	fe 01       	movw	r30, r28
    1342:	e9 59       	subi	r30, 0x99	; 153
    1344:	ff 4f       	sbci	r31, 0xFF	; 255
    1346:	80 81       	ld	r24, Z
    1348:	91 81       	ldd	r25, Z+1	; 0x01
    134a:	00 97       	sbiw	r24, 0x00	; 0
    134c:	d1 f6       	brne	.-76     	; 0x1302 <LCD_voidInit+0x3bc>
    134e:	27 c0       	rjmp	.+78     	; 0x139e <LCD_voidInit+0x458>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1350:	8e 01       	movw	r16, r28
    1352:	09 59       	subi	r16, 0x99	; 153
    1354:	1f 4f       	sbci	r17, 0xFF	; 255
    1356:	fe 01       	movw	r30, r28
    1358:	e7 59       	subi	r30, 0x97	; 151
    135a:	ff 4f       	sbci	r31, 0xFF	; 255
    135c:	60 81       	ld	r22, Z
    135e:	71 81       	ldd	r23, Z+1	; 0x01
    1360:	82 81       	ldd	r24, Z+2	; 0x02
    1362:	93 81       	ldd	r25, Z+3	; 0x03
    1364:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1368:	dc 01       	movw	r26, r24
    136a:	cb 01       	movw	r24, r22
    136c:	f8 01       	movw	r30, r16
    136e:	91 83       	std	Z+1, r25	; 0x01
    1370:	80 83       	st	Z, r24
    1372:	de 01       	movw	r26, r28
    1374:	ad 59       	subi	r26, 0x9D	; 157
    1376:	bf 4f       	sbci	r27, 0xFF	; 255
    1378:	fe 01       	movw	r30, r28
    137a:	e9 59       	subi	r30, 0x99	; 153
    137c:	ff 4f       	sbci	r31, 0xFF	; 255
    137e:	80 81       	ld	r24, Z
    1380:	91 81       	ldd	r25, Z+1	; 0x01
    1382:	8d 93       	st	X+, r24
    1384:	9c 93       	st	X, r25
    1386:	fe 01       	movw	r30, r28
    1388:	ed 59       	subi	r30, 0x9D	; 157
    138a:	ff 4f       	sbci	r31, 0xFF	; 255
    138c:	80 81       	ld	r24, Z
    138e:	91 81       	ldd	r25, Z+1	; 0x01
    1390:	01 97       	sbiw	r24, 0x01	; 1
    1392:	f1 f7       	brne	.-4      	; 0x1390 <LCD_voidInit+0x44a>
    1394:	fe 01       	movw	r30, r28
    1396:	ed 59       	subi	r30, 0x9D	; 157
    1398:	ff 4f       	sbci	r31, 0xFF	; 255
    139a:	91 83       	std	Z+1, r25	; 0x01
    139c:	80 83       	st	Z, r24
	_delay_ms(1);
	LCD_voidSendInitCommand(LCD_SpecialFunctionSet);
    139e:	80 e3       	ldi	r24, 0x30	; 48
    13a0:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <LCD_voidSendInitCommand>
    13a4:	fe 01       	movw	r30, r28
    13a6:	e1 5a       	subi	r30, 0xA1	; 161
    13a8:	ff 4f       	sbci	r31, 0xFF	; 255
    13aa:	80 e0       	ldi	r24, 0x00	; 0
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	a0 e8       	ldi	r26, 0x80	; 128
    13b0:	bf e3       	ldi	r27, 0x3F	; 63
    13b2:	80 83       	st	Z, r24
    13b4:	91 83       	std	Z+1, r25	; 0x01
    13b6:	a2 83       	std	Z+2, r26	; 0x02
    13b8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13ba:	8e 01       	movw	r16, r28
    13bc:	05 5a       	subi	r16, 0xA5	; 165
    13be:	1f 4f       	sbci	r17, 0xFF	; 255
    13c0:	fe 01       	movw	r30, r28
    13c2:	e1 5a       	subi	r30, 0xA1	; 161
    13c4:	ff 4f       	sbci	r31, 0xFF	; 255
    13c6:	60 81       	ld	r22, Z
    13c8:	71 81       	ldd	r23, Z+1	; 0x01
    13ca:	82 81       	ldd	r24, Z+2	; 0x02
    13cc:	93 81       	ldd	r25, Z+3	; 0x03
    13ce:	20 e0       	ldi	r18, 0x00	; 0
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	4a ef       	ldi	r20, 0xFA	; 250
    13d4:	54 e4       	ldi	r21, 0x44	; 68
    13d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13da:	dc 01       	movw	r26, r24
    13dc:	cb 01       	movw	r24, r22
    13de:	f8 01       	movw	r30, r16
    13e0:	80 83       	st	Z, r24
    13e2:	91 83       	std	Z+1, r25	; 0x01
    13e4:	a2 83       	std	Z+2, r26	; 0x02
    13e6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    13e8:	fe 01       	movw	r30, r28
    13ea:	e5 5a       	subi	r30, 0xA5	; 165
    13ec:	ff 4f       	sbci	r31, 0xFF	; 255
    13ee:	60 81       	ld	r22, Z
    13f0:	71 81       	ldd	r23, Z+1	; 0x01
    13f2:	82 81       	ldd	r24, Z+2	; 0x02
    13f4:	93 81       	ldd	r25, Z+3	; 0x03
    13f6:	20 e0       	ldi	r18, 0x00	; 0
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	40 e8       	ldi	r20, 0x80	; 128
    13fc:	5f e3       	ldi	r21, 0x3F	; 63
    13fe:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1402:	88 23       	and	r24, r24
    1404:	44 f4       	brge	.+16     	; 0x1416 <LCD_voidInit+0x4d0>
		__ticks = 1;
    1406:	fe 01       	movw	r30, r28
    1408:	e7 5a       	subi	r30, 0xA7	; 167
    140a:	ff 4f       	sbci	r31, 0xFF	; 255
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	91 83       	std	Z+1, r25	; 0x01
    1412:	80 83       	st	Z, r24
    1414:	64 c0       	rjmp	.+200    	; 0x14de <LCD_voidInit+0x598>
	else if (__tmp > 65535)
    1416:	fe 01       	movw	r30, r28
    1418:	e5 5a       	subi	r30, 0xA5	; 165
    141a:	ff 4f       	sbci	r31, 0xFF	; 255
    141c:	60 81       	ld	r22, Z
    141e:	71 81       	ldd	r23, Z+1	; 0x01
    1420:	82 81       	ldd	r24, Z+2	; 0x02
    1422:	93 81       	ldd	r25, Z+3	; 0x03
    1424:	20 e0       	ldi	r18, 0x00	; 0
    1426:	3f ef       	ldi	r19, 0xFF	; 255
    1428:	4f e7       	ldi	r20, 0x7F	; 127
    142a:	57 e4       	ldi	r21, 0x47	; 71
    142c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1430:	18 16       	cp	r1, r24
    1432:	0c f0       	brlt	.+2      	; 0x1436 <LCD_voidInit+0x4f0>
    1434:	43 c0       	rjmp	.+134    	; 0x14bc <LCD_voidInit+0x576>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1436:	fe 01       	movw	r30, r28
    1438:	e1 5a       	subi	r30, 0xA1	; 161
    143a:	ff 4f       	sbci	r31, 0xFF	; 255
    143c:	60 81       	ld	r22, Z
    143e:	71 81       	ldd	r23, Z+1	; 0x01
    1440:	82 81       	ldd	r24, Z+2	; 0x02
    1442:	93 81       	ldd	r25, Z+3	; 0x03
    1444:	20 e0       	ldi	r18, 0x00	; 0
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	40 e2       	ldi	r20, 0x20	; 32
    144a:	51 e4       	ldi	r21, 0x41	; 65
    144c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1450:	dc 01       	movw	r26, r24
    1452:	cb 01       	movw	r24, r22
    1454:	8e 01       	movw	r16, r28
    1456:	07 5a       	subi	r16, 0xA7	; 167
    1458:	1f 4f       	sbci	r17, 0xFF	; 255
    145a:	bc 01       	movw	r22, r24
    145c:	cd 01       	movw	r24, r26
    145e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1462:	dc 01       	movw	r26, r24
    1464:	cb 01       	movw	r24, r22
    1466:	f8 01       	movw	r30, r16
    1468:	91 83       	std	Z+1, r25	; 0x01
    146a:	80 83       	st	Z, r24
    146c:	1f c0       	rjmp	.+62     	; 0x14ac <LCD_voidInit+0x566>
    146e:	fe 01       	movw	r30, r28
    1470:	e9 5a       	subi	r30, 0xA9	; 169
    1472:	ff 4f       	sbci	r31, 0xFF	; 255
    1474:	88 ec       	ldi	r24, 0xC8	; 200
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	91 83       	std	Z+1, r25	; 0x01
    147a:	80 83       	st	Z, r24
    147c:	fe 01       	movw	r30, r28
    147e:	e9 5a       	subi	r30, 0xA9	; 169
    1480:	ff 4f       	sbci	r31, 0xFF	; 255
    1482:	80 81       	ld	r24, Z
    1484:	91 81       	ldd	r25, Z+1	; 0x01
    1486:	01 97       	sbiw	r24, 0x01	; 1
    1488:	f1 f7       	brne	.-4      	; 0x1486 <LCD_voidInit+0x540>
    148a:	fe 01       	movw	r30, r28
    148c:	e9 5a       	subi	r30, 0xA9	; 169
    148e:	ff 4f       	sbci	r31, 0xFF	; 255
    1490:	91 83       	std	Z+1, r25	; 0x01
    1492:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1494:	de 01       	movw	r26, r28
    1496:	a7 5a       	subi	r26, 0xA7	; 167
    1498:	bf 4f       	sbci	r27, 0xFF	; 255
    149a:	fe 01       	movw	r30, r28
    149c:	e7 5a       	subi	r30, 0xA7	; 167
    149e:	ff 4f       	sbci	r31, 0xFF	; 255
    14a0:	80 81       	ld	r24, Z
    14a2:	91 81       	ldd	r25, Z+1	; 0x01
    14a4:	01 97       	sbiw	r24, 0x01	; 1
    14a6:	11 96       	adiw	r26, 0x01	; 1
    14a8:	9c 93       	st	X, r25
    14aa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ac:	fe 01       	movw	r30, r28
    14ae:	e7 5a       	subi	r30, 0xA7	; 167
    14b0:	ff 4f       	sbci	r31, 0xFF	; 255
    14b2:	80 81       	ld	r24, Z
    14b4:	91 81       	ldd	r25, Z+1	; 0x01
    14b6:	00 97       	sbiw	r24, 0x00	; 0
    14b8:	d1 f6       	brne	.-76     	; 0x146e <LCD_voidInit+0x528>
    14ba:	27 c0       	rjmp	.+78     	; 0x150a <LCD_voidInit+0x5c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14bc:	8e 01       	movw	r16, r28
    14be:	07 5a       	subi	r16, 0xA7	; 167
    14c0:	1f 4f       	sbci	r17, 0xFF	; 255
    14c2:	fe 01       	movw	r30, r28
    14c4:	e5 5a       	subi	r30, 0xA5	; 165
    14c6:	ff 4f       	sbci	r31, 0xFF	; 255
    14c8:	60 81       	ld	r22, Z
    14ca:	71 81       	ldd	r23, Z+1	; 0x01
    14cc:	82 81       	ldd	r24, Z+2	; 0x02
    14ce:	93 81       	ldd	r25, Z+3	; 0x03
    14d0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14d4:	dc 01       	movw	r26, r24
    14d6:	cb 01       	movw	r24, r22
    14d8:	f8 01       	movw	r30, r16
    14da:	91 83       	std	Z+1, r25	; 0x01
    14dc:	80 83       	st	Z, r24
    14de:	de 01       	movw	r26, r28
    14e0:	ab 5a       	subi	r26, 0xAB	; 171
    14e2:	bf 4f       	sbci	r27, 0xFF	; 255
    14e4:	fe 01       	movw	r30, r28
    14e6:	e7 5a       	subi	r30, 0xA7	; 167
    14e8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ea:	80 81       	ld	r24, Z
    14ec:	91 81       	ldd	r25, Z+1	; 0x01
    14ee:	8d 93       	st	X+, r24
    14f0:	9c 93       	st	X, r25
    14f2:	fe 01       	movw	r30, r28
    14f4:	eb 5a       	subi	r30, 0xAB	; 171
    14f6:	ff 4f       	sbci	r31, 0xFF	; 255
    14f8:	80 81       	ld	r24, Z
    14fa:	91 81       	ldd	r25, Z+1	; 0x01
    14fc:	01 97       	sbiw	r24, 0x01	; 1
    14fe:	f1 f7       	brne	.-4      	; 0x14fc <LCD_voidInit+0x5b6>
    1500:	fe 01       	movw	r30, r28
    1502:	eb 5a       	subi	r30, 0xAB	; 171
    1504:	ff 4f       	sbci	r31, 0xFF	; 255
    1506:	91 83       	std	Z+1, r25	; 0x01
    1508:	80 83       	st	Z, r24
	_delay_ms(1);
	LCD_voidSendInitCommand(LCD_4BitMode);
    150a:	80 e2       	ldi	r24, 0x20	; 32
    150c:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <LCD_voidSendInitCommand>
    1510:	fe 01       	movw	r30, r28
    1512:	ef 5a       	subi	r30, 0xAF	; 175
    1514:	ff 4f       	sbci	r31, 0xFF	; 255
    1516:	80 e0       	ldi	r24, 0x00	; 0
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	a0 e8       	ldi	r26, 0x80	; 128
    151c:	bf e3       	ldi	r27, 0x3F	; 63
    151e:	80 83       	st	Z, r24
    1520:	91 83       	std	Z+1, r25	; 0x01
    1522:	a2 83       	std	Z+2, r26	; 0x02
    1524:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1526:	8e 01       	movw	r16, r28
    1528:	03 5b       	subi	r16, 0xB3	; 179
    152a:	1f 4f       	sbci	r17, 0xFF	; 255
    152c:	fe 01       	movw	r30, r28
    152e:	ef 5a       	subi	r30, 0xAF	; 175
    1530:	ff 4f       	sbci	r31, 0xFF	; 255
    1532:	60 81       	ld	r22, Z
    1534:	71 81       	ldd	r23, Z+1	; 0x01
    1536:	82 81       	ldd	r24, Z+2	; 0x02
    1538:	93 81       	ldd	r25, Z+3	; 0x03
    153a:	20 e0       	ldi	r18, 0x00	; 0
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	4a ef       	ldi	r20, 0xFA	; 250
    1540:	54 e4       	ldi	r21, 0x44	; 68
    1542:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1546:	dc 01       	movw	r26, r24
    1548:	cb 01       	movw	r24, r22
    154a:	f8 01       	movw	r30, r16
    154c:	80 83       	st	Z, r24
    154e:	91 83       	std	Z+1, r25	; 0x01
    1550:	a2 83       	std	Z+2, r26	; 0x02
    1552:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1554:	fe 01       	movw	r30, r28
    1556:	e3 5b       	subi	r30, 0xB3	; 179
    1558:	ff 4f       	sbci	r31, 0xFF	; 255
    155a:	60 81       	ld	r22, Z
    155c:	71 81       	ldd	r23, Z+1	; 0x01
    155e:	82 81       	ldd	r24, Z+2	; 0x02
    1560:	93 81       	ldd	r25, Z+3	; 0x03
    1562:	20 e0       	ldi	r18, 0x00	; 0
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	40 e8       	ldi	r20, 0x80	; 128
    1568:	5f e3       	ldi	r21, 0x3F	; 63
    156a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    156e:	88 23       	and	r24, r24
    1570:	44 f4       	brge	.+16     	; 0x1582 <LCD_voidInit+0x63c>
		__ticks = 1;
    1572:	fe 01       	movw	r30, r28
    1574:	e5 5b       	subi	r30, 0xB5	; 181
    1576:	ff 4f       	sbci	r31, 0xFF	; 255
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	91 83       	std	Z+1, r25	; 0x01
    157e:	80 83       	st	Z, r24
    1580:	64 c0       	rjmp	.+200    	; 0x164a <LCD_voidInit+0x704>
	else if (__tmp > 65535)
    1582:	fe 01       	movw	r30, r28
    1584:	e3 5b       	subi	r30, 0xB3	; 179
    1586:	ff 4f       	sbci	r31, 0xFF	; 255
    1588:	60 81       	ld	r22, Z
    158a:	71 81       	ldd	r23, Z+1	; 0x01
    158c:	82 81       	ldd	r24, Z+2	; 0x02
    158e:	93 81       	ldd	r25, Z+3	; 0x03
    1590:	20 e0       	ldi	r18, 0x00	; 0
    1592:	3f ef       	ldi	r19, 0xFF	; 255
    1594:	4f e7       	ldi	r20, 0x7F	; 127
    1596:	57 e4       	ldi	r21, 0x47	; 71
    1598:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    159c:	18 16       	cp	r1, r24
    159e:	0c f0       	brlt	.+2      	; 0x15a2 <LCD_voidInit+0x65c>
    15a0:	43 c0       	rjmp	.+134    	; 0x1628 <LCD_voidInit+0x6e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15a2:	fe 01       	movw	r30, r28
    15a4:	ef 5a       	subi	r30, 0xAF	; 175
    15a6:	ff 4f       	sbci	r31, 0xFF	; 255
    15a8:	60 81       	ld	r22, Z
    15aa:	71 81       	ldd	r23, Z+1	; 0x01
    15ac:	82 81       	ldd	r24, Z+2	; 0x02
    15ae:	93 81       	ldd	r25, Z+3	; 0x03
    15b0:	20 e0       	ldi	r18, 0x00	; 0
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	40 e2       	ldi	r20, 0x20	; 32
    15b6:	51 e4       	ldi	r21, 0x41	; 65
    15b8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15bc:	dc 01       	movw	r26, r24
    15be:	cb 01       	movw	r24, r22
    15c0:	8e 01       	movw	r16, r28
    15c2:	05 5b       	subi	r16, 0xB5	; 181
    15c4:	1f 4f       	sbci	r17, 0xFF	; 255
    15c6:	bc 01       	movw	r22, r24
    15c8:	cd 01       	movw	r24, r26
    15ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15ce:	dc 01       	movw	r26, r24
    15d0:	cb 01       	movw	r24, r22
    15d2:	f8 01       	movw	r30, r16
    15d4:	91 83       	std	Z+1, r25	; 0x01
    15d6:	80 83       	st	Z, r24
    15d8:	1f c0       	rjmp	.+62     	; 0x1618 <LCD_voidInit+0x6d2>
    15da:	fe 01       	movw	r30, r28
    15dc:	e7 5b       	subi	r30, 0xB7	; 183
    15de:	ff 4f       	sbci	r31, 0xFF	; 255
    15e0:	88 ec       	ldi	r24, 0xC8	; 200
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	91 83       	std	Z+1, r25	; 0x01
    15e6:	80 83       	st	Z, r24
    15e8:	fe 01       	movw	r30, r28
    15ea:	e7 5b       	subi	r30, 0xB7	; 183
    15ec:	ff 4f       	sbci	r31, 0xFF	; 255
    15ee:	80 81       	ld	r24, Z
    15f0:	91 81       	ldd	r25, Z+1	; 0x01
    15f2:	01 97       	sbiw	r24, 0x01	; 1
    15f4:	f1 f7       	brne	.-4      	; 0x15f2 <LCD_voidInit+0x6ac>
    15f6:	fe 01       	movw	r30, r28
    15f8:	e7 5b       	subi	r30, 0xB7	; 183
    15fa:	ff 4f       	sbci	r31, 0xFF	; 255
    15fc:	91 83       	std	Z+1, r25	; 0x01
    15fe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1600:	de 01       	movw	r26, r28
    1602:	a5 5b       	subi	r26, 0xB5	; 181
    1604:	bf 4f       	sbci	r27, 0xFF	; 255
    1606:	fe 01       	movw	r30, r28
    1608:	e5 5b       	subi	r30, 0xB5	; 181
    160a:	ff 4f       	sbci	r31, 0xFF	; 255
    160c:	80 81       	ld	r24, Z
    160e:	91 81       	ldd	r25, Z+1	; 0x01
    1610:	01 97       	sbiw	r24, 0x01	; 1
    1612:	11 96       	adiw	r26, 0x01	; 1
    1614:	9c 93       	st	X, r25
    1616:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1618:	fe 01       	movw	r30, r28
    161a:	e5 5b       	subi	r30, 0xB5	; 181
    161c:	ff 4f       	sbci	r31, 0xFF	; 255
    161e:	80 81       	ld	r24, Z
    1620:	91 81       	ldd	r25, Z+1	; 0x01
    1622:	00 97       	sbiw	r24, 0x00	; 0
    1624:	d1 f6       	brne	.-76     	; 0x15da <LCD_voidInit+0x694>
    1626:	27 c0       	rjmp	.+78     	; 0x1676 <LCD_voidInit+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1628:	8e 01       	movw	r16, r28
    162a:	05 5b       	subi	r16, 0xB5	; 181
    162c:	1f 4f       	sbci	r17, 0xFF	; 255
    162e:	fe 01       	movw	r30, r28
    1630:	e3 5b       	subi	r30, 0xB3	; 179
    1632:	ff 4f       	sbci	r31, 0xFF	; 255
    1634:	60 81       	ld	r22, Z
    1636:	71 81       	ldd	r23, Z+1	; 0x01
    1638:	82 81       	ldd	r24, Z+2	; 0x02
    163a:	93 81       	ldd	r25, Z+3	; 0x03
    163c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1640:	dc 01       	movw	r26, r24
    1642:	cb 01       	movw	r24, r22
    1644:	f8 01       	movw	r30, r16
    1646:	91 83       	std	Z+1, r25	; 0x01
    1648:	80 83       	st	Z, r24
    164a:	de 01       	movw	r26, r28
    164c:	a9 5b       	subi	r26, 0xB9	; 185
    164e:	bf 4f       	sbci	r27, 0xFF	; 255
    1650:	fe 01       	movw	r30, r28
    1652:	e5 5b       	subi	r30, 0xB5	; 181
    1654:	ff 4f       	sbci	r31, 0xFF	; 255
    1656:	80 81       	ld	r24, Z
    1658:	91 81       	ldd	r25, Z+1	; 0x01
    165a:	8d 93       	st	X+, r24
    165c:	9c 93       	st	X, r25
    165e:	fe 01       	movw	r30, r28
    1660:	e9 5b       	subi	r30, 0xB9	; 185
    1662:	ff 4f       	sbci	r31, 0xFF	; 255
    1664:	80 81       	ld	r24, Z
    1666:	91 81       	ldd	r25, Z+1	; 0x01
    1668:	01 97       	sbiw	r24, 0x01	; 1
    166a:	f1 f7       	brne	.-4      	; 0x1668 <LCD_voidInit+0x722>
    166c:	fe 01       	movw	r30, r28
    166e:	e9 5b       	subi	r30, 0xB9	; 185
    1670:	ff 4f       	sbci	r31, 0xFF	; 255
    1672:	91 83       	std	Z+1, r25	; 0x01
    1674:	80 83       	st	Z, r24
	_delay_ms(1);
#endif
	LCD_voidSendCommand(LCD_FunctionSet);
    1676:	88 e2       	ldi	r24, 0x28	; 40
    1678:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <LCD_voidSendCommand>
    167c:	fe 01       	movw	r30, r28
    167e:	ed 5b       	subi	r30, 0xBD	; 189
    1680:	ff 4f       	sbci	r31, 0xFF	; 255
    1682:	80 e0       	ldi	r24, 0x00	; 0
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	a0 e8       	ldi	r26, 0x80	; 128
    1688:	bf e3       	ldi	r27, 0x3F	; 63
    168a:	80 83       	st	Z, r24
    168c:	91 83       	std	Z+1, r25	; 0x01
    168e:	a2 83       	std	Z+2, r26	; 0x02
    1690:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1692:	8e 01       	movw	r16, r28
    1694:	01 5c       	subi	r16, 0xC1	; 193
    1696:	1f 4f       	sbci	r17, 0xFF	; 255
    1698:	fe 01       	movw	r30, r28
    169a:	ed 5b       	subi	r30, 0xBD	; 189
    169c:	ff 4f       	sbci	r31, 0xFF	; 255
    169e:	60 81       	ld	r22, Z
    16a0:	71 81       	ldd	r23, Z+1	; 0x01
    16a2:	82 81       	ldd	r24, Z+2	; 0x02
    16a4:	93 81       	ldd	r25, Z+3	; 0x03
    16a6:	20 e0       	ldi	r18, 0x00	; 0
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	4a ef       	ldi	r20, 0xFA	; 250
    16ac:	54 e4       	ldi	r21, 0x44	; 68
    16ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16b2:	dc 01       	movw	r26, r24
    16b4:	cb 01       	movw	r24, r22
    16b6:	f8 01       	movw	r30, r16
    16b8:	80 83       	st	Z, r24
    16ba:	91 83       	std	Z+1, r25	; 0x01
    16bc:	a2 83       	std	Z+2, r26	; 0x02
    16be:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16c0:	fe 01       	movw	r30, r28
    16c2:	ff 96       	adiw	r30, 0x3f	; 63
    16c4:	60 81       	ld	r22, Z
    16c6:	71 81       	ldd	r23, Z+1	; 0x01
    16c8:	82 81       	ldd	r24, Z+2	; 0x02
    16ca:	93 81       	ldd	r25, Z+3	; 0x03
    16cc:	20 e0       	ldi	r18, 0x00	; 0
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	40 e8       	ldi	r20, 0x80	; 128
    16d2:	5f e3       	ldi	r21, 0x3F	; 63
    16d4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    16d8:	88 23       	and	r24, r24
    16da:	2c f4       	brge	.+10     	; 0x16e6 <LCD_voidInit+0x7a0>
		__ticks = 1;
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	9e af       	std	Y+62, r25	; 0x3e
    16e2:	8d af       	std	Y+61, r24	; 0x3d
    16e4:	46 c0       	rjmp	.+140    	; 0x1772 <LCD_voidInit+0x82c>
	else if (__tmp > 65535)
    16e6:	fe 01       	movw	r30, r28
    16e8:	ff 96       	adiw	r30, 0x3f	; 63
    16ea:	60 81       	ld	r22, Z
    16ec:	71 81       	ldd	r23, Z+1	; 0x01
    16ee:	82 81       	ldd	r24, Z+2	; 0x02
    16f0:	93 81       	ldd	r25, Z+3	; 0x03
    16f2:	20 e0       	ldi	r18, 0x00	; 0
    16f4:	3f ef       	ldi	r19, 0xFF	; 255
    16f6:	4f e7       	ldi	r20, 0x7F	; 127
    16f8:	57 e4       	ldi	r21, 0x47	; 71
    16fa:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    16fe:	18 16       	cp	r1, r24
    1700:	64 f5       	brge	.+88     	; 0x175a <LCD_voidInit+0x814>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1702:	fe 01       	movw	r30, r28
    1704:	ed 5b       	subi	r30, 0xBD	; 189
    1706:	ff 4f       	sbci	r31, 0xFF	; 255
    1708:	60 81       	ld	r22, Z
    170a:	71 81       	ldd	r23, Z+1	; 0x01
    170c:	82 81       	ldd	r24, Z+2	; 0x02
    170e:	93 81       	ldd	r25, Z+3	; 0x03
    1710:	20 e0       	ldi	r18, 0x00	; 0
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	40 e2       	ldi	r20, 0x20	; 32
    1716:	51 e4       	ldi	r21, 0x41	; 65
    1718:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    171c:	dc 01       	movw	r26, r24
    171e:	cb 01       	movw	r24, r22
    1720:	bc 01       	movw	r22, r24
    1722:	cd 01       	movw	r24, r26
    1724:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1728:	dc 01       	movw	r26, r24
    172a:	cb 01       	movw	r24, r22
    172c:	9e af       	std	Y+62, r25	; 0x3e
    172e:	8d af       	std	Y+61, r24	; 0x3d
    1730:	0f c0       	rjmp	.+30     	; 0x1750 <LCD_voidInit+0x80a>
    1732:	88 ec       	ldi	r24, 0xC8	; 200
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	9c af       	std	Y+60, r25	; 0x3c
    1738:	8b af       	std	Y+59, r24	; 0x3b
    173a:	8b ad       	ldd	r24, Y+59	; 0x3b
    173c:	9c ad       	ldd	r25, Y+60	; 0x3c
    173e:	01 97       	sbiw	r24, 0x01	; 1
    1740:	f1 f7       	brne	.-4      	; 0x173e <LCD_voidInit+0x7f8>
    1742:	9c af       	std	Y+60, r25	; 0x3c
    1744:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1746:	8d ad       	ldd	r24, Y+61	; 0x3d
    1748:	9e ad       	ldd	r25, Y+62	; 0x3e
    174a:	01 97       	sbiw	r24, 0x01	; 1
    174c:	9e af       	std	Y+62, r25	; 0x3e
    174e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1750:	8d ad       	ldd	r24, Y+61	; 0x3d
    1752:	9e ad       	ldd	r25, Y+62	; 0x3e
    1754:	00 97       	sbiw	r24, 0x00	; 0
    1756:	69 f7       	brne	.-38     	; 0x1732 <LCD_voidInit+0x7ec>
    1758:	16 c0       	rjmp	.+44     	; 0x1786 <LCD_voidInit+0x840>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    175a:	fe 01       	movw	r30, r28
    175c:	ff 96       	adiw	r30, 0x3f	; 63
    175e:	60 81       	ld	r22, Z
    1760:	71 81       	ldd	r23, Z+1	; 0x01
    1762:	82 81       	ldd	r24, Z+2	; 0x02
    1764:	93 81       	ldd	r25, Z+3	; 0x03
    1766:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    176a:	dc 01       	movw	r26, r24
    176c:	cb 01       	movw	r24, r22
    176e:	9e af       	std	Y+62, r25	; 0x3e
    1770:	8d af       	std	Y+61, r24	; 0x3d
    1772:	8d ad       	ldd	r24, Y+61	; 0x3d
    1774:	9e ad       	ldd	r25, Y+62	; 0x3e
    1776:	9a af       	std	Y+58, r25	; 0x3a
    1778:	89 af       	std	Y+57, r24	; 0x39
    177a:	89 ad       	ldd	r24, Y+57	; 0x39
    177c:	9a ad       	ldd	r25, Y+58	; 0x3a
    177e:	01 97       	sbiw	r24, 0x01	; 1
    1780:	f1 f7       	brne	.-4      	; 0x177e <LCD_voidInit+0x838>
    1782:	9a af       	std	Y+58, r25	; 0x3a
    1784:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	LCD_voidSendCommand(LCD_DisplayOFF);
    1786:	88 e0       	ldi	r24, 0x08	; 8
    1788:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <LCD_voidSendCommand>
    178c:	80 e0       	ldi	r24, 0x00	; 0
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	a0 e8       	ldi	r26, 0x80	; 128
    1792:	bf e3       	ldi	r27, 0x3F	; 63
    1794:	8d ab       	std	Y+53, r24	; 0x35
    1796:	9e ab       	std	Y+54, r25	; 0x36
    1798:	af ab       	std	Y+55, r26	; 0x37
    179a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    179c:	6d a9       	ldd	r22, Y+53	; 0x35
    179e:	7e a9       	ldd	r23, Y+54	; 0x36
    17a0:	8f a9       	ldd	r24, Y+55	; 0x37
    17a2:	98 ad       	ldd	r25, Y+56	; 0x38
    17a4:	20 e0       	ldi	r18, 0x00	; 0
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	4a ef       	ldi	r20, 0xFA	; 250
    17aa:	54 e4       	ldi	r21, 0x44	; 68
    17ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17b0:	dc 01       	movw	r26, r24
    17b2:	cb 01       	movw	r24, r22
    17b4:	89 ab       	std	Y+49, r24	; 0x31
    17b6:	9a ab       	std	Y+50, r25	; 0x32
    17b8:	ab ab       	std	Y+51, r26	; 0x33
    17ba:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    17bc:	69 a9       	ldd	r22, Y+49	; 0x31
    17be:	7a a9       	ldd	r23, Y+50	; 0x32
    17c0:	8b a9       	ldd	r24, Y+51	; 0x33
    17c2:	9c a9       	ldd	r25, Y+52	; 0x34
    17c4:	20 e0       	ldi	r18, 0x00	; 0
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	40 e8       	ldi	r20, 0x80	; 128
    17ca:	5f e3       	ldi	r21, 0x3F	; 63
    17cc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    17d0:	88 23       	and	r24, r24
    17d2:	2c f4       	brge	.+10     	; 0x17de <LCD_voidInit+0x898>
		__ticks = 1;
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	98 ab       	std	Y+48, r25	; 0x30
    17da:	8f a7       	std	Y+47, r24	; 0x2f
    17dc:	3f c0       	rjmp	.+126    	; 0x185c <LCD_voidInit+0x916>
	else if (__tmp > 65535)
    17de:	69 a9       	ldd	r22, Y+49	; 0x31
    17e0:	7a a9       	ldd	r23, Y+50	; 0x32
    17e2:	8b a9       	ldd	r24, Y+51	; 0x33
    17e4:	9c a9       	ldd	r25, Y+52	; 0x34
    17e6:	20 e0       	ldi	r18, 0x00	; 0
    17e8:	3f ef       	ldi	r19, 0xFF	; 255
    17ea:	4f e7       	ldi	r20, 0x7F	; 127
    17ec:	57 e4       	ldi	r21, 0x47	; 71
    17ee:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    17f2:	18 16       	cp	r1, r24
    17f4:	4c f5       	brge	.+82     	; 0x1848 <LCD_voidInit+0x902>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17f6:	6d a9       	ldd	r22, Y+53	; 0x35
    17f8:	7e a9       	ldd	r23, Y+54	; 0x36
    17fa:	8f a9       	ldd	r24, Y+55	; 0x37
    17fc:	98 ad       	ldd	r25, Y+56	; 0x38
    17fe:	20 e0       	ldi	r18, 0x00	; 0
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	40 e2       	ldi	r20, 0x20	; 32
    1804:	51 e4       	ldi	r21, 0x41	; 65
    1806:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    180a:	dc 01       	movw	r26, r24
    180c:	cb 01       	movw	r24, r22
    180e:	bc 01       	movw	r22, r24
    1810:	cd 01       	movw	r24, r26
    1812:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1816:	dc 01       	movw	r26, r24
    1818:	cb 01       	movw	r24, r22
    181a:	98 ab       	std	Y+48, r25	; 0x30
    181c:	8f a7       	std	Y+47, r24	; 0x2f
    181e:	0f c0       	rjmp	.+30     	; 0x183e <LCD_voidInit+0x8f8>
    1820:	88 ec       	ldi	r24, 0xC8	; 200
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	9e a7       	std	Y+46, r25	; 0x2e
    1826:	8d a7       	std	Y+45, r24	; 0x2d
    1828:	8d a5       	ldd	r24, Y+45	; 0x2d
    182a:	9e a5       	ldd	r25, Y+46	; 0x2e
    182c:	01 97       	sbiw	r24, 0x01	; 1
    182e:	f1 f7       	brne	.-4      	; 0x182c <LCD_voidInit+0x8e6>
    1830:	9e a7       	std	Y+46, r25	; 0x2e
    1832:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1834:	8f a5       	ldd	r24, Y+47	; 0x2f
    1836:	98 a9       	ldd	r25, Y+48	; 0x30
    1838:	01 97       	sbiw	r24, 0x01	; 1
    183a:	98 ab       	std	Y+48, r25	; 0x30
    183c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    183e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1840:	98 a9       	ldd	r25, Y+48	; 0x30
    1842:	00 97       	sbiw	r24, 0x00	; 0
    1844:	69 f7       	brne	.-38     	; 0x1820 <LCD_voidInit+0x8da>
    1846:	14 c0       	rjmp	.+40     	; 0x1870 <LCD_voidInit+0x92a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1848:	69 a9       	ldd	r22, Y+49	; 0x31
    184a:	7a a9       	ldd	r23, Y+50	; 0x32
    184c:	8b a9       	ldd	r24, Y+51	; 0x33
    184e:	9c a9       	ldd	r25, Y+52	; 0x34
    1850:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1854:	dc 01       	movw	r26, r24
    1856:	cb 01       	movw	r24, r22
    1858:	98 ab       	std	Y+48, r25	; 0x30
    185a:	8f a7       	std	Y+47, r24	; 0x2f
    185c:	8f a5       	ldd	r24, Y+47	; 0x2f
    185e:	98 a9       	ldd	r25, Y+48	; 0x30
    1860:	9c a7       	std	Y+44, r25	; 0x2c
    1862:	8b a7       	std	Y+43, r24	; 0x2b
    1864:	8b a5       	ldd	r24, Y+43	; 0x2b
    1866:	9c a5       	ldd	r25, Y+44	; 0x2c
    1868:	01 97       	sbiw	r24, 0x01	; 1
    186a:	f1 f7       	brne	.-4      	; 0x1868 <LCD_voidInit+0x922>
    186c:	9c a7       	std	Y+44, r25	; 0x2c
    186e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_voidSendCommand(LCD_ClearDisplay);
    1870:	81 e0       	ldi	r24, 0x01	; 1
    1872:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <LCD_voidSendCommand>
    1876:	80 e0       	ldi	r24, 0x00	; 0
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	a0 ea       	ldi	r26, 0xA0	; 160
    187c:	b0 e4       	ldi	r27, 0x40	; 64
    187e:	8f a3       	std	Y+39, r24	; 0x27
    1880:	98 a7       	std	Y+40, r25	; 0x28
    1882:	a9 a7       	std	Y+41, r26	; 0x29
    1884:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1886:	6f a1       	ldd	r22, Y+39	; 0x27
    1888:	78 a5       	ldd	r23, Y+40	; 0x28
    188a:	89 a5       	ldd	r24, Y+41	; 0x29
    188c:	9a a5       	ldd	r25, Y+42	; 0x2a
    188e:	20 e0       	ldi	r18, 0x00	; 0
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	4a ef       	ldi	r20, 0xFA	; 250
    1894:	54 e4       	ldi	r21, 0x44	; 68
    1896:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    189a:	dc 01       	movw	r26, r24
    189c:	cb 01       	movw	r24, r22
    189e:	8b a3       	std	Y+35, r24	; 0x23
    18a0:	9c a3       	std	Y+36, r25	; 0x24
    18a2:	ad a3       	std	Y+37, r26	; 0x25
    18a4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    18a6:	6b a1       	ldd	r22, Y+35	; 0x23
    18a8:	7c a1       	ldd	r23, Y+36	; 0x24
    18aa:	8d a1       	ldd	r24, Y+37	; 0x25
    18ac:	9e a1       	ldd	r25, Y+38	; 0x26
    18ae:	20 e0       	ldi	r18, 0x00	; 0
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	40 e8       	ldi	r20, 0x80	; 128
    18b4:	5f e3       	ldi	r21, 0x3F	; 63
    18b6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    18ba:	88 23       	and	r24, r24
    18bc:	2c f4       	brge	.+10     	; 0x18c8 <LCD_voidInit+0x982>
		__ticks = 1;
    18be:	81 e0       	ldi	r24, 0x01	; 1
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	9a a3       	std	Y+34, r25	; 0x22
    18c4:	89 a3       	std	Y+33, r24	; 0x21
    18c6:	3f c0       	rjmp	.+126    	; 0x1946 <LCD_voidInit+0xa00>
	else if (__tmp > 65535)
    18c8:	6b a1       	ldd	r22, Y+35	; 0x23
    18ca:	7c a1       	ldd	r23, Y+36	; 0x24
    18cc:	8d a1       	ldd	r24, Y+37	; 0x25
    18ce:	9e a1       	ldd	r25, Y+38	; 0x26
    18d0:	20 e0       	ldi	r18, 0x00	; 0
    18d2:	3f ef       	ldi	r19, 0xFF	; 255
    18d4:	4f e7       	ldi	r20, 0x7F	; 127
    18d6:	57 e4       	ldi	r21, 0x47	; 71
    18d8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    18dc:	18 16       	cp	r1, r24
    18de:	4c f5       	brge	.+82     	; 0x1932 <LCD_voidInit+0x9ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18e0:	6f a1       	ldd	r22, Y+39	; 0x27
    18e2:	78 a5       	ldd	r23, Y+40	; 0x28
    18e4:	89 a5       	ldd	r24, Y+41	; 0x29
    18e6:	9a a5       	ldd	r25, Y+42	; 0x2a
    18e8:	20 e0       	ldi	r18, 0x00	; 0
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	40 e2       	ldi	r20, 0x20	; 32
    18ee:	51 e4       	ldi	r21, 0x41	; 65
    18f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18f4:	dc 01       	movw	r26, r24
    18f6:	cb 01       	movw	r24, r22
    18f8:	bc 01       	movw	r22, r24
    18fa:	cd 01       	movw	r24, r26
    18fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1900:	dc 01       	movw	r26, r24
    1902:	cb 01       	movw	r24, r22
    1904:	9a a3       	std	Y+34, r25	; 0x22
    1906:	89 a3       	std	Y+33, r24	; 0x21
    1908:	0f c0       	rjmp	.+30     	; 0x1928 <LCD_voidInit+0x9e2>
    190a:	88 ec       	ldi	r24, 0xC8	; 200
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	98 a3       	std	Y+32, r25	; 0x20
    1910:	8f 8f       	std	Y+31, r24	; 0x1f
    1912:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1914:	98 a1       	ldd	r25, Y+32	; 0x20
    1916:	01 97       	sbiw	r24, 0x01	; 1
    1918:	f1 f7       	brne	.-4      	; 0x1916 <LCD_voidInit+0x9d0>
    191a:	98 a3       	std	Y+32, r25	; 0x20
    191c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    191e:	89 a1       	ldd	r24, Y+33	; 0x21
    1920:	9a a1       	ldd	r25, Y+34	; 0x22
    1922:	01 97       	sbiw	r24, 0x01	; 1
    1924:	9a a3       	std	Y+34, r25	; 0x22
    1926:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1928:	89 a1       	ldd	r24, Y+33	; 0x21
    192a:	9a a1       	ldd	r25, Y+34	; 0x22
    192c:	00 97       	sbiw	r24, 0x00	; 0
    192e:	69 f7       	brne	.-38     	; 0x190a <LCD_voidInit+0x9c4>
    1930:	14 c0       	rjmp	.+40     	; 0x195a <LCD_voidInit+0xa14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1932:	6b a1       	ldd	r22, Y+35	; 0x23
    1934:	7c a1       	ldd	r23, Y+36	; 0x24
    1936:	8d a1       	ldd	r24, Y+37	; 0x25
    1938:	9e a1       	ldd	r25, Y+38	; 0x26
    193a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    193e:	dc 01       	movw	r26, r24
    1940:	cb 01       	movw	r24, r22
    1942:	9a a3       	std	Y+34, r25	; 0x22
    1944:	89 a3       	std	Y+33, r24	; 0x21
    1946:	89 a1       	ldd	r24, Y+33	; 0x21
    1948:	9a a1       	ldd	r25, Y+34	; 0x22
    194a:	9e 8f       	std	Y+30, r25	; 0x1e
    194c:	8d 8f       	std	Y+29, r24	; 0x1d
    194e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1950:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1952:	01 97       	sbiw	r24, 0x01	; 1
    1954:	f1 f7       	brne	.-4      	; 0x1952 <LCD_voidInit+0xa0c>
    1956:	9e 8f       	std	Y+30, r25	; 0x1e
    1958:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);
	LCD_voidSendCommand(LCD_DisplayON);
    195a:	8c e0       	ldi	r24, 0x0C	; 12
    195c:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <LCD_voidSendCommand>
    1960:	80 e0       	ldi	r24, 0x00	; 0
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	a0 e8       	ldi	r26, 0x80	; 128
    1966:	bf e3       	ldi	r27, 0x3F	; 63
    1968:	89 8f       	std	Y+25, r24	; 0x19
    196a:	9a 8f       	std	Y+26, r25	; 0x1a
    196c:	ab 8f       	std	Y+27, r26	; 0x1b
    196e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1970:	69 8d       	ldd	r22, Y+25	; 0x19
    1972:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1974:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1976:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1978:	20 e0       	ldi	r18, 0x00	; 0
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	4a ef       	ldi	r20, 0xFA	; 250
    197e:	54 e4       	ldi	r21, 0x44	; 68
    1980:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1984:	dc 01       	movw	r26, r24
    1986:	cb 01       	movw	r24, r22
    1988:	8d 8b       	std	Y+21, r24	; 0x15
    198a:	9e 8b       	std	Y+22, r25	; 0x16
    198c:	af 8b       	std	Y+23, r26	; 0x17
    198e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1990:	6d 89       	ldd	r22, Y+21	; 0x15
    1992:	7e 89       	ldd	r23, Y+22	; 0x16
    1994:	8f 89       	ldd	r24, Y+23	; 0x17
    1996:	98 8d       	ldd	r25, Y+24	; 0x18
    1998:	20 e0       	ldi	r18, 0x00	; 0
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	40 e8       	ldi	r20, 0x80	; 128
    199e:	5f e3       	ldi	r21, 0x3F	; 63
    19a0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    19a4:	88 23       	and	r24, r24
    19a6:	2c f4       	brge	.+10     	; 0x19b2 <LCD_voidInit+0xa6c>
		__ticks = 1;
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	9c 8b       	std	Y+20, r25	; 0x14
    19ae:	8b 8b       	std	Y+19, r24	; 0x13
    19b0:	3f c0       	rjmp	.+126    	; 0x1a30 <LCD_voidInit+0xaea>
	else if (__tmp > 65535)
    19b2:	6d 89       	ldd	r22, Y+21	; 0x15
    19b4:	7e 89       	ldd	r23, Y+22	; 0x16
    19b6:	8f 89       	ldd	r24, Y+23	; 0x17
    19b8:	98 8d       	ldd	r25, Y+24	; 0x18
    19ba:	20 e0       	ldi	r18, 0x00	; 0
    19bc:	3f ef       	ldi	r19, 0xFF	; 255
    19be:	4f e7       	ldi	r20, 0x7F	; 127
    19c0:	57 e4       	ldi	r21, 0x47	; 71
    19c2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    19c6:	18 16       	cp	r1, r24
    19c8:	4c f5       	brge	.+82     	; 0x1a1c <LCD_voidInit+0xad6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ca:	69 8d       	ldd	r22, Y+25	; 0x19
    19cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19d2:	20 e0       	ldi	r18, 0x00	; 0
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	40 e2       	ldi	r20, 0x20	; 32
    19d8:	51 e4       	ldi	r21, 0x41	; 65
    19da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19de:	dc 01       	movw	r26, r24
    19e0:	cb 01       	movw	r24, r22
    19e2:	bc 01       	movw	r22, r24
    19e4:	cd 01       	movw	r24, r26
    19e6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19ea:	dc 01       	movw	r26, r24
    19ec:	cb 01       	movw	r24, r22
    19ee:	9c 8b       	std	Y+20, r25	; 0x14
    19f0:	8b 8b       	std	Y+19, r24	; 0x13
    19f2:	0f c0       	rjmp	.+30     	; 0x1a12 <LCD_voidInit+0xacc>
    19f4:	88 ec       	ldi	r24, 0xC8	; 200
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	9a 8b       	std	Y+18, r25	; 0x12
    19fa:	89 8b       	std	Y+17, r24	; 0x11
    19fc:	89 89       	ldd	r24, Y+17	; 0x11
    19fe:	9a 89       	ldd	r25, Y+18	; 0x12
    1a00:	01 97       	sbiw	r24, 0x01	; 1
    1a02:	f1 f7       	brne	.-4      	; 0x1a00 <LCD_voidInit+0xaba>
    1a04:	9a 8b       	std	Y+18, r25	; 0x12
    1a06:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a08:	8b 89       	ldd	r24, Y+19	; 0x13
    1a0a:	9c 89       	ldd	r25, Y+20	; 0x14
    1a0c:	01 97       	sbiw	r24, 0x01	; 1
    1a0e:	9c 8b       	std	Y+20, r25	; 0x14
    1a10:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a12:	8b 89       	ldd	r24, Y+19	; 0x13
    1a14:	9c 89       	ldd	r25, Y+20	; 0x14
    1a16:	00 97       	sbiw	r24, 0x00	; 0
    1a18:	69 f7       	brne	.-38     	; 0x19f4 <LCD_voidInit+0xaae>
    1a1a:	14 c0       	rjmp	.+40     	; 0x1a44 <LCD_voidInit+0xafe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a1c:	6d 89       	ldd	r22, Y+21	; 0x15
    1a1e:	7e 89       	ldd	r23, Y+22	; 0x16
    1a20:	8f 89       	ldd	r24, Y+23	; 0x17
    1a22:	98 8d       	ldd	r25, Y+24	; 0x18
    1a24:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a28:	dc 01       	movw	r26, r24
    1a2a:	cb 01       	movw	r24, r22
    1a2c:	9c 8b       	std	Y+20, r25	; 0x14
    1a2e:	8b 8b       	std	Y+19, r24	; 0x13
    1a30:	8b 89       	ldd	r24, Y+19	; 0x13
    1a32:	9c 89       	ldd	r25, Y+20	; 0x14
    1a34:	98 8b       	std	Y+16, r25	; 0x10
    1a36:	8f 87       	std	Y+15, r24	; 0x0f
    1a38:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a3a:	98 89       	ldd	r25, Y+16	; 0x10
    1a3c:	01 97       	sbiw	r24, 0x01	; 1
    1a3e:	f1 f7       	brne	.-4      	; 0x1a3c <LCD_voidInit+0xaf6>
    1a40:	98 8b       	std	Y+16, r25	; 0x10
    1a42:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_voidSendCommand(LCD_EntryMode);
    1a44:	86 e0       	ldi	r24, 0x06	; 6
    1a46:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <LCD_voidSendCommand>
    1a4a:	80 e0       	ldi	r24, 0x00	; 0
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	a0 e8       	ldi	r26, 0x80	; 128
    1a50:	bf e3       	ldi	r27, 0x3F	; 63
    1a52:	8b 87       	std	Y+11, r24	; 0x0b
    1a54:	9c 87       	std	Y+12, r25	; 0x0c
    1a56:	ad 87       	std	Y+13, r26	; 0x0d
    1a58:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a60:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a62:	20 e0       	ldi	r18, 0x00	; 0
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	4a ef       	ldi	r20, 0xFA	; 250
    1a68:	54 e4       	ldi	r21, 0x44	; 68
    1a6a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a6e:	dc 01       	movw	r26, r24
    1a70:	cb 01       	movw	r24, r22
    1a72:	8f 83       	std	Y+7, r24	; 0x07
    1a74:	98 87       	std	Y+8, r25	; 0x08
    1a76:	a9 87       	std	Y+9, r26	; 0x09
    1a78:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a7a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a7c:	78 85       	ldd	r23, Y+8	; 0x08
    1a7e:	89 85       	ldd	r24, Y+9	; 0x09
    1a80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a82:	20 e0       	ldi	r18, 0x00	; 0
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	40 e8       	ldi	r20, 0x80	; 128
    1a88:	5f e3       	ldi	r21, 0x3F	; 63
    1a8a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a8e:	88 23       	and	r24, r24
    1a90:	2c f4       	brge	.+10     	; 0x1a9c <LCD_voidInit+0xb56>
		__ticks = 1;
    1a92:	81 e0       	ldi	r24, 0x01	; 1
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	9e 83       	std	Y+6, r25	; 0x06
    1a98:	8d 83       	std	Y+5, r24	; 0x05
    1a9a:	3f c0       	rjmp	.+126    	; 0x1b1a <LCD_voidInit+0xbd4>
	else if (__tmp > 65535)
    1a9c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a9e:	78 85       	ldd	r23, Y+8	; 0x08
    1aa0:	89 85       	ldd	r24, Y+9	; 0x09
    1aa2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa4:	20 e0       	ldi	r18, 0x00	; 0
    1aa6:	3f ef       	ldi	r19, 0xFF	; 255
    1aa8:	4f e7       	ldi	r20, 0x7F	; 127
    1aaa:	57 e4       	ldi	r21, 0x47	; 71
    1aac:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ab0:	18 16       	cp	r1, r24
    1ab2:	4c f5       	brge	.+82     	; 0x1b06 <LCD_voidInit+0xbc0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ab4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ab6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ab8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aba:	9e 85       	ldd	r25, Y+14	; 0x0e
    1abc:	20 e0       	ldi	r18, 0x00	; 0
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	40 e2       	ldi	r20, 0x20	; 32
    1ac2:	51 e4       	ldi	r21, 0x41	; 65
    1ac4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ac8:	dc 01       	movw	r26, r24
    1aca:	cb 01       	movw	r24, r22
    1acc:	bc 01       	movw	r22, r24
    1ace:	cd 01       	movw	r24, r26
    1ad0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ad4:	dc 01       	movw	r26, r24
    1ad6:	cb 01       	movw	r24, r22
    1ad8:	9e 83       	std	Y+6, r25	; 0x06
    1ada:	8d 83       	std	Y+5, r24	; 0x05
    1adc:	0f c0       	rjmp	.+30     	; 0x1afc <LCD_voidInit+0xbb6>
    1ade:	88 ec       	ldi	r24, 0xC8	; 200
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	9c 83       	std	Y+4, r25	; 0x04
    1ae4:	8b 83       	std	Y+3, r24	; 0x03
    1ae6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aea:	01 97       	sbiw	r24, 0x01	; 1
    1aec:	f1 f7       	brne	.-4      	; 0x1aea <LCD_voidInit+0xba4>
    1aee:	9c 83       	std	Y+4, r25	; 0x04
    1af0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1af2:	8d 81       	ldd	r24, Y+5	; 0x05
    1af4:	9e 81       	ldd	r25, Y+6	; 0x06
    1af6:	01 97       	sbiw	r24, 0x01	; 1
    1af8:	9e 83       	std	Y+6, r25	; 0x06
    1afa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1afc:	8d 81       	ldd	r24, Y+5	; 0x05
    1afe:	9e 81       	ldd	r25, Y+6	; 0x06
    1b00:	00 97       	sbiw	r24, 0x00	; 0
    1b02:	69 f7       	brne	.-38     	; 0x1ade <LCD_voidInit+0xb98>
    1b04:	14 c0       	rjmp	.+40     	; 0x1b2e <LCD_voidInit+0xbe8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b06:	6f 81       	ldd	r22, Y+7	; 0x07
    1b08:	78 85       	ldd	r23, Y+8	; 0x08
    1b0a:	89 85       	ldd	r24, Y+9	; 0x09
    1b0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b0e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b12:	dc 01       	movw	r26, r24
    1b14:	cb 01       	movw	r24, r22
    1b16:	9e 83       	std	Y+6, r25	; 0x06
    1b18:	8d 83       	std	Y+5, r24	; 0x05
    1b1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b1e:	9a 83       	std	Y+2, r25	; 0x02
    1b20:	89 83       	std	Y+1, r24	; 0x01
    1b22:	89 81       	ldd	r24, Y+1	; 0x01
    1b24:	9a 81       	ldd	r25, Y+2	; 0x02
    1b26:	01 97       	sbiw	r24, 0x01	; 1
    1b28:	f1 f7       	brne	.-4      	; 0x1b26 <LCD_voidInit+0xbe0>
    1b2a:	9a 83       	std	Y+2, r25	; 0x02
    1b2c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1b2e:	c4 57       	subi	r28, 0x74	; 116
    1b30:	df 4f       	sbci	r29, 0xFF	; 255
    1b32:	0f b6       	in	r0, 0x3f	; 63
    1b34:	f8 94       	cli
    1b36:	de bf       	out	0x3e, r29	; 62
    1b38:	0f be       	out	0x3f, r0	; 63
    1b3a:	cd bf       	out	0x3d, r28	; 61
    1b3c:	cf 91       	pop	r28
    1b3e:	df 91       	pop	r29
    1b40:	1f 91       	pop	r17
    1b42:	0f 91       	pop	r16
    1b44:	08 95       	ret

00001b46 <LCD_voidSendCommand>:

void LCD_voidSendCommand(u8 command){
    1b46:	df 93       	push	r29
    1b48:	cf 93       	push	r28
    1b4a:	cd b7       	in	r28, 0x3d	; 61
    1b4c:	de b7       	in	r29, 0x3e	; 62
    1b4e:	2f 97       	sbiw	r28, 0x0f	; 15
    1b50:	0f b6       	in	r0, 0x3f	; 63
    1b52:	f8 94       	cli
    1b54:	de bf       	out	0x3e, r29	; 62
    1b56:	0f be       	out	0x3f, r0	; 63
    1b58:	cd bf       	out	0x3d, r28	; 61
    1b5a:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_u8SetPinValue(LCD_CONTROL_PORT,LCD_RS, DIO_u8PIN_LOW); //RS = 0
    1b5c:	80 e0       	ldi	r24, 0x00	; 0
    1b5e:	63 e0       	ldi	r22, 0x03	; 3
    1b60:	40 e0       	ldi	r20, 0x00	; 0
    1b62:	0e 94 be 05 	call	0xb7c	; 0xb7c <DIO_u8SetPinValue>

	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_HIGH); //EN = 1
    1b66:	80 e0       	ldi	r24, 0x00	; 0
    1b68:	62 e0       	ldi	r22, 0x02	; 2
    1b6a:	41 e0       	ldi	r20, 0x01	; 1
    1b6c:	0e 94 be 05 	call	0xb7c	; 0xb7c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D0, Get_Bit(command, 0));
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D1, Get_Bit(command, 1));
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D2, Get_Bit(command, 2));
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D3, Get_Bit(command, 3));
#endif
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D4, Get_Bit(command, 4));
    1b70:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b72:	82 95       	swap	r24
    1b74:	8f 70       	andi	r24, 0x0F	; 15
    1b76:	98 2f       	mov	r25, r24
    1b78:	91 70       	andi	r25, 0x01	; 1
    1b7a:	81 e0       	ldi	r24, 0x01	; 1
    1b7c:	60 e0       	ldi	r22, 0x00	; 0
    1b7e:	49 2f       	mov	r20, r25
    1b80:	0e 94 be 05 	call	0xb7c	; 0xb7c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D5, Get_Bit(command, 5));
    1b84:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b86:	82 95       	swap	r24
    1b88:	86 95       	lsr	r24
    1b8a:	87 70       	andi	r24, 0x07	; 7
    1b8c:	98 2f       	mov	r25, r24
    1b8e:	91 70       	andi	r25, 0x01	; 1
    1b90:	81 e0       	ldi	r24, 0x01	; 1
    1b92:	61 e0       	ldi	r22, 0x01	; 1
    1b94:	49 2f       	mov	r20, r25
    1b96:	0e 94 be 05 	call	0xb7c	; 0xb7c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D6, Get_Bit(command, 6));
    1b9a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b9c:	82 95       	swap	r24
    1b9e:	86 95       	lsr	r24
    1ba0:	86 95       	lsr	r24
    1ba2:	83 70       	andi	r24, 0x03	; 3
    1ba4:	98 2f       	mov	r25, r24
    1ba6:	91 70       	andi	r25, 0x01	; 1
    1ba8:	81 e0       	ldi	r24, 0x01	; 1
    1baa:	62 e0       	ldi	r22, 0x02	; 2
    1bac:	49 2f       	mov	r20, r25
    1bae:	0e 94 be 05 	call	0xb7c	; 0xb7c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D7, Get_Bit(command, 7));
    1bb2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bb4:	98 2f       	mov	r25, r24
    1bb6:	99 1f       	adc	r25, r25
    1bb8:	99 27       	eor	r25, r25
    1bba:	99 1f       	adc	r25, r25
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    1bbe:	64 e0       	ldi	r22, 0x04	; 4
    1bc0:	49 2f       	mov	r20, r25
    1bc2:	0e 94 be 05 	call	0xb7c	; 0xb7c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_LOW); //EN = 0
    1bc6:	80 e0       	ldi	r24, 0x00	; 0
    1bc8:	62 e0       	ldi	r22, 0x02	; 2
    1bca:	40 e0       	ldi	r20, 0x00	; 0
    1bcc:	0e 94 be 05 	call	0xb7c	; 0xb7c <DIO_u8SetPinValue>

#if LCD_BITS == LCD_4_BIT_MODE
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_HIGH); //EN = 1
    1bd0:	80 e0       	ldi	r24, 0x00	; 0
    1bd2:	62 e0       	ldi	r22, 0x02	; 2
    1bd4:	41 e0       	ldi	r20, 0x01	; 1
    1bd6:	0e 94 be 05 	call	0xb7c	; 0xb7c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D4, Get_Bit(command, 0));
    1bda:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bdc:	98 2f       	mov	r25, r24
    1bde:	91 70       	andi	r25, 0x01	; 1
    1be0:	81 e0       	ldi	r24, 0x01	; 1
    1be2:	60 e0       	ldi	r22, 0x00	; 0
    1be4:	49 2f       	mov	r20, r25
    1be6:	0e 94 be 05 	call	0xb7c	; 0xb7c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D5, Get_Bit(command, 1));
    1bea:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bec:	86 95       	lsr	r24
    1bee:	98 2f       	mov	r25, r24
    1bf0:	91 70       	andi	r25, 0x01	; 1
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	61 e0       	ldi	r22, 0x01	; 1
    1bf6:	49 2f       	mov	r20, r25
    1bf8:	0e 94 be 05 	call	0xb7c	; 0xb7c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D6, Get_Bit(command, 2));
    1bfc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bfe:	86 95       	lsr	r24
    1c00:	86 95       	lsr	r24
    1c02:	98 2f       	mov	r25, r24
    1c04:	91 70       	andi	r25, 0x01	; 1
    1c06:	81 e0       	ldi	r24, 0x01	; 1
    1c08:	62 e0       	ldi	r22, 0x02	; 2
    1c0a:	49 2f       	mov	r20, r25
    1c0c:	0e 94 be 05 	call	0xb7c	; 0xb7c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D7, Get_Bit(command, 3));
    1c10:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c12:	86 95       	lsr	r24
    1c14:	86 95       	lsr	r24
    1c16:	86 95       	lsr	r24
    1c18:	98 2f       	mov	r25, r24
    1c1a:	91 70       	andi	r25, 0x01	; 1
    1c1c:	81 e0       	ldi	r24, 0x01	; 1
    1c1e:	64 e0       	ldi	r22, 0x04	; 4
    1c20:	49 2f       	mov	r20, r25
    1c22:	0e 94 be 05 	call	0xb7c	; 0xb7c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_LOW); //EN = 0
    1c26:	80 e0       	ldi	r24, 0x00	; 0
    1c28:	62 e0       	ldi	r22, 0x02	; 2
    1c2a:	40 e0       	ldi	r20, 0x00	; 0
    1c2c:	0e 94 be 05 	call	0xb7c	; 0xb7c <DIO_u8SetPinValue>
    1c30:	80 e0       	ldi	r24, 0x00	; 0
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	a0 ea       	ldi	r26, 0xA0	; 160
    1c36:	b0 e4       	ldi	r27, 0x40	; 64
    1c38:	8b 87       	std	Y+11, r24	; 0x0b
    1c3a:	9c 87       	std	Y+12, r25	; 0x0c
    1c3c:	ad 87       	std	Y+13, r26	; 0x0d
    1c3e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c40:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c42:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c44:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c46:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c48:	20 e0       	ldi	r18, 0x00	; 0
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	4a ef       	ldi	r20, 0xFA	; 250
    1c4e:	54 e4       	ldi	r21, 0x44	; 68
    1c50:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c54:	dc 01       	movw	r26, r24
    1c56:	cb 01       	movw	r24, r22
    1c58:	8f 83       	std	Y+7, r24	; 0x07
    1c5a:	98 87       	std	Y+8, r25	; 0x08
    1c5c:	a9 87       	std	Y+9, r26	; 0x09
    1c5e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c60:	6f 81       	ldd	r22, Y+7	; 0x07
    1c62:	78 85       	ldd	r23, Y+8	; 0x08
    1c64:	89 85       	ldd	r24, Y+9	; 0x09
    1c66:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c68:	20 e0       	ldi	r18, 0x00	; 0
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	40 e8       	ldi	r20, 0x80	; 128
    1c6e:	5f e3       	ldi	r21, 0x3F	; 63
    1c70:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c74:	88 23       	and	r24, r24
    1c76:	2c f4       	brge	.+10     	; 0x1c82 <LCD_voidSendCommand+0x13c>
		__ticks = 1;
    1c78:	81 e0       	ldi	r24, 0x01	; 1
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	9e 83       	std	Y+6, r25	; 0x06
    1c7e:	8d 83       	std	Y+5, r24	; 0x05
    1c80:	3f c0       	rjmp	.+126    	; 0x1d00 <LCD_voidSendCommand+0x1ba>
	else if (__tmp > 65535)
    1c82:	6f 81       	ldd	r22, Y+7	; 0x07
    1c84:	78 85       	ldd	r23, Y+8	; 0x08
    1c86:	89 85       	ldd	r24, Y+9	; 0x09
    1c88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c8a:	20 e0       	ldi	r18, 0x00	; 0
    1c8c:	3f ef       	ldi	r19, 0xFF	; 255
    1c8e:	4f e7       	ldi	r20, 0x7F	; 127
    1c90:	57 e4       	ldi	r21, 0x47	; 71
    1c92:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c96:	18 16       	cp	r1, r24
    1c98:	4c f5       	brge	.+82     	; 0x1cec <LCD_voidSendCommand+0x1a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ca0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ca2:	20 e0       	ldi	r18, 0x00	; 0
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	40 e2       	ldi	r20, 0x20	; 32
    1ca8:	51 e4       	ldi	r21, 0x41	; 65
    1caa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cae:	dc 01       	movw	r26, r24
    1cb0:	cb 01       	movw	r24, r22
    1cb2:	bc 01       	movw	r22, r24
    1cb4:	cd 01       	movw	r24, r26
    1cb6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cba:	dc 01       	movw	r26, r24
    1cbc:	cb 01       	movw	r24, r22
    1cbe:	9e 83       	std	Y+6, r25	; 0x06
    1cc0:	8d 83       	std	Y+5, r24	; 0x05
    1cc2:	0f c0       	rjmp	.+30     	; 0x1ce2 <LCD_voidSendCommand+0x19c>
    1cc4:	88 ec       	ldi	r24, 0xC8	; 200
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	9c 83       	std	Y+4, r25	; 0x04
    1cca:	8b 83       	std	Y+3, r24	; 0x03
    1ccc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cce:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd0:	01 97       	sbiw	r24, 0x01	; 1
    1cd2:	f1 f7       	brne	.-4      	; 0x1cd0 <LCD_voidSendCommand+0x18a>
    1cd4:	9c 83       	std	Y+4, r25	; 0x04
    1cd6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cd8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cda:	9e 81       	ldd	r25, Y+6	; 0x06
    1cdc:	01 97       	sbiw	r24, 0x01	; 1
    1cde:	9e 83       	std	Y+6, r25	; 0x06
    1ce0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ce2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce6:	00 97       	sbiw	r24, 0x00	; 0
    1ce8:	69 f7       	brne	.-38     	; 0x1cc4 <LCD_voidSendCommand+0x17e>
    1cea:	14 c0       	rjmp	.+40     	; 0x1d14 <LCD_voidSendCommand+0x1ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cec:	6f 81       	ldd	r22, Y+7	; 0x07
    1cee:	78 85       	ldd	r23, Y+8	; 0x08
    1cf0:	89 85       	ldd	r24, Y+9	; 0x09
    1cf2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cf4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cf8:	dc 01       	movw	r26, r24
    1cfa:	cb 01       	movw	r24, r22
    1cfc:	9e 83       	std	Y+6, r25	; 0x06
    1cfe:	8d 83       	std	Y+5, r24	; 0x05
    1d00:	8d 81       	ldd	r24, Y+5	; 0x05
    1d02:	9e 81       	ldd	r25, Y+6	; 0x06
    1d04:	9a 83       	std	Y+2, r25	; 0x02
    1d06:	89 83       	std	Y+1, r24	; 0x01
    1d08:	89 81       	ldd	r24, Y+1	; 0x01
    1d0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d0c:	01 97       	sbiw	r24, 0x01	; 1
    1d0e:	f1 f7       	brne	.-4      	; 0x1d0c <LCD_voidSendCommand+0x1c6>
    1d10:	9a 83       	std	Y+2, r25	; 0x02
    1d12:	89 83       	std	Y+1, r24	; 0x01
#endif
	_delay_ms(5);
}
    1d14:	2f 96       	adiw	r28, 0x0f	; 15
    1d16:	0f b6       	in	r0, 0x3f	; 63
    1d18:	f8 94       	cli
    1d1a:	de bf       	out	0x3e, r29	; 62
    1d1c:	0f be       	out	0x3f, r0	; 63
    1d1e:	cd bf       	out	0x3d, r28	; 61
    1d20:	cf 91       	pop	r28
    1d22:	df 91       	pop	r29
    1d24:	08 95       	ret

00001d26 <LCD_voidSendInitCommand>:

void LCD_voidSendInitCommand(u8 command){
    1d26:	df 93       	push	r29
    1d28:	cf 93       	push	r28
    1d2a:	cd b7       	in	r28, 0x3d	; 61
    1d2c:	de b7       	in	r29, 0x3e	; 62
    1d2e:	2f 97       	sbiw	r28, 0x0f	; 15
    1d30:	0f b6       	in	r0, 0x3f	; 63
    1d32:	f8 94       	cli
    1d34:	de bf       	out	0x3e, r29	; 62
    1d36:	0f be       	out	0x3f, r0	; 63
    1d38:	cd bf       	out	0x3d, r28	; 61
    1d3a:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_u8SetPinValue(LCD_CONTROL_PORT,LCD_RS, DIO_u8PIN_LOW); //RS = 0
    1d3c:	80 e0       	ldi	r24, 0x00	; 0
    1d3e:	63 e0       	ldi	r22, 0x03	; 3
    1d40:	40 e0       	ldi	r20, 0x00	; 0
    1d42:	0e 94 be 05 	call	0xb7c	; 0xb7c <DIO_u8SetPinValue>

	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_HIGH); //EN = 1
    1d46:	80 e0       	ldi	r24, 0x00	; 0
    1d48:	62 e0       	ldi	r22, 0x02	; 2
    1d4a:	41 e0       	ldi	r20, 0x01	; 1
    1d4c:	0e 94 be 05 	call	0xb7c	; 0xb7c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D4, Get_Bit(command, 4));
    1d50:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d52:	82 95       	swap	r24
    1d54:	8f 70       	andi	r24, 0x0F	; 15
    1d56:	98 2f       	mov	r25, r24
    1d58:	91 70       	andi	r25, 0x01	; 1
    1d5a:	81 e0       	ldi	r24, 0x01	; 1
    1d5c:	60 e0       	ldi	r22, 0x00	; 0
    1d5e:	49 2f       	mov	r20, r25
    1d60:	0e 94 be 05 	call	0xb7c	; 0xb7c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D5, Get_Bit(command, 5));
    1d64:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d66:	82 95       	swap	r24
    1d68:	86 95       	lsr	r24
    1d6a:	87 70       	andi	r24, 0x07	; 7
    1d6c:	98 2f       	mov	r25, r24
    1d6e:	91 70       	andi	r25, 0x01	; 1
    1d70:	81 e0       	ldi	r24, 0x01	; 1
    1d72:	61 e0       	ldi	r22, 0x01	; 1
    1d74:	49 2f       	mov	r20, r25
    1d76:	0e 94 be 05 	call	0xb7c	; 0xb7c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D6, Get_Bit(command, 6));
    1d7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d7c:	82 95       	swap	r24
    1d7e:	86 95       	lsr	r24
    1d80:	86 95       	lsr	r24
    1d82:	83 70       	andi	r24, 0x03	; 3
    1d84:	98 2f       	mov	r25, r24
    1d86:	91 70       	andi	r25, 0x01	; 1
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	62 e0       	ldi	r22, 0x02	; 2
    1d8c:	49 2f       	mov	r20, r25
    1d8e:	0e 94 be 05 	call	0xb7c	; 0xb7c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D7, Get_Bit(command, 7));
    1d92:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d94:	98 2f       	mov	r25, r24
    1d96:	99 1f       	adc	r25, r25
    1d98:	99 27       	eor	r25, r25
    1d9a:	99 1f       	adc	r25, r25
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	64 e0       	ldi	r22, 0x04	; 4
    1da0:	49 2f       	mov	r20, r25
    1da2:	0e 94 be 05 	call	0xb7c	; 0xb7c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_LOW); //EN = 0
    1da6:	80 e0       	ldi	r24, 0x00	; 0
    1da8:	62 e0       	ldi	r22, 0x02	; 2
    1daa:	40 e0       	ldi	r20, 0x00	; 0
    1dac:	0e 94 be 05 	call	0xb7c	; 0xb7c <DIO_u8SetPinValue>
    1db0:	80 e0       	ldi	r24, 0x00	; 0
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	a0 ea       	ldi	r26, 0xA0	; 160
    1db6:	b0 e4       	ldi	r27, 0x40	; 64
    1db8:	8b 87       	std	Y+11, r24	; 0x0b
    1dba:	9c 87       	std	Y+12, r25	; 0x0c
    1dbc:	ad 87       	std	Y+13, r26	; 0x0d
    1dbe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dc0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dc2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dc4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dc6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dc8:	20 e0       	ldi	r18, 0x00	; 0
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	4a ef       	ldi	r20, 0xFA	; 250
    1dce:	54 e4       	ldi	r21, 0x44	; 68
    1dd0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dd4:	dc 01       	movw	r26, r24
    1dd6:	cb 01       	movw	r24, r22
    1dd8:	8f 83       	std	Y+7, r24	; 0x07
    1dda:	98 87       	std	Y+8, r25	; 0x08
    1ddc:	a9 87       	std	Y+9, r26	; 0x09
    1dde:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1de0:	6f 81       	ldd	r22, Y+7	; 0x07
    1de2:	78 85       	ldd	r23, Y+8	; 0x08
    1de4:	89 85       	ldd	r24, Y+9	; 0x09
    1de6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1de8:	20 e0       	ldi	r18, 0x00	; 0
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	40 e8       	ldi	r20, 0x80	; 128
    1dee:	5f e3       	ldi	r21, 0x3F	; 63
    1df0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1df4:	88 23       	and	r24, r24
    1df6:	2c f4       	brge	.+10     	; 0x1e02 <LCD_voidSendInitCommand+0xdc>
		__ticks = 1;
    1df8:	81 e0       	ldi	r24, 0x01	; 1
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	9e 83       	std	Y+6, r25	; 0x06
    1dfe:	8d 83       	std	Y+5, r24	; 0x05
    1e00:	3f c0       	rjmp	.+126    	; 0x1e80 <LCD_voidSendInitCommand+0x15a>
	else if (__tmp > 65535)
    1e02:	6f 81       	ldd	r22, Y+7	; 0x07
    1e04:	78 85       	ldd	r23, Y+8	; 0x08
    1e06:	89 85       	ldd	r24, Y+9	; 0x09
    1e08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e0a:	20 e0       	ldi	r18, 0x00	; 0
    1e0c:	3f ef       	ldi	r19, 0xFF	; 255
    1e0e:	4f e7       	ldi	r20, 0x7F	; 127
    1e10:	57 e4       	ldi	r21, 0x47	; 71
    1e12:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e16:	18 16       	cp	r1, r24
    1e18:	4c f5       	brge	.+82     	; 0x1e6c <LCD_voidSendInitCommand+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e20:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e22:	20 e0       	ldi	r18, 0x00	; 0
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	40 e2       	ldi	r20, 0x20	; 32
    1e28:	51 e4       	ldi	r21, 0x41	; 65
    1e2a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e2e:	dc 01       	movw	r26, r24
    1e30:	cb 01       	movw	r24, r22
    1e32:	bc 01       	movw	r22, r24
    1e34:	cd 01       	movw	r24, r26
    1e36:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e3a:	dc 01       	movw	r26, r24
    1e3c:	cb 01       	movw	r24, r22
    1e3e:	9e 83       	std	Y+6, r25	; 0x06
    1e40:	8d 83       	std	Y+5, r24	; 0x05
    1e42:	0f c0       	rjmp	.+30     	; 0x1e62 <LCD_voidSendInitCommand+0x13c>
    1e44:	88 ec       	ldi	r24, 0xC8	; 200
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	9c 83       	std	Y+4, r25	; 0x04
    1e4a:	8b 83       	std	Y+3, r24	; 0x03
    1e4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e50:	01 97       	sbiw	r24, 0x01	; 1
    1e52:	f1 f7       	brne	.-4      	; 0x1e50 <LCD_voidSendInitCommand+0x12a>
    1e54:	9c 83       	std	Y+4, r25	; 0x04
    1e56:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e58:	8d 81       	ldd	r24, Y+5	; 0x05
    1e5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e5c:	01 97       	sbiw	r24, 0x01	; 1
    1e5e:	9e 83       	std	Y+6, r25	; 0x06
    1e60:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e62:	8d 81       	ldd	r24, Y+5	; 0x05
    1e64:	9e 81       	ldd	r25, Y+6	; 0x06
    1e66:	00 97       	sbiw	r24, 0x00	; 0
    1e68:	69 f7       	brne	.-38     	; 0x1e44 <LCD_voidSendInitCommand+0x11e>
    1e6a:	14 c0       	rjmp	.+40     	; 0x1e94 <LCD_voidSendInitCommand+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e6c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e6e:	78 85       	ldd	r23, Y+8	; 0x08
    1e70:	89 85       	ldd	r24, Y+9	; 0x09
    1e72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e74:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e78:	dc 01       	movw	r26, r24
    1e7a:	cb 01       	movw	r24, r22
    1e7c:	9e 83       	std	Y+6, r25	; 0x06
    1e7e:	8d 83       	std	Y+5, r24	; 0x05
    1e80:	8d 81       	ldd	r24, Y+5	; 0x05
    1e82:	9e 81       	ldd	r25, Y+6	; 0x06
    1e84:	9a 83       	std	Y+2, r25	; 0x02
    1e86:	89 83       	std	Y+1, r24	; 0x01
    1e88:	89 81       	ldd	r24, Y+1	; 0x01
    1e8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e8c:	01 97       	sbiw	r24, 0x01	; 1
    1e8e:	f1 f7       	brne	.-4      	; 0x1e8c <LCD_voidSendInitCommand+0x166>
    1e90:	9a 83       	std	Y+2, r25	; 0x02
    1e92:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    1e94:	2f 96       	adiw	r28, 0x0f	; 15
    1e96:	0f b6       	in	r0, 0x3f	; 63
    1e98:	f8 94       	cli
    1e9a:	de bf       	out	0x3e, r29	; 62
    1e9c:	0f be       	out	0x3f, r0	; 63
    1e9e:	cd bf       	out	0x3d, r28	; 61
    1ea0:	cf 91       	pop	r28
    1ea2:	df 91       	pop	r29
    1ea4:	08 95       	ret

00001ea6 <LCD_voidWriteChar>:

void LCD_voidWriteChar(u8 data){
    1ea6:	df 93       	push	r29
    1ea8:	cf 93       	push	r28
    1eaa:	cd b7       	in	r28, 0x3d	; 61
    1eac:	de b7       	in	r29, 0x3e	; 62
    1eae:	2f 97       	sbiw	r28, 0x0f	; 15
    1eb0:	0f b6       	in	r0, 0x3f	; 63
    1eb2:	f8 94       	cli
    1eb4:	de bf       	out	0x3e, r29	; 62
    1eb6:	0f be       	out	0x3f, r0	; 63
    1eb8:	cd bf       	out	0x3d, r28	; 61
    1eba:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_u8SetPinValue(LCD_CONTROL_PORT,LCD_RS, DIO_u8PIN_HIGH); //RS = 0
    1ebc:	80 e0       	ldi	r24, 0x00	; 0
    1ebe:	63 e0       	ldi	r22, 0x03	; 3
    1ec0:	41 e0       	ldi	r20, 0x01	; 1
    1ec2:	0e 94 be 05 	call	0xb7c	; 0xb7c <DIO_u8SetPinValue>

	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_HIGH); //EN = 1
    1ec6:	80 e0       	ldi	r24, 0x00	; 0
    1ec8:	62 e0       	ldi	r22, 0x02	; 2
    1eca:	41 e0       	ldi	r20, 0x01	; 1
    1ecc:	0e 94 be 05 	call	0xb7c	; 0xb7c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D0, Get_Bit(data, 0));
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D1, Get_Bit(data, 1));
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D2, Get_Bit(data, 2));
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D3, Get_Bit(data, 3));
#endif
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D4, Get_Bit(data, 4));
    1ed0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ed2:	82 95       	swap	r24
    1ed4:	8f 70       	andi	r24, 0x0F	; 15
    1ed6:	98 2f       	mov	r25, r24
    1ed8:	91 70       	andi	r25, 0x01	; 1
    1eda:	81 e0       	ldi	r24, 0x01	; 1
    1edc:	60 e0       	ldi	r22, 0x00	; 0
    1ede:	49 2f       	mov	r20, r25
    1ee0:	0e 94 be 05 	call	0xb7c	; 0xb7c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D5, Get_Bit(data, 5));
    1ee4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ee6:	82 95       	swap	r24
    1ee8:	86 95       	lsr	r24
    1eea:	87 70       	andi	r24, 0x07	; 7
    1eec:	98 2f       	mov	r25, r24
    1eee:	91 70       	andi	r25, 0x01	; 1
    1ef0:	81 e0       	ldi	r24, 0x01	; 1
    1ef2:	61 e0       	ldi	r22, 0x01	; 1
    1ef4:	49 2f       	mov	r20, r25
    1ef6:	0e 94 be 05 	call	0xb7c	; 0xb7c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D6, Get_Bit(data, 6));
    1efa:	8f 85       	ldd	r24, Y+15	; 0x0f
    1efc:	82 95       	swap	r24
    1efe:	86 95       	lsr	r24
    1f00:	86 95       	lsr	r24
    1f02:	83 70       	andi	r24, 0x03	; 3
    1f04:	98 2f       	mov	r25, r24
    1f06:	91 70       	andi	r25, 0x01	; 1
    1f08:	81 e0       	ldi	r24, 0x01	; 1
    1f0a:	62 e0       	ldi	r22, 0x02	; 2
    1f0c:	49 2f       	mov	r20, r25
    1f0e:	0e 94 be 05 	call	0xb7c	; 0xb7c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D7, Get_Bit(data, 7));
    1f12:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f14:	98 2f       	mov	r25, r24
    1f16:	99 1f       	adc	r25, r25
    1f18:	99 27       	eor	r25, r25
    1f1a:	99 1f       	adc	r25, r25
    1f1c:	81 e0       	ldi	r24, 0x01	; 1
    1f1e:	64 e0       	ldi	r22, 0x04	; 4
    1f20:	49 2f       	mov	r20, r25
    1f22:	0e 94 be 05 	call	0xb7c	; 0xb7c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_LOW); //EN = 0
    1f26:	80 e0       	ldi	r24, 0x00	; 0
    1f28:	62 e0       	ldi	r22, 0x02	; 2
    1f2a:	40 e0       	ldi	r20, 0x00	; 0
    1f2c:	0e 94 be 05 	call	0xb7c	; 0xb7c <DIO_u8SetPinValue>

#if LCD_BITS == LCD_4_BIT_MODE
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_HIGH); //EN = 1
    1f30:	80 e0       	ldi	r24, 0x00	; 0
    1f32:	62 e0       	ldi	r22, 0x02	; 2
    1f34:	41 e0       	ldi	r20, 0x01	; 1
    1f36:	0e 94 be 05 	call	0xb7c	; 0xb7c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D4, Get_Bit(data, 0));
    1f3a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f3c:	98 2f       	mov	r25, r24
    1f3e:	91 70       	andi	r25, 0x01	; 1
    1f40:	81 e0       	ldi	r24, 0x01	; 1
    1f42:	60 e0       	ldi	r22, 0x00	; 0
    1f44:	49 2f       	mov	r20, r25
    1f46:	0e 94 be 05 	call	0xb7c	; 0xb7c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D5, Get_Bit(data, 1));
    1f4a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f4c:	86 95       	lsr	r24
    1f4e:	98 2f       	mov	r25, r24
    1f50:	91 70       	andi	r25, 0x01	; 1
    1f52:	81 e0       	ldi	r24, 0x01	; 1
    1f54:	61 e0       	ldi	r22, 0x01	; 1
    1f56:	49 2f       	mov	r20, r25
    1f58:	0e 94 be 05 	call	0xb7c	; 0xb7c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D6, Get_Bit(data, 2));
    1f5c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f5e:	86 95       	lsr	r24
    1f60:	86 95       	lsr	r24
    1f62:	98 2f       	mov	r25, r24
    1f64:	91 70       	andi	r25, 0x01	; 1
    1f66:	81 e0       	ldi	r24, 0x01	; 1
    1f68:	62 e0       	ldi	r22, 0x02	; 2
    1f6a:	49 2f       	mov	r20, r25
    1f6c:	0e 94 be 05 	call	0xb7c	; 0xb7c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D7, Get_Bit(data, 3));
    1f70:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f72:	86 95       	lsr	r24
    1f74:	86 95       	lsr	r24
    1f76:	86 95       	lsr	r24
    1f78:	98 2f       	mov	r25, r24
    1f7a:	91 70       	andi	r25, 0x01	; 1
    1f7c:	81 e0       	ldi	r24, 0x01	; 1
    1f7e:	64 e0       	ldi	r22, 0x04	; 4
    1f80:	49 2f       	mov	r20, r25
    1f82:	0e 94 be 05 	call	0xb7c	; 0xb7c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_LOW); //EN = 0
    1f86:	80 e0       	ldi	r24, 0x00	; 0
    1f88:	62 e0       	ldi	r22, 0x02	; 2
    1f8a:	40 e0       	ldi	r20, 0x00	; 0
    1f8c:	0e 94 be 05 	call	0xb7c	; 0xb7c <DIO_u8SetPinValue>
    1f90:	80 e0       	ldi	r24, 0x00	; 0
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	a0 ea       	ldi	r26, 0xA0	; 160
    1f96:	b0 e4       	ldi	r27, 0x40	; 64
    1f98:	8b 87       	std	Y+11, r24	; 0x0b
    1f9a:	9c 87       	std	Y+12, r25	; 0x0c
    1f9c:	ad 87       	std	Y+13, r26	; 0x0d
    1f9e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fa0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fa2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fa4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fa6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fa8:	20 e0       	ldi	r18, 0x00	; 0
    1faa:	30 e0       	ldi	r19, 0x00	; 0
    1fac:	4a ef       	ldi	r20, 0xFA	; 250
    1fae:	54 e4       	ldi	r21, 0x44	; 68
    1fb0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fb4:	dc 01       	movw	r26, r24
    1fb6:	cb 01       	movw	r24, r22
    1fb8:	8f 83       	std	Y+7, r24	; 0x07
    1fba:	98 87       	std	Y+8, r25	; 0x08
    1fbc:	a9 87       	std	Y+9, r26	; 0x09
    1fbe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fc0:	6f 81       	ldd	r22, Y+7	; 0x07
    1fc2:	78 85       	ldd	r23, Y+8	; 0x08
    1fc4:	89 85       	ldd	r24, Y+9	; 0x09
    1fc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fc8:	20 e0       	ldi	r18, 0x00	; 0
    1fca:	30 e0       	ldi	r19, 0x00	; 0
    1fcc:	40 e8       	ldi	r20, 0x80	; 128
    1fce:	5f e3       	ldi	r21, 0x3F	; 63
    1fd0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1fd4:	88 23       	and	r24, r24
    1fd6:	2c f4       	brge	.+10     	; 0x1fe2 <LCD_voidWriteChar+0x13c>
		__ticks = 1;
    1fd8:	81 e0       	ldi	r24, 0x01	; 1
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	9e 83       	std	Y+6, r25	; 0x06
    1fde:	8d 83       	std	Y+5, r24	; 0x05
    1fe0:	3f c0       	rjmp	.+126    	; 0x2060 <LCD_voidWriteChar+0x1ba>
	else if (__tmp > 65535)
    1fe2:	6f 81       	ldd	r22, Y+7	; 0x07
    1fe4:	78 85       	ldd	r23, Y+8	; 0x08
    1fe6:	89 85       	ldd	r24, Y+9	; 0x09
    1fe8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fea:	20 e0       	ldi	r18, 0x00	; 0
    1fec:	3f ef       	ldi	r19, 0xFF	; 255
    1fee:	4f e7       	ldi	r20, 0x7F	; 127
    1ff0:	57 e4       	ldi	r21, 0x47	; 71
    1ff2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ff6:	18 16       	cp	r1, r24
    1ff8:	4c f5       	brge	.+82     	; 0x204c <LCD_voidWriteChar+0x1a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ffa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ffc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ffe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2000:	9e 85       	ldd	r25, Y+14	; 0x0e
    2002:	20 e0       	ldi	r18, 0x00	; 0
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	40 e2       	ldi	r20, 0x20	; 32
    2008:	51 e4       	ldi	r21, 0x41	; 65
    200a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    200e:	dc 01       	movw	r26, r24
    2010:	cb 01       	movw	r24, r22
    2012:	bc 01       	movw	r22, r24
    2014:	cd 01       	movw	r24, r26
    2016:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    201a:	dc 01       	movw	r26, r24
    201c:	cb 01       	movw	r24, r22
    201e:	9e 83       	std	Y+6, r25	; 0x06
    2020:	8d 83       	std	Y+5, r24	; 0x05
    2022:	0f c0       	rjmp	.+30     	; 0x2042 <LCD_voidWriteChar+0x19c>
    2024:	88 ec       	ldi	r24, 0xC8	; 200
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	9c 83       	std	Y+4, r25	; 0x04
    202a:	8b 83       	std	Y+3, r24	; 0x03
    202c:	8b 81       	ldd	r24, Y+3	; 0x03
    202e:	9c 81       	ldd	r25, Y+4	; 0x04
    2030:	01 97       	sbiw	r24, 0x01	; 1
    2032:	f1 f7       	brne	.-4      	; 0x2030 <LCD_voidWriteChar+0x18a>
    2034:	9c 83       	std	Y+4, r25	; 0x04
    2036:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2038:	8d 81       	ldd	r24, Y+5	; 0x05
    203a:	9e 81       	ldd	r25, Y+6	; 0x06
    203c:	01 97       	sbiw	r24, 0x01	; 1
    203e:	9e 83       	std	Y+6, r25	; 0x06
    2040:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2042:	8d 81       	ldd	r24, Y+5	; 0x05
    2044:	9e 81       	ldd	r25, Y+6	; 0x06
    2046:	00 97       	sbiw	r24, 0x00	; 0
    2048:	69 f7       	brne	.-38     	; 0x2024 <LCD_voidWriteChar+0x17e>
    204a:	14 c0       	rjmp	.+40     	; 0x2074 <LCD_voidWriteChar+0x1ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    204c:	6f 81       	ldd	r22, Y+7	; 0x07
    204e:	78 85       	ldd	r23, Y+8	; 0x08
    2050:	89 85       	ldd	r24, Y+9	; 0x09
    2052:	9a 85       	ldd	r25, Y+10	; 0x0a
    2054:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2058:	dc 01       	movw	r26, r24
    205a:	cb 01       	movw	r24, r22
    205c:	9e 83       	std	Y+6, r25	; 0x06
    205e:	8d 83       	std	Y+5, r24	; 0x05
    2060:	8d 81       	ldd	r24, Y+5	; 0x05
    2062:	9e 81       	ldd	r25, Y+6	; 0x06
    2064:	9a 83       	std	Y+2, r25	; 0x02
    2066:	89 83       	std	Y+1, r24	; 0x01
    2068:	89 81       	ldd	r24, Y+1	; 0x01
    206a:	9a 81       	ldd	r25, Y+2	; 0x02
    206c:	01 97       	sbiw	r24, 0x01	; 1
    206e:	f1 f7       	brne	.-4      	; 0x206c <LCD_voidWriteChar+0x1c6>
    2070:	9a 83       	std	Y+2, r25	; 0x02
    2072:	89 83       	std	Y+1, r24	; 0x01
#endif
	_delay_ms(5);
}
    2074:	2f 96       	adiw	r28, 0x0f	; 15
    2076:	0f b6       	in	r0, 0x3f	; 63
    2078:	f8 94       	cli
    207a:	de bf       	out	0x3e, r29	; 62
    207c:	0f be       	out	0x3f, r0	; 63
    207e:	cd bf       	out	0x3d, r28	; 61
    2080:	cf 91       	pop	r28
    2082:	df 91       	pop	r29
    2084:	08 95       	ret

00002086 <LCD_voidWriteString>:

void LCD_voidWriteString(u8* Local_Data){
    2086:	df 93       	push	r29
    2088:	cf 93       	push	r28
    208a:	00 d0       	rcall	.+0      	; 0x208c <LCD_voidWriteString+0x6>
    208c:	0f 92       	push	r0
    208e:	cd b7       	in	r28, 0x3d	; 61
    2090:	de b7       	in	r29, 0x3e	; 62
    2092:	9b 83       	std	Y+3, r25	; 0x03
    2094:	8a 83       	std	Y+2, r24	; 0x02
	u8 index = 0;
    2096:	19 82       	std	Y+1, r1	; 0x01
    2098:	0e c0       	rjmp	.+28     	; 0x20b6 <LCD_voidWriteString+0x30>
	while(Local_Data[index] != '\0'){
		LCD_voidWriteChar(Local_Data[index]);
    209a:	89 81       	ldd	r24, Y+1	; 0x01
    209c:	28 2f       	mov	r18, r24
    209e:	30 e0       	ldi	r19, 0x00	; 0
    20a0:	8a 81       	ldd	r24, Y+2	; 0x02
    20a2:	9b 81       	ldd	r25, Y+3	; 0x03
    20a4:	fc 01       	movw	r30, r24
    20a6:	e2 0f       	add	r30, r18
    20a8:	f3 1f       	adc	r31, r19
    20aa:	80 81       	ld	r24, Z
    20ac:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <LCD_voidWriteChar>
		index++;
    20b0:	89 81       	ldd	r24, Y+1	; 0x01
    20b2:	8f 5f       	subi	r24, 0xFF	; 255
    20b4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}

void LCD_voidWriteString(u8* Local_Data){
	u8 index = 0;
	while(Local_Data[index] != '\0'){
    20b6:	89 81       	ldd	r24, Y+1	; 0x01
    20b8:	28 2f       	mov	r18, r24
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	8a 81       	ldd	r24, Y+2	; 0x02
    20be:	9b 81       	ldd	r25, Y+3	; 0x03
    20c0:	fc 01       	movw	r30, r24
    20c2:	e2 0f       	add	r30, r18
    20c4:	f3 1f       	adc	r31, r19
    20c6:	80 81       	ld	r24, Z
    20c8:	88 23       	and	r24, r24
    20ca:	39 f7       	brne	.-50     	; 0x209a <LCD_voidWriteString+0x14>
		LCD_voidWriteChar(Local_Data[index]);
		index++;
	}
}
    20cc:	0f 90       	pop	r0
    20ce:	0f 90       	pop	r0
    20d0:	0f 90       	pop	r0
    20d2:	cf 91       	pop	r28
    20d4:	df 91       	pop	r29
    20d6:	08 95       	ret

000020d8 <IntToString>:

u8* IntToString(s32 anInteger,u8 *str){
    20d8:	0f 93       	push	r16
    20da:	1f 93       	push	r17
    20dc:	df 93       	push	r29
    20de:	cf 93       	push	r28
    20e0:	cd b7       	in	r28, 0x3d	; 61
    20e2:	de b7       	in	r29, 0x3e	; 62
    20e4:	2e 97       	sbiw	r28, 0x0e	; 14
    20e6:	0f b6       	in	r0, 0x3f	; 63
    20e8:	f8 94       	cli
    20ea:	de bf       	out	0x3e, r29	; 62
    20ec:	0f be       	out	0x3f, r0	; 63
    20ee:	cd bf       	out	0x3d, r28	; 61
    20f0:	69 87       	std	Y+9, r22	; 0x09
    20f2:	7a 87       	std	Y+10, r23	; 0x0a
    20f4:	8b 87       	std	Y+11, r24	; 0x0b
    20f6:	9c 87       	std	Y+12, r25	; 0x0c
    20f8:	5e 87       	std	Y+14, r21	; 0x0e
    20fa:	4d 87       	std	Y+13, r20	; 0x0d
	u32 flag = 0;
    20fc:	1d 82       	std	Y+5, r1	; 0x05
    20fe:	1e 82       	std	Y+6, r1	; 0x06
    2100:	1f 82       	std	Y+7, r1	; 0x07
    2102:	18 86       	std	Y+8, r1	; 0x08
	u32 i = INT_TO_STRING_ARR_SIZE - 1;
    2104:	83 e1       	ldi	r24, 0x13	; 19
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	a0 e0       	ldi	r26, 0x00	; 0
    210a:	b0 e0       	ldi	r27, 0x00	; 0
    210c:	89 83       	std	Y+1, r24	; 0x01
    210e:	9a 83       	std	Y+2, r25	; 0x02
    2110:	ab 83       	std	Y+3, r26	; 0x03
    2112:	bc 83       	std	Y+4, r27	; 0x04
	str[i--] = '\0';
    2114:	29 81       	ldd	r18, Y+1	; 0x01
    2116:	3a 81       	ldd	r19, Y+2	; 0x02
    2118:	8d 85       	ldd	r24, Y+13	; 0x0d
    211a:	9e 85       	ldd	r25, Y+14	; 0x0e
    211c:	fc 01       	movw	r30, r24
    211e:	e2 0f       	add	r30, r18
    2120:	f3 1f       	adc	r31, r19
    2122:	10 82       	st	Z, r1
    2124:	89 81       	ldd	r24, Y+1	; 0x01
    2126:	9a 81       	ldd	r25, Y+2	; 0x02
    2128:	ab 81       	ldd	r26, Y+3	; 0x03
    212a:	bc 81       	ldd	r27, Y+4	; 0x04
    212c:	01 97       	sbiw	r24, 0x01	; 1
    212e:	a1 09       	sbc	r26, r1
    2130:	b1 09       	sbc	r27, r1
    2132:	89 83       	std	Y+1, r24	; 0x01
    2134:	9a 83       	std	Y+2, r25	; 0x02
    2136:	ab 83       	std	Y+3, r26	; 0x03
    2138:	bc 83       	std	Y+4, r27	; 0x04
	if (anInteger < 0) {
    213a:	89 85       	ldd	r24, Y+9	; 0x09
    213c:	9a 85       	ldd	r25, Y+10	; 0x0a
    213e:	ab 85       	ldd	r26, Y+11	; 0x0b
    2140:	bc 85       	ldd	r27, Y+12	; 0x0c
    2142:	bb 23       	and	r27, r27
    2144:	0c f0       	brlt	.+2      	; 0x2148 <IntToString+0x70>
    2146:	4d c0       	rjmp	.+154    	; 0x21e2 <IntToString+0x10a>
		flag = 1;
    2148:	81 e0       	ldi	r24, 0x01	; 1
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	a0 e0       	ldi	r26, 0x00	; 0
    214e:	b0 e0       	ldi	r27, 0x00	; 0
    2150:	8d 83       	std	Y+5, r24	; 0x05
    2152:	9e 83       	std	Y+6, r25	; 0x06
    2154:	af 83       	std	Y+7, r26	; 0x07
    2156:	b8 87       	std	Y+8, r27	; 0x08
		anInteger = -anInteger;
    2158:	89 85       	ldd	r24, Y+9	; 0x09
    215a:	9a 85       	ldd	r25, Y+10	; 0x0a
    215c:	ab 85       	ldd	r26, Y+11	; 0x0b
    215e:	bc 85       	ldd	r27, Y+12	; 0x0c
    2160:	b0 95       	com	r27
    2162:	a0 95       	com	r26
    2164:	90 95       	com	r25
    2166:	81 95       	neg	r24
    2168:	9f 4f       	sbci	r25, 0xFF	; 255
    216a:	af 4f       	sbci	r26, 0xFF	; 255
    216c:	bf 4f       	sbci	r27, 0xFF	; 255
    216e:	89 87       	std	Y+9, r24	; 0x09
    2170:	9a 87       	std	Y+10, r25	; 0x0a
    2172:	ab 87       	std	Y+11, r26	; 0x0b
    2174:	bc 87       	std	Y+12, r27	; 0x0c
    2176:	35 c0       	rjmp	.+106    	; 0x21e2 <IntToString+0x10a>
	}
	while (anInteger != 0) {
		str[i--] = (anInteger % 10) + '0';
    2178:	29 81       	ldd	r18, Y+1	; 0x01
    217a:	3a 81       	ldd	r19, Y+2	; 0x02
    217c:	8d 85       	ldd	r24, Y+13	; 0x0d
    217e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2180:	8c 01       	movw	r16, r24
    2182:	02 0f       	add	r16, r18
    2184:	13 1f       	adc	r17, r19
    2186:	89 85       	ldd	r24, Y+9	; 0x09
    2188:	9a 85       	ldd	r25, Y+10	; 0x0a
    218a:	ab 85       	ldd	r26, Y+11	; 0x0b
    218c:	bc 85       	ldd	r27, Y+12	; 0x0c
    218e:	2a e0       	ldi	r18, 0x0A	; 10
    2190:	30 e0       	ldi	r19, 0x00	; 0
    2192:	40 e0       	ldi	r20, 0x00	; 0
    2194:	50 e0       	ldi	r21, 0x00	; 0
    2196:	bc 01       	movw	r22, r24
    2198:	cd 01       	movw	r24, r26
    219a:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <__divmodsi4>
    219e:	dc 01       	movw	r26, r24
    21a0:	cb 01       	movw	r24, r22
    21a2:	80 5d       	subi	r24, 0xD0	; 208
    21a4:	f8 01       	movw	r30, r16
    21a6:	80 83       	st	Z, r24
    21a8:	89 81       	ldd	r24, Y+1	; 0x01
    21aa:	9a 81       	ldd	r25, Y+2	; 0x02
    21ac:	ab 81       	ldd	r26, Y+3	; 0x03
    21ae:	bc 81       	ldd	r27, Y+4	; 0x04
    21b0:	01 97       	sbiw	r24, 0x01	; 1
    21b2:	a1 09       	sbc	r26, r1
    21b4:	b1 09       	sbc	r27, r1
    21b6:	89 83       	std	Y+1, r24	; 0x01
    21b8:	9a 83       	std	Y+2, r25	; 0x02
    21ba:	ab 83       	std	Y+3, r26	; 0x03
    21bc:	bc 83       	std	Y+4, r27	; 0x04
		anInteger /= 10;
    21be:	89 85       	ldd	r24, Y+9	; 0x09
    21c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21c2:	ab 85       	ldd	r26, Y+11	; 0x0b
    21c4:	bc 85       	ldd	r27, Y+12	; 0x0c
    21c6:	2a e0       	ldi	r18, 0x0A	; 10
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	40 e0       	ldi	r20, 0x00	; 0
    21cc:	50 e0       	ldi	r21, 0x00	; 0
    21ce:	bc 01       	movw	r22, r24
    21d0:	cd 01       	movw	r24, r26
    21d2:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <__divmodsi4>
    21d6:	da 01       	movw	r26, r20
    21d8:	c9 01       	movw	r24, r18
    21da:	89 87       	std	Y+9, r24	; 0x09
    21dc:	9a 87       	std	Y+10, r25	; 0x0a
    21de:	ab 87       	std	Y+11, r26	; 0x0b
    21e0:	bc 87       	std	Y+12, r27	; 0x0c
	str[i--] = '\0';
	if (anInteger < 0) {
		flag = 1;
		anInteger = -anInteger;
	}
	while (anInteger != 0) {
    21e2:	89 85       	ldd	r24, Y+9	; 0x09
    21e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21e6:	ab 85       	ldd	r26, Y+11	; 0x0b
    21e8:	bc 85       	ldd	r27, Y+12	; 0x0c
    21ea:	00 97       	sbiw	r24, 0x00	; 0
    21ec:	a1 05       	cpc	r26, r1
    21ee:	b1 05       	cpc	r27, r1
    21f0:	19 f6       	brne	.-122    	; 0x2178 <IntToString+0xa0>
		str[i--] = (anInteger % 10) + '0';
		anInteger /= 10;
	}
	if (flag){
    21f2:	8d 81       	ldd	r24, Y+5	; 0x05
    21f4:	9e 81       	ldd	r25, Y+6	; 0x06
    21f6:	af 81       	ldd	r26, Y+7	; 0x07
    21f8:	b8 85       	ldd	r27, Y+8	; 0x08
    21fa:	00 97       	sbiw	r24, 0x00	; 0
    21fc:	a1 05       	cpc	r26, r1
    21fe:	b1 05       	cpc	r27, r1
    2200:	a1 f0       	breq	.+40     	; 0x222a <IntToString+0x152>
		str[i--] = '-';
    2202:	29 81       	ldd	r18, Y+1	; 0x01
    2204:	3a 81       	ldd	r19, Y+2	; 0x02
    2206:	8d 85       	ldd	r24, Y+13	; 0x0d
    2208:	9e 85       	ldd	r25, Y+14	; 0x0e
    220a:	fc 01       	movw	r30, r24
    220c:	e2 0f       	add	r30, r18
    220e:	f3 1f       	adc	r31, r19
    2210:	8d e2       	ldi	r24, 0x2D	; 45
    2212:	80 83       	st	Z, r24
    2214:	89 81       	ldd	r24, Y+1	; 0x01
    2216:	9a 81       	ldd	r25, Y+2	; 0x02
    2218:	ab 81       	ldd	r26, Y+3	; 0x03
    221a:	bc 81       	ldd	r27, Y+4	; 0x04
    221c:	01 97       	sbiw	r24, 0x01	; 1
    221e:	a1 09       	sbc	r26, r1
    2220:	b1 09       	sbc	r27, r1
    2222:	89 83       	std	Y+1, r24	; 0x01
    2224:	9a 83       	std	Y+2, r25	; 0x02
    2226:	ab 83       	std	Y+3, r26	; 0x03
    2228:	bc 83       	std	Y+4, r27	; 0x04
	}
	i++;
    222a:	89 81       	ldd	r24, Y+1	; 0x01
    222c:	9a 81       	ldd	r25, Y+2	; 0x02
    222e:	ab 81       	ldd	r26, Y+3	; 0x03
    2230:	bc 81       	ldd	r27, Y+4	; 0x04
    2232:	01 96       	adiw	r24, 0x01	; 1
    2234:	a1 1d       	adc	r26, r1
    2236:	b1 1d       	adc	r27, r1
    2238:	89 83       	std	Y+1, r24	; 0x01
    223a:	9a 83       	std	Y+2, r25	; 0x02
    223c:	ab 83       	std	Y+3, r26	; 0x03
    223e:	bc 83       	std	Y+4, r27	; 0x04
	return str + i;
    2240:	29 81       	ldd	r18, Y+1	; 0x01
    2242:	3a 81       	ldd	r19, Y+2	; 0x02
    2244:	8d 85       	ldd	r24, Y+13	; 0x0d
    2246:	9e 85       	ldd	r25, Y+14	; 0x0e
    2248:	82 0f       	add	r24, r18
    224a:	93 1f       	adc	r25, r19

}
    224c:	2e 96       	adiw	r28, 0x0e	; 14
    224e:	0f b6       	in	r0, 0x3f	; 63
    2250:	f8 94       	cli
    2252:	de bf       	out	0x3e, r29	; 62
    2254:	0f be       	out	0x3f, r0	; 63
    2256:	cd bf       	out	0x3d, r28	; 61
    2258:	cf 91       	pop	r28
    225a:	df 91       	pop	r29
    225c:	1f 91       	pop	r17
    225e:	0f 91       	pop	r16
    2260:	08 95       	ret

00002262 <LCD_voidWriteIntData>:

void LCD_voidWriteIntData(s32 Data){
    2262:	df 93       	push	r29
    2264:	cf 93       	push	r28
    2266:	cd b7       	in	r28, 0x3d	; 61
    2268:	de b7       	in	r29, 0x3e	; 62
    226a:	6a 97       	sbiw	r28, 0x1a	; 26
    226c:	0f b6       	in	r0, 0x3f	; 63
    226e:	f8 94       	cli
    2270:	de bf       	out	0x3e, r29	; 62
    2272:	0f be       	out	0x3f, r0	; 63
    2274:	cd bf       	out	0x3d, r28	; 61
    2276:	6f 8b       	std	Y+23, r22	; 0x17
    2278:	78 8f       	std	Y+24, r23	; 0x18
    227a:	89 8f       	std	Y+25, r24	; 0x19
    227c:	9a 8f       	std	Y+26, r25	; 0x1a
	if(Data){
    227e:	8f 89       	ldd	r24, Y+23	; 0x17
    2280:	98 8d       	ldd	r25, Y+24	; 0x18
    2282:	a9 8d       	ldd	r26, Y+25	; 0x19
    2284:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2286:	00 97       	sbiw	r24, 0x00	; 0
    2288:	a1 05       	cpc	r26, r1
    228a:	b1 05       	cpc	r27, r1
    228c:	99 f0       	breq	.+38     	; 0x22b4 <LCD_voidWriteIntData+0x52>
		u8 arr[INT_TO_STRING_ARR_SIZE];
		u8 *str = IntToString(Data,arr);
    228e:	8f 89       	ldd	r24, Y+23	; 0x17
    2290:	98 8d       	ldd	r25, Y+24	; 0x18
    2292:	a9 8d       	ldd	r26, Y+25	; 0x19
    2294:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2296:	9e 01       	movw	r18, r28
    2298:	2d 5f       	subi	r18, 0xFD	; 253
    229a:	3f 4f       	sbci	r19, 0xFF	; 255
    229c:	bc 01       	movw	r22, r24
    229e:	cd 01       	movw	r24, r26
    22a0:	a9 01       	movw	r20, r18
    22a2:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <IntToString>
    22a6:	9a 83       	std	Y+2, r25	; 0x02
    22a8:	89 83       	std	Y+1, r24	; 0x01
		LCD_voidWriteString(str);
    22aa:	89 81       	ldd	r24, Y+1	; 0x01
    22ac:	9a 81       	ldd	r25, Y+2	; 0x02
    22ae:	0e 94 43 10 	call	0x2086	; 0x2086 <LCD_voidWriteString>
    22b2:	03 c0       	rjmp	.+6      	; 0x22ba <LCD_voidWriteIntData+0x58>
	}
	else{
		LCD_voidWriteChar('0');
    22b4:	80 e3       	ldi	r24, 0x30	; 48
    22b6:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <LCD_voidWriteChar>
	}
}
    22ba:	6a 96       	adiw	r28, 0x1a	; 26
    22bc:	0f b6       	in	r0, 0x3f	; 63
    22be:	f8 94       	cli
    22c0:	de bf       	out	0x3e, r29	; 62
    22c2:	0f be       	out	0x3f, r0	; 63
    22c4:	cd bf       	out	0x3d, r28	; 61
    22c6:	cf 91       	pop	r28
    22c8:	df 91       	pop	r29
    22ca:	08 95       	ret

000022cc <LCD_voidWriteFloatData>:

void LCD_voidWriteFloatData(f32 Data){
    22cc:	df 93       	push	r29
    22ce:	cf 93       	push	r28
    22d0:	cd b7       	in	r28, 0x3d	; 61
    22d2:	de b7       	in	r29, 0x3e	; 62
    22d4:	a6 97       	sbiw	r28, 0x26	; 38
    22d6:	0f b6       	in	r0, 0x3f	; 63
    22d8:	f8 94       	cli
    22da:	de bf       	out	0x3e, r29	; 62
    22dc:	0f be       	out	0x3f, r0	; 63
    22de:	cd bf       	out	0x3d, r28	; 61
    22e0:	6b a3       	std	Y+35, r22	; 0x23
    22e2:	7c a3       	std	Y+36, r23	; 0x24
    22e4:	8d a3       	std	Y+37, r24	; 0x25
    22e6:	9e a3       	std	Y+38, r25	; 0x26
	u8 arr[INT_TO_STRING_ARR_SIZE];
	s32 number = (s32) (Data * 100);
    22e8:	6b a1       	ldd	r22, Y+35	; 0x23
    22ea:	7c a1       	ldd	r23, Y+36	; 0x24
    22ec:	8d a1       	ldd	r24, Y+37	; 0x25
    22ee:	9e a1       	ldd	r25, Y+38	; 0x26
    22f0:	20 e0       	ldi	r18, 0x00	; 0
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	48 ec       	ldi	r20, 0xC8	; 200
    22f6:	52 e4       	ldi	r21, 0x42	; 66
    22f8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22fc:	dc 01       	movw	r26, r24
    22fe:	cb 01       	movw	r24, r22
    2300:	bc 01       	movw	r22, r24
    2302:	cd 01       	movw	r24, r26
    2304:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
    2308:	dc 01       	movw	r26, r24
    230a:	cb 01       	movw	r24, r22
    230c:	8b 87       	std	Y+11, r24	; 0x0b
    230e:	9c 87       	std	Y+12, r25	; 0x0c
    2310:	ad 87       	std	Y+13, r26	; 0x0d
    2312:	be 87       	std	Y+14, r27	; 0x0e
	u8 *str = IntToString(number,arr);
    2314:	8b 85       	ldd	r24, Y+11	; 0x0b
    2316:	9c 85       	ldd	r25, Y+12	; 0x0c
    2318:	ad 85       	ldd	r26, Y+13	; 0x0d
    231a:	be 85       	ldd	r27, Y+14	; 0x0e
    231c:	9e 01       	movw	r18, r28
    231e:	21 5f       	subi	r18, 0xF1	; 241
    2320:	3f 4f       	sbci	r19, 0xFF	; 255
    2322:	bc 01       	movw	r22, r24
    2324:	cd 01       	movw	r24, r26
    2326:	a9 01       	movw	r20, r18
    2328:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <IntToString>
    232c:	9a 87       	std	Y+10, r25	; 0x0a
    232e:	89 87       	std	Y+9, r24	; 0x09
	u32 counter=0;
    2330:	1d 82       	std	Y+5, r1	; 0x05
    2332:	1e 82       	std	Y+6, r1	; 0x06
    2334:	1f 82       	std	Y+7, r1	; 0x07
    2336:	18 86       	std	Y+8, r1	; 0x08
	u32 counter2=0;
    2338:	19 82       	std	Y+1, r1	; 0x01
    233a:	1a 82       	std	Y+2, r1	; 0x02
    233c:	1b 82       	std	Y+3, r1	; 0x03
    233e:	1c 82       	std	Y+4, r1	; 0x04
    2340:	0b c0       	rjmp	.+22     	; 0x2358 <LCD_voidWriteFloatData+0x8c>
	while(str[counter] != '\0'){
		counter++;
    2342:	8d 81       	ldd	r24, Y+5	; 0x05
    2344:	9e 81       	ldd	r25, Y+6	; 0x06
    2346:	af 81       	ldd	r26, Y+7	; 0x07
    2348:	b8 85       	ldd	r27, Y+8	; 0x08
    234a:	01 96       	adiw	r24, 0x01	; 1
    234c:	a1 1d       	adc	r26, r1
    234e:	b1 1d       	adc	r27, r1
    2350:	8d 83       	std	Y+5, r24	; 0x05
    2352:	9e 83       	std	Y+6, r25	; 0x06
    2354:	af 83       	std	Y+7, r26	; 0x07
    2356:	b8 87       	std	Y+8, r27	; 0x08
	u8 arr[INT_TO_STRING_ARR_SIZE];
	s32 number = (s32) (Data * 100);
	u8 *str = IntToString(number,arr);
	u32 counter=0;
	u32 counter2=0;
	while(str[counter] != '\0'){
    2358:	2d 81       	ldd	r18, Y+5	; 0x05
    235a:	3e 81       	ldd	r19, Y+6	; 0x06
    235c:	89 85       	ldd	r24, Y+9	; 0x09
    235e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2360:	fc 01       	movw	r30, r24
    2362:	e2 0f       	add	r30, r18
    2364:	f3 1f       	adc	r31, r19
    2366:	80 81       	ld	r24, Z
    2368:	88 23       	and	r24, r24
    236a:	59 f7       	brne	.-42     	; 0x2342 <LCD_voidWriteFloatData+0x76>
		counter++;
	}
	counter -= 2;
    236c:	8d 81       	ldd	r24, Y+5	; 0x05
    236e:	9e 81       	ldd	r25, Y+6	; 0x06
    2370:	af 81       	ldd	r26, Y+7	; 0x07
    2372:	b8 85       	ldd	r27, Y+8	; 0x08
    2374:	02 97       	sbiw	r24, 0x02	; 2
    2376:	a1 09       	sbc	r26, r1
    2378:	b1 09       	sbc	r27, r1
    237a:	8d 83       	std	Y+5, r24	; 0x05
    237c:	9e 83       	std	Y+6, r25	; 0x06
    237e:	af 83       	std	Y+7, r26	; 0x07
    2380:	b8 87       	std	Y+8, r27	; 0x08
	if(!counter){
    2382:	8d 81       	ldd	r24, Y+5	; 0x05
    2384:	9e 81       	ldd	r25, Y+6	; 0x06
    2386:	af 81       	ldd	r26, Y+7	; 0x07
    2388:	b8 85       	ldd	r27, Y+8	; 0x08
    238a:	00 97       	sbiw	r24, 0x00	; 0
    238c:	a1 05       	cpc	r26, r1
    238e:	b1 05       	cpc	r27, r1
    2390:	49 f5       	brne	.+82     	; 0x23e4 <LCD_voidWriteFloatData+0x118>
		LCD_voidWriteChar('0');
    2392:	80 e3       	ldi	r24, 0x30	; 48
    2394:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <LCD_voidWriteChar>
    2398:	25 c0       	rjmp	.+74     	; 0x23e4 <LCD_voidWriteFloatData+0x118>
	}
	while(str[counter2] != '\0'){
		if(counter2 == counter){
    239a:	29 81       	ldd	r18, Y+1	; 0x01
    239c:	3a 81       	ldd	r19, Y+2	; 0x02
    239e:	4b 81       	ldd	r20, Y+3	; 0x03
    23a0:	5c 81       	ldd	r21, Y+4	; 0x04
    23a2:	8d 81       	ldd	r24, Y+5	; 0x05
    23a4:	9e 81       	ldd	r25, Y+6	; 0x06
    23a6:	af 81       	ldd	r26, Y+7	; 0x07
    23a8:	b8 85       	ldd	r27, Y+8	; 0x08
    23aa:	28 17       	cp	r18, r24
    23ac:	39 07       	cpc	r19, r25
    23ae:	4a 07       	cpc	r20, r26
    23b0:	5b 07       	cpc	r21, r27
    23b2:	19 f4       	brne	.+6      	; 0x23ba <LCD_voidWriteFloatData+0xee>
			LCD_voidWriteChar('.');
    23b4:	8e e2       	ldi	r24, 0x2E	; 46
    23b6:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <LCD_voidWriteChar>
		}
		LCD_voidWriteChar(str[counter2]);
    23ba:	29 81       	ldd	r18, Y+1	; 0x01
    23bc:	3a 81       	ldd	r19, Y+2	; 0x02
    23be:	89 85       	ldd	r24, Y+9	; 0x09
    23c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    23c2:	fc 01       	movw	r30, r24
    23c4:	e2 0f       	add	r30, r18
    23c6:	f3 1f       	adc	r31, r19
    23c8:	80 81       	ld	r24, Z
    23ca:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <LCD_voidWriteChar>
		counter2++;
    23ce:	89 81       	ldd	r24, Y+1	; 0x01
    23d0:	9a 81       	ldd	r25, Y+2	; 0x02
    23d2:	ab 81       	ldd	r26, Y+3	; 0x03
    23d4:	bc 81       	ldd	r27, Y+4	; 0x04
    23d6:	01 96       	adiw	r24, 0x01	; 1
    23d8:	a1 1d       	adc	r26, r1
    23da:	b1 1d       	adc	r27, r1
    23dc:	89 83       	std	Y+1, r24	; 0x01
    23de:	9a 83       	std	Y+2, r25	; 0x02
    23e0:	ab 83       	std	Y+3, r26	; 0x03
    23e2:	bc 83       	std	Y+4, r27	; 0x04
	}
	counter -= 2;
	if(!counter){
		LCD_voidWriteChar('0');
	}
	while(str[counter2] != '\0'){
    23e4:	29 81       	ldd	r18, Y+1	; 0x01
    23e6:	3a 81       	ldd	r19, Y+2	; 0x02
    23e8:	89 85       	ldd	r24, Y+9	; 0x09
    23ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ec:	fc 01       	movw	r30, r24
    23ee:	e2 0f       	add	r30, r18
    23f0:	f3 1f       	adc	r31, r19
    23f2:	80 81       	ld	r24, Z
    23f4:	88 23       	and	r24, r24
    23f6:	89 f6       	brne	.-94     	; 0x239a <LCD_voidWriteFloatData+0xce>
			LCD_voidWriteChar('.');
		}
		LCD_voidWriteChar(str[counter2]);
		counter2++;
	}
}
    23f8:	a6 96       	adiw	r28, 0x26	; 38
    23fa:	0f b6       	in	r0, 0x3f	; 63
    23fc:	f8 94       	cli
    23fe:	de bf       	out	0x3e, r29	; 62
    2400:	0f be       	out	0x3f, r0	; 63
    2402:	cd bf       	out	0x3d, r28	; 61
    2404:	cf 91       	pop	r28
    2406:	df 91       	pop	r29
    2408:	08 95       	ret

0000240a <LCD_voidGoToPosition>:

void LCD_voidGoToPosition(u8 X_Position, u8 Y_Position){
    240a:	df 93       	push	r29
    240c:	cf 93       	push	r28
    240e:	00 d0       	rcall	.+0      	; 0x2410 <LCD_voidGoToPosition+0x6>
    2410:	0f 92       	push	r0
    2412:	cd b7       	in	r28, 0x3d	; 61
    2414:	de b7       	in	r29, 0x3e	; 62
    2416:	8a 83       	std	Y+2, r24	; 0x02
    2418:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_Address = FIRST_LINE_ADDRESS;
    241a:	80 e8       	ldi	r24, 0x80	; 128
    241c:	89 83       	std	Y+1, r24	; 0x01

	if(X_Position == 0){
    241e:	8a 81       	ldd	r24, Y+2	; 0x02
    2420:	88 23       	and	r24, r24
    2422:	21 f4       	brne	.+8      	; 0x242c <LCD_voidGoToPosition+0x22>
		Local_Address = FIRST_LINE_ADDRESS + Y_Position;
    2424:	8b 81       	ldd	r24, Y+3	; 0x03
    2426:	80 58       	subi	r24, 0x80	; 128
    2428:	89 83       	std	Y+1, r24	; 0x01
    242a:	14 c0       	rjmp	.+40     	; 0x2454 <LCD_voidGoToPosition+0x4a>
	}
	else if(X_Position == 1){
    242c:	8a 81       	ldd	r24, Y+2	; 0x02
    242e:	81 30       	cpi	r24, 0x01	; 1
    2430:	21 f4       	brne	.+8      	; 0x243a <LCD_voidGoToPosition+0x30>
		Local_Address = SECOND_LINE_ADDRESS + Y_Position;
    2432:	8b 81       	ldd	r24, Y+3	; 0x03
    2434:	80 54       	subi	r24, 0x40	; 64
    2436:	89 83       	std	Y+1, r24	; 0x01
    2438:	0d c0       	rjmp	.+26     	; 0x2454 <LCD_voidGoToPosition+0x4a>
	}
	else if(X_Position == 2){
    243a:	8a 81       	ldd	r24, Y+2	; 0x02
    243c:	82 30       	cpi	r24, 0x02	; 2
    243e:	21 f4       	brne	.+8      	; 0x2448 <LCD_voidGoToPosition+0x3e>
		Local_Address = THIRD_LINE_ADDRESS + Y_Position;
    2440:	8b 81       	ldd	r24, Y+3	; 0x03
    2442:	8c 56       	subi	r24, 0x6C	; 108
    2444:	89 83       	std	Y+1, r24	; 0x01
    2446:	06 c0       	rjmp	.+12     	; 0x2454 <LCD_voidGoToPosition+0x4a>
	}
	else if(X_Position == 3){
    2448:	8a 81       	ldd	r24, Y+2	; 0x02
    244a:	83 30       	cpi	r24, 0x03	; 3
    244c:	19 f4       	brne	.+6      	; 0x2454 <LCD_voidGoToPosition+0x4a>
		Local_Address = FOURTH_LINE_ADDRESS + Y_Position;
    244e:	8b 81       	ldd	r24, Y+3	; 0x03
    2450:	8c 52       	subi	r24, 0x2C	; 44
    2452:	89 83       	std	Y+1, r24	; 0x01
	}

	Set_Bit(Local_Address,7); /*You can also just OR / add with 0x80 (128) to set the the MSB*/
    2454:	89 81       	ldd	r24, Y+1	; 0x01
    2456:	80 68       	ori	r24, 0x80	; 128
    2458:	89 83       	std	Y+1, r24	; 0x01
	LCD_voidSendCommand(Local_Address);
    245a:	89 81       	ldd	r24, Y+1	; 0x01
    245c:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <LCD_voidSendCommand>
}
    2460:	0f 90       	pop	r0
    2462:	0f 90       	pop	r0
    2464:	0f 90       	pop	r0
    2466:	cf 91       	pop	r28
    2468:	df 91       	pop	r29
    246a:	08 95       	ret

0000246c <LCD_voidDisplaySpecialChar>:

void LCD_voidDisplaySpecialChar(u8 *char_ptr,u8 CGRam_index,u8 row,u8 column){
    246c:	df 93       	push	r29
    246e:	cf 93       	push	r28
    2470:	cd b7       	in	r28, 0x3d	; 61
    2472:	de b7       	in	r29, 0x3e	; 62
    2474:	27 97       	sbiw	r28, 0x07	; 7
    2476:	0f b6       	in	r0, 0x3f	; 63
    2478:	f8 94       	cli
    247a:	de bf       	out	0x3e, r29	; 62
    247c:	0f be       	out	0x3f, r0	; 63
    247e:	cd bf       	out	0x3d, r28	; 61
    2480:	9c 83       	std	Y+4, r25	; 0x04
    2482:	8b 83       	std	Y+3, r24	; 0x03
    2484:	6d 83       	std	Y+5, r22	; 0x05
    2486:	4e 83       	std	Y+6, r20	; 0x06
    2488:	2f 83       	std	Y+7, r18	; 0x07

	LCD_voidGoToPosition(row,column);
    248a:	8e 81       	ldd	r24, Y+6	; 0x06
    248c:	6f 81       	ldd	r22, Y+7	; 0x07
    248e:	0e 94 05 12 	call	0x240a	; 0x240a <LCD_voidGoToPosition>
	LCD_voidWriteChar(CGRam_index);
    2492:	8d 81       	ldd	r24, Y+5	; 0x05
    2494:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <LCD_voidWriteChar>
	u8 address = 0;
    2498:	1a 82       	std	Y+2, r1	; 0x02
	u8 index = 0;
    249a:	19 82       	std	Y+1, r1	; 0x01
	if(CGRam_index < 8){
    249c:	8d 81       	ldd	r24, Y+5	; 0x05
    249e:	88 30       	cpi	r24, 0x08	; 8
    24a0:	30 f5       	brcc	.+76     	; 0x24ee <LCD_voidDisplaySpecialChar+0x82>
		address = CGRam_index * 8;
    24a2:	8d 81       	ldd	r24, Y+5	; 0x05
    24a4:	88 2f       	mov	r24, r24
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	88 0f       	add	r24, r24
    24aa:	99 1f       	adc	r25, r25
    24ac:	88 0f       	add	r24, r24
    24ae:	99 1f       	adc	r25, r25
    24b0:	88 0f       	add	r24, r24
    24b2:	99 1f       	adc	r25, r25
    24b4:	8a 83       	std	Y+2, r24	; 0x02
		Set_Bit(address,6);
    24b6:	8a 81       	ldd	r24, Y+2	; 0x02
    24b8:	80 64       	ori	r24, 0x40	; 64
    24ba:	8a 83       	std	Y+2, r24	; 0x02
		Clear_Bit(address,7);
    24bc:	8a 81       	ldd	r24, Y+2	; 0x02
    24be:	8f 77       	andi	r24, 0x7F	; 127
    24c0:	8a 83       	std	Y+2, r24	; 0x02
		LCD_voidSendCommand(address);
    24c2:	8a 81       	ldd	r24, Y+2	; 0x02
    24c4:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <LCD_voidSendCommand>
		for(index = 0; index < 8; index++){
    24c8:	19 82       	std	Y+1, r1	; 0x01
    24ca:	0e c0       	rjmp	.+28     	; 0x24e8 <LCD_voidDisplaySpecialChar+0x7c>
			LCD_voidWriteChar(char_ptr[index]);
    24cc:	89 81       	ldd	r24, Y+1	; 0x01
    24ce:	28 2f       	mov	r18, r24
    24d0:	30 e0       	ldi	r19, 0x00	; 0
    24d2:	8b 81       	ldd	r24, Y+3	; 0x03
    24d4:	9c 81       	ldd	r25, Y+4	; 0x04
    24d6:	fc 01       	movw	r30, r24
    24d8:	e2 0f       	add	r30, r18
    24da:	f3 1f       	adc	r31, r19
    24dc:	80 81       	ld	r24, Z
    24de:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <LCD_voidWriteChar>
	if(CGRam_index < 8){
		address = CGRam_index * 8;
		Set_Bit(address,6);
		Clear_Bit(address,7);
		LCD_voidSendCommand(address);
		for(index = 0; index < 8; index++){
    24e2:	89 81       	ldd	r24, Y+1	; 0x01
    24e4:	8f 5f       	subi	r24, 0xFF	; 255
    24e6:	89 83       	std	Y+1, r24	; 0x01
    24e8:	89 81       	ldd	r24, Y+1	; 0x01
    24ea:	88 30       	cpi	r24, 0x08	; 8
    24ec:	78 f3       	brcs	.-34     	; 0x24cc <LCD_voidDisplaySpecialChar+0x60>
			LCD_voidWriteChar(char_ptr[index]);
		}
	}
	LCD_voidSendCommand(LCD_ReturnHome);
    24ee:	82 e0       	ldi	r24, 0x02	; 2
    24f0:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <LCD_voidSendCommand>
}
    24f4:	27 96       	adiw	r28, 0x07	; 7
    24f6:	0f b6       	in	r0, 0x3f	; 63
    24f8:	f8 94       	cli
    24fa:	de bf       	out	0x3e, r29	; 62
    24fc:	0f be       	out	0x3f, r0	; 63
    24fe:	cd bf       	out	0x3d, r28	; 61
    2500:	cf 91       	pop	r28
    2502:	df 91       	pop	r29
    2504:	08 95       	ret

00002506 <KPD_u8GetPressedKey>:
#include "KPD_Private.h"



u8 KPD_u8GetPressedKey(void)
{
    2506:	df 93       	push	r29
    2508:	cf 93       	push	r28
    250a:	00 d0       	rcall	.+0      	; 0x250c <KPD_u8GetPressedKey+0x6>
    250c:	00 d0       	rcall	.+0      	; 0x250e <KPD_u8GetPressedKey+0x8>
    250e:	0f 92       	push	r0
    2510:	cd b7       	in	r28, 0x3d	; 61
    2512:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8PressedKey = KPD_NO_PRESSED_KEY;
    2514:	8f ef       	ldi	r24, 0xFF	; 255
    2516:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8ColumnIdx, Local_u8RowIdx, Local_u8PinState = 0;
    2518:	1c 82       	std	Y+4, r1	; 0x04
			KPD_ROW_PIN1,
			KPD_ROW_PIN2,
			KPD_ROW_PIN3
	};

	for(Local_u8ColumnIdx = 0; Local_u8ColumnIdx < COLM_NUM; Local_u8ColumnIdx++)
    251a:	1a 82       	std	Y+2, r1	; 0x02
    251c:	5e c0       	rjmp	.+188    	; 0x25da <KPD_u8GetPressedKey+0xd4>
	{
		// Activate current column
		DIO_u8SetPinValue(KPD_PORT, Local_u8KPDColmArr[Local_u8ColumnIdx], DIO_u8PIN_LOW);
    251e:	8a 81       	ldd	r24, Y+2	; 0x02
    2520:	88 2f       	mov	r24, r24
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	fc 01       	movw	r30, r24
    2526:	ea 57       	subi	r30, 0x7A	; 122
    2528:	ff 4f       	sbci	r31, 0xFF	; 255
    252a:	90 81       	ld	r25, Z
    252c:	80 e0       	ldi	r24, 0x00	; 0
    252e:	69 2f       	mov	r22, r25
    2530:	40 e0       	ldi	r20, 0x00	; 0
    2532:	0e 94 be 05 	call	0xb7c	; 0xb7c <DIO_u8SetPinValue>

		for(Local_u8RowIdx = 0; Local_u8RowIdx < ROW_NUM; Local_u8RowIdx++)
    2536:	19 82       	std	Y+1, r1	; 0x01
    2538:	3d c0       	rjmp	.+122    	; 0x25b4 <KPD_u8GetPressedKey+0xae>
		{
			// Get Current Row
			DIO_GetPinValue(KPD_PORT, Local_u8KPDRowArr[Local_u8RowIdx], &Local_u8PinState);
    253a:	89 81       	ldd	r24, Y+1	; 0x01
    253c:	88 2f       	mov	r24, r24
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	fc 01       	movw	r30, r24
    2542:	ee 57       	subi	r30, 0x7E	; 126
    2544:	ff 4f       	sbci	r31, 0xFF	; 255
    2546:	90 81       	ld	r25, Z
    2548:	9e 01       	movw	r18, r28
    254a:	2c 5f       	subi	r18, 0xFC	; 252
    254c:	3f 4f       	sbci	r19, 0xFF	; 255
    254e:	80 e0       	ldi	r24, 0x00	; 0
    2550:	69 2f       	mov	r22, r25
    2552:	a9 01       	movw	r20, r18
    2554:	0e 94 07 07 	call	0xe0e	; 0xe0e <DIO_GetPinValue>

			// Check pressed
			if( DIO_u8PIN_LOW == Local_u8PinState )
    2558:	8c 81       	ldd	r24, Y+4	; 0x04
    255a:	88 23       	and	r24, r24
    255c:	41 f5       	brne	.+80     	; 0x25ae <KPD_u8GetPressedKey+0xa8>
			{
				Local_u8PressedKey = Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];
    255e:	89 81       	ldd	r24, Y+1	; 0x01
    2560:	48 2f       	mov	r20, r24
    2562:	50 e0       	ldi	r21, 0x00	; 0
    2564:	8a 81       	ldd	r24, Y+2	; 0x02
    2566:	28 2f       	mov	r18, r24
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	ca 01       	movw	r24, r20
    256c:	88 0f       	add	r24, r24
    256e:	99 1f       	adc	r25, r25
    2570:	88 0f       	add	r24, r24
    2572:	99 1f       	adc	r25, r25
    2574:	82 0f       	add	r24, r18
    2576:	93 1f       	adc	r25, r19
    2578:	fc 01       	movw	r30, r24
    257a:	e6 57       	subi	r30, 0x76	; 118
    257c:	ff 4f       	sbci	r31, 0xFF	; 255
    257e:	80 81       	ld	r24, Z
    2580:	8b 83       	std	Y+3, r24	; 0x03
    2582:	0f c0       	rjmp	.+30     	; 0x25a2 <KPD_u8GetPressedKey+0x9c>

				// Busy waiting until released
				while( DIO_u8PIN_LOW == Local_u8PinState )
				{
					DIO_GetPinValue(KPD_PORT, Local_u8KPDRowArr[Local_u8RowIdx], &Local_u8PinState);
    2584:	89 81       	ldd	r24, Y+1	; 0x01
    2586:	88 2f       	mov	r24, r24
    2588:	90 e0       	ldi	r25, 0x00	; 0
    258a:	fc 01       	movw	r30, r24
    258c:	ee 57       	subi	r30, 0x7E	; 126
    258e:	ff 4f       	sbci	r31, 0xFF	; 255
    2590:	90 81       	ld	r25, Z
    2592:	9e 01       	movw	r18, r28
    2594:	2c 5f       	subi	r18, 0xFC	; 252
    2596:	3f 4f       	sbci	r19, 0xFF	; 255
    2598:	80 e0       	ldi	r24, 0x00	; 0
    259a:	69 2f       	mov	r22, r25
    259c:	a9 01       	movw	r20, r18
    259e:	0e 94 07 07 	call	0xe0e	; 0xe0e <DIO_GetPinValue>
			if( DIO_u8PIN_LOW == Local_u8PinState )
			{
				Local_u8PressedKey = Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];

				// Busy waiting until released
				while( DIO_u8PIN_LOW == Local_u8PinState )
    25a2:	8c 81       	ldd	r24, Y+4	; 0x04
    25a4:	88 23       	and	r24, r24
    25a6:	71 f3       	breq	.-36     	; 0x2584 <KPD_u8GetPressedKey+0x7e>
				{
					DIO_GetPinValue(KPD_PORT, Local_u8KPDRowArr[Local_u8RowIdx], &Local_u8PinState);
				}
				return Local_u8PressedKey;
    25a8:	8b 81       	ldd	r24, Y+3	; 0x03
    25aa:	8d 83       	std	Y+5, r24	; 0x05
    25ac:	1c c0       	rjmp	.+56     	; 0x25e6 <KPD_u8GetPressedKey+0xe0>
	for(Local_u8ColumnIdx = 0; Local_u8ColumnIdx < COLM_NUM; Local_u8ColumnIdx++)
	{
		// Activate current column
		DIO_u8SetPinValue(KPD_PORT, Local_u8KPDColmArr[Local_u8ColumnIdx], DIO_u8PIN_LOW);

		for(Local_u8RowIdx = 0; Local_u8RowIdx < ROW_NUM; Local_u8RowIdx++)
    25ae:	89 81       	ldd	r24, Y+1	; 0x01
    25b0:	8f 5f       	subi	r24, 0xFF	; 255
    25b2:	89 83       	std	Y+1, r24	; 0x01
    25b4:	89 81       	ldd	r24, Y+1	; 0x01
    25b6:	84 30       	cpi	r24, 0x04	; 4
    25b8:	08 f4       	brcc	.+2      	; 0x25bc <KPD_u8GetPressedKey+0xb6>
    25ba:	bf cf       	rjmp	.-130    	; 0x253a <KPD_u8GetPressedKey+0x34>
				return Local_u8PressedKey;
			}

		}
		// Deactivate current Column
		DIO_u8SetPinValue(KPD_PORT, Local_u8KPDColmArr[Local_u8ColumnIdx], DIO_u8PIN_HIGH);
    25bc:	8a 81       	ldd	r24, Y+2	; 0x02
    25be:	88 2f       	mov	r24, r24
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	fc 01       	movw	r30, r24
    25c4:	ea 57       	subi	r30, 0x7A	; 122
    25c6:	ff 4f       	sbci	r31, 0xFF	; 255
    25c8:	90 81       	ld	r25, Z
    25ca:	80 e0       	ldi	r24, 0x00	; 0
    25cc:	69 2f       	mov	r22, r25
    25ce:	41 e0       	ldi	r20, 0x01	; 1
    25d0:	0e 94 be 05 	call	0xb7c	; 0xb7c <DIO_u8SetPinValue>
			KPD_ROW_PIN1,
			KPD_ROW_PIN2,
			KPD_ROW_PIN3
	};

	for(Local_u8ColumnIdx = 0; Local_u8ColumnIdx < COLM_NUM; Local_u8ColumnIdx++)
    25d4:	8a 81       	ldd	r24, Y+2	; 0x02
    25d6:	8f 5f       	subi	r24, 0xFF	; 255
    25d8:	8a 83       	std	Y+2, r24	; 0x02
    25da:	8a 81       	ldd	r24, Y+2	; 0x02
    25dc:	84 30       	cpi	r24, 0x04	; 4
    25de:	08 f4       	brcc	.+2      	; 0x25e2 <KPD_u8GetPressedKey+0xdc>
    25e0:	9e cf       	rjmp	.-196    	; 0x251e <KPD_u8GetPressedKey+0x18>
		}
		// Deactivate current Column
		DIO_u8SetPinValue(KPD_PORT, Local_u8KPDColmArr[Local_u8ColumnIdx], DIO_u8PIN_HIGH);

	}
	return Local_u8PressedKey;
    25e2:	8b 81       	ldd	r24, Y+3	; 0x03
    25e4:	8d 83       	std	Y+5, r24	; 0x05
    25e6:	8d 81       	ldd	r24, Y+5	; 0x05
}
    25e8:	0f 90       	pop	r0
    25ea:	0f 90       	pop	r0
    25ec:	0f 90       	pop	r0
    25ee:	0f 90       	pop	r0
    25f0:	0f 90       	pop	r0
    25f2:	cf 91       	pop	r28
    25f4:	df 91       	pop	r29
    25f6:	08 95       	ret

000025f8 <MoveBall>:


u8 Pad1x = 1, Pad2x= 1, Ballx = 1, Bally = (0x80 + 10);

void MoveBall()
{
    25f8:	df 93       	push	r29
    25fa:	cf 93       	push	r28
    25fc:	00 d0       	rcall	.+0      	; 0x25fe <MoveBall+0x6>
    25fe:	cd b7       	in	r28, 0x3d	; 61
    2600:	de b7       	in	r29, 0x3e	; 62
	u8 PressedButton = 1;
    2602:	81 e0       	ldi	r24, 0x01	; 1
    2604:	89 83       	std	Y+1, r24	; 0x01
	u8 ReadValue;
	DIO_GetPinValue(DIO_u8PORTD, DIO_u8PIN_5,&ReadValue);
    2606:	9e 01       	movw	r18, r28
    2608:	2e 5f       	subi	r18, 0xFE	; 254
    260a:	3f 4f       	sbci	r19, 0xFF	; 255
    260c:	83 e0       	ldi	r24, 0x03	; 3
    260e:	65 e0       	ldi	r22, 0x05	; 5
    2610:	a9 01       	movw	r20, r18
    2612:	0e 94 07 07 	call	0xe0e	; 0xe0e <DIO_GetPinValue>
    2616:	18 c0       	rjmp	.+48     	; 0x2648 <MoveBall+0x50>

	while(  0 == ReadValue )
	{
		DIO_GetPinValue(DIO_u8PORTD, DIO_u8PIN_5,&ReadValue);
    2618:	9e 01       	movw	r18, r28
    261a:	2e 5f       	subi	r18, 0xFE	; 254
    261c:	3f 4f       	sbci	r19, 0xFF	; 255
    261e:	83 e0       	ldi	r24, 0x03	; 3
    2620:	65 e0       	ldi	r22, 0x05	; 5
    2622:	a9 01       	movw	r20, r18
    2624:	0e 94 07 07 	call	0xe0e	; 0xe0e <DIO_GetPinValue>

		if( PressedButton == 1 )
    2628:	89 81       	ldd	r24, Y+1	; 0x01
    262a:	81 30       	cpi	r24, 0x01	; 1
    262c:	69 f4       	brne	.+26     	; 0x2648 <MoveBall+0x50>
		{
			Ballx++;
    262e:	80 91 9c 00 	lds	r24, 0x009C
    2632:	8f 5f       	subi	r24, 0xFF	; 255
    2634:	80 93 9c 00 	sts	0x009C, r24
			PressedButton = 0;
    2638:	19 82       	std	Y+1, r1	; 0x01
			if (Ballx > 3)
    263a:	80 91 9c 00 	lds	r24, 0x009C
    263e:	84 30       	cpi	r24, 0x04	; 4
    2640:	18 f0       	brcs	.+6      	; 0x2648 <MoveBall+0x50>
			{
				Ballx=1;
    2642:	81 e0       	ldi	r24, 0x01	; 1
    2644:	80 93 9c 00 	sts	0x009C, r24
{
	u8 PressedButton = 1;
	u8 ReadValue;
	DIO_GetPinValue(DIO_u8PORTD, DIO_u8PIN_5,&ReadValue);

	while(  0 == ReadValue )
    2648:	8a 81       	ldd	r24, Y+2	; 0x02
    264a:	88 23       	and	r24, r24
    264c:	29 f3       	breq	.-54     	; 0x2618 <MoveBall+0x20>
				Ballx=1;
			}
		}
	}

}
    264e:	0f 90       	pop	r0
    2650:	0f 90       	pop	r0
    2652:	cf 91       	pop	r28
    2654:	df 91       	pop	r29
    2656:	08 95       	ret

00002658 <MovePad>:
void MovePad()
{
    2658:	df 93       	push	r29
    265a:	cf 93       	push	r28
    265c:	00 d0       	rcall	.+0      	; 0x265e <MovePad+0x6>
    265e:	cd b7       	in	r28, 0x3d	; 61
    2660:	de b7       	in	r29, 0x3e	; 62

	u8 PressedButton = 1;
    2662:	81 e0       	ldi	r24, 0x01	; 1
    2664:	89 83       	std	Y+1, r24	; 0x01
	u8 ReadValue;
	DIO_GetPinValue(DIO_u8PORTD, DIO_u8PIN_7,&ReadValue);
    2666:	9e 01       	movw	r18, r28
    2668:	2e 5f       	subi	r18, 0xFE	; 254
    266a:	3f 4f       	sbci	r19, 0xFF	; 255
    266c:	83 e0       	ldi	r24, 0x03	; 3
    266e:	67 e0       	ldi	r22, 0x07	; 7
    2670:	a9 01       	movw	r20, r18
    2672:	0e 94 07 07 	call	0xe0e	; 0xe0e <DIO_GetPinValue>
    2676:	18 c0       	rjmp	.+48     	; 0x26a8 <MovePad+0x50>

	while(  0 == ReadValue )
	{
		DIO_GetPinValue(DIO_u8PORTD, DIO_u8PIN_7,&ReadValue);
    2678:	9e 01       	movw	r18, r28
    267a:	2e 5f       	subi	r18, 0xFE	; 254
    267c:	3f 4f       	sbci	r19, 0xFF	; 255
    267e:	83 e0       	ldi	r24, 0x03	; 3
    2680:	67 e0       	ldi	r22, 0x07	; 7
    2682:	a9 01       	movw	r20, r18
    2684:	0e 94 07 07 	call	0xe0e	; 0xe0e <DIO_GetPinValue>

		if( PressedButton == 1 )
    2688:	89 81       	ldd	r24, Y+1	; 0x01
    268a:	81 30       	cpi	r24, 0x01	; 1
    268c:	69 f4       	brne	.+26     	; 0x26a8 <MovePad+0x50>
		{
			Pad1x++;
    268e:	80 91 9a 00 	lds	r24, 0x009A
    2692:	8f 5f       	subi	r24, 0xFF	; 255
    2694:	80 93 9a 00 	sts	0x009A, r24
			PressedButton = 0;
    2698:	19 82       	std	Y+1, r1	; 0x01
			if (Pad1x > 3)
    269a:	80 91 9a 00 	lds	r24, 0x009A
    269e:	84 30       	cpi	r24, 0x04	; 4
    26a0:	18 f0       	brcs	.+6      	; 0x26a8 <MovePad+0x50>
			{
				Pad1x=1;
    26a2:	81 e0       	ldi	r24, 0x01	; 1
    26a4:	80 93 9a 00 	sts	0x009A, r24

	u8 PressedButton = 1;
	u8 ReadValue;
	DIO_GetPinValue(DIO_u8PORTD, DIO_u8PIN_7,&ReadValue);

	while(  0 == ReadValue )
    26a8:	8a 81       	ldd	r24, Y+2	; 0x02
    26aa:	88 23       	and	r24, r24
    26ac:	29 f3       	breq	.-54     	; 0x2678 <MovePad+0x20>
				Pad1x=1;
			}
		}
	}

	PressedButton = 1;
    26ae:	81 e0       	ldi	r24, 0x01	; 1
    26b0:	89 83       	std	Y+1, r24	; 0x01

	DIO_GetPinValue(DIO_u8PORTD, DIO_u8PIN_6,&ReadValue);
    26b2:	9e 01       	movw	r18, r28
    26b4:	2e 5f       	subi	r18, 0xFE	; 254
    26b6:	3f 4f       	sbci	r19, 0xFF	; 255
    26b8:	83 e0       	ldi	r24, 0x03	; 3
    26ba:	66 e0       	ldi	r22, 0x06	; 6
    26bc:	a9 01       	movw	r20, r18
    26be:	0e 94 07 07 	call	0xe0e	; 0xe0e <DIO_GetPinValue>
    26c2:	18 c0       	rjmp	.+48     	; 0x26f4 <MovePad+0x9c>

	while(  0 == ReadValue )
	{
		DIO_GetPinValue(DIO_u8PORTD, DIO_u8PIN_6,&ReadValue);
    26c4:	9e 01       	movw	r18, r28
    26c6:	2e 5f       	subi	r18, 0xFE	; 254
    26c8:	3f 4f       	sbci	r19, 0xFF	; 255
    26ca:	83 e0       	ldi	r24, 0x03	; 3
    26cc:	66 e0       	ldi	r22, 0x06	; 6
    26ce:	a9 01       	movw	r20, r18
    26d0:	0e 94 07 07 	call	0xe0e	; 0xe0e <DIO_GetPinValue>

		if( PressedButton == 1 )
    26d4:	89 81       	ldd	r24, Y+1	; 0x01
    26d6:	81 30       	cpi	r24, 0x01	; 1
    26d8:	69 f4       	brne	.+26     	; 0x26f4 <MovePad+0x9c>
		{
			Pad2x++;
    26da:	80 91 9b 00 	lds	r24, 0x009B
    26de:	8f 5f       	subi	r24, 0xFF	; 255
    26e0:	80 93 9b 00 	sts	0x009B, r24
			PressedButton = 0;
    26e4:	19 82       	std	Y+1, r1	; 0x01
			if (Pad2x > 3)
    26e6:	80 91 9b 00 	lds	r24, 0x009B
    26ea:	84 30       	cpi	r24, 0x04	; 4
    26ec:	18 f0       	brcs	.+6      	; 0x26f4 <MovePad+0x9c>
			{
				Pad2x=1;
    26ee:	81 e0       	ldi	r24, 0x01	; 1
    26f0:	80 93 9b 00 	sts	0x009B, r24

	PressedButton = 1;

	DIO_GetPinValue(DIO_u8PORTD, DIO_u8PIN_6,&ReadValue);

	while(  0 == ReadValue )
    26f4:	8a 81       	ldd	r24, Y+2	; 0x02
    26f6:	88 23       	and	r24, r24
    26f8:	29 f3       	breq	.-54     	; 0x26c4 <MovePad+0x6c>
				Pad2x=1;
			}
		}
	}

}
    26fa:	0f 90       	pop	r0
    26fc:	0f 90       	pop	r0
    26fe:	cf 91       	pop	r28
    2700:	df 91       	pop	r29
    2702:	08 95       	ret

00002704 <Winner>:

void Winner()
{
    2704:	df 93       	push	r29
    2706:	cf 93       	push	r28
    2708:	cd b7       	in	r28, 0x3d	; 61
    270a:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSendCommand(LCD_ClearDisplay);
    270c:	81 e0       	ldi	r24, 0x01	; 1
    270e:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <LCD_voidSendCommand>
	LCD_voidGoToPosition(1,5);
    2712:	81 e0       	ldi	r24, 0x01	; 1
    2714:	65 e0       	ldi	r22, 0x05	; 5
    2716:	0e 94 05 12 	call	0x240a	; 0x240a <LCD_voidGoToPosition>
	LCD_voidWriteString((u8*)"Winner!!!");
    271a:	80 e6       	ldi	r24, 0x60	; 96
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	0e 94 43 10 	call	0x2086	; 0x2086 <LCD_voidWriteString>
	LCD_voidGoToPosition(2,5);
    2722:	82 e0       	ldi	r24, 0x02	; 2
    2724:	65 e0       	ldi	r22, 0x05	; 5
    2726:	0e 94 05 12 	call	0x240a	; 0x240a <LCD_voidGoToPosition>

}
    272a:	cf 91       	pop	r28
    272c:	df 91       	pop	r29
    272e:	08 95       	ret

00002730 <main>:


int main(void)
{
    2730:	df 93       	push	r29
    2732:	cf 93       	push	r28
    2734:	cd b7       	in	r28, 0x3d	; 61
    2736:	de b7       	in	r29, 0x3e	; 62
    2738:	ce 56       	subi	r28, 0x6E	; 110
    273a:	d0 40       	sbci	r29, 0x00	; 0
    273c:	0f b6       	in	r0, 0x3f	; 63
    273e:	f8 94       	cli
    2740:	de bf       	out	0x3e, r29	; 62
    2742:	0f be       	out	0x3f, r0	; 63
    2744:	cd bf       	out	0x3d, r28	; 61
	PORT_voidInit();
    2746:	0e 94 9b 05 	call	0xb36	; 0xb36 <PORT_voidInit>
	LCD_voidInit();
    274a:	0e 94 a3 07 	call	0xf46	; 0xf46 <LCD_voidInit>

	//u8 Arr_Hazl2om[8] = HAZL2OM;
	u8 Arr_Pad1[8] = PAD1;
    274e:	ce 01       	movw	r24, r28
    2750:	8e 96       	adiw	r24, 0x2e	; 46
    2752:	68 96       	adiw	r28, 0x18	; 24
    2754:	9f af       	std	Y+63, r25	; 0x3f
    2756:	8e af       	std	Y+62, r24	; 0x3e
    2758:	68 97       	sbiw	r28, 0x18	; 24
    275a:	ee ea       	ldi	r30, 0xAE	; 174
    275c:	f0 e0       	ldi	r31, 0x00	; 0
    275e:	6a 96       	adiw	r28, 0x1a	; 26
    2760:	ff af       	std	Y+63, r31	; 0x3f
    2762:	ee af       	std	Y+62, r30	; 0x3e
    2764:	6a 97       	sbiw	r28, 0x1a	; 26
    2766:	f8 e0       	ldi	r31, 0x08	; 8
    2768:	6b 96       	adiw	r28, 0x1b	; 27
    276a:	ff af       	std	Y+63, r31	; 0x3f
    276c:	6b 97       	sbiw	r28, 0x1b	; 27
    276e:	6a 96       	adiw	r28, 0x1a	; 26
    2770:	ee ad       	ldd	r30, Y+62	; 0x3e
    2772:	ff ad       	ldd	r31, Y+63	; 0x3f
    2774:	6a 97       	sbiw	r28, 0x1a	; 26
    2776:	00 80       	ld	r0, Z
    2778:	6a 96       	adiw	r28, 0x1a	; 26
    277a:	8e ad       	ldd	r24, Y+62	; 0x3e
    277c:	9f ad       	ldd	r25, Y+63	; 0x3f
    277e:	6a 97       	sbiw	r28, 0x1a	; 26
    2780:	01 96       	adiw	r24, 0x01	; 1
    2782:	6a 96       	adiw	r28, 0x1a	; 26
    2784:	9f af       	std	Y+63, r25	; 0x3f
    2786:	8e af       	std	Y+62, r24	; 0x3e
    2788:	6a 97       	sbiw	r28, 0x1a	; 26
    278a:	68 96       	adiw	r28, 0x18	; 24
    278c:	ee ad       	ldd	r30, Y+62	; 0x3e
    278e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2790:	68 97       	sbiw	r28, 0x18	; 24
    2792:	00 82       	st	Z, r0
    2794:	68 96       	adiw	r28, 0x18	; 24
    2796:	8e ad       	ldd	r24, Y+62	; 0x3e
    2798:	9f ad       	ldd	r25, Y+63	; 0x3f
    279a:	68 97       	sbiw	r28, 0x18	; 24
    279c:	01 96       	adiw	r24, 0x01	; 1
    279e:	68 96       	adiw	r28, 0x18	; 24
    27a0:	9f af       	std	Y+63, r25	; 0x3f
    27a2:	8e af       	std	Y+62, r24	; 0x3e
    27a4:	68 97       	sbiw	r28, 0x18	; 24
    27a6:	6b 96       	adiw	r28, 0x1b	; 27
    27a8:	9f ad       	ldd	r25, Y+63	; 0x3f
    27aa:	6b 97       	sbiw	r28, 0x1b	; 27
    27ac:	91 50       	subi	r25, 0x01	; 1
    27ae:	6b 96       	adiw	r28, 0x1b	; 27
    27b0:	9f af       	std	Y+63, r25	; 0x3f
    27b2:	6b 97       	sbiw	r28, 0x1b	; 27
    27b4:	6b 96       	adiw	r28, 0x1b	; 27
    27b6:	ef ad       	ldd	r30, Y+63	; 0x3f
    27b8:	6b 97       	sbiw	r28, 0x1b	; 27
    27ba:	ee 23       	and	r30, r30
    27bc:	c1 f6       	brne	.-80     	; 0x276e <main+0x3e>
	u8 Arr_Pad2[8] = PAD2;
    27be:	ce 01       	movw	r24, r28
    27c0:	c6 96       	adiw	r24, 0x36	; 54
    27c2:	6d 96       	adiw	r28, 0x1d	; 29
    27c4:	9f af       	std	Y+63, r25	; 0x3f
    27c6:	8e af       	std	Y+62, r24	; 0x3e
    27c8:	6d 97       	sbiw	r28, 0x1d	; 29
    27ca:	e6 ea       	ldi	r30, 0xA6	; 166
    27cc:	f0 e0       	ldi	r31, 0x00	; 0
    27ce:	6f 96       	adiw	r28, 0x1f	; 31
    27d0:	ff af       	std	Y+63, r31	; 0x3f
    27d2:	ee af       	std	Y+62, r30	; 0x3e
    27d4:	6f 97       	sbiw	r28, 0x1f	; 31
    27d6:	f8 e0       	ldi	r31, 0x08	; 8
    27d8:	a0 96       	adiw	r28, 0x20	; 32
    27da:	ff af       	std	Y+63, r31	; 0x3f
    27dc:	a0 97       	sbiw	r28, 0x20	; 32
    27de:	6f 96       	adiw	r28, 0x1f	; 31
    27e0:	ee ad       	ldd	r30, Y+62	; 0x3e
    27e2:	ff ad       	ldd	r31, Y+63	; 0x3f
    27e4:	6f 97       	sbiw	r28, 0x1f	; 31
    27e6:	00 80       	ld	r0, Z
    27e8:	6f 96       	adiw	r28, 0x1f	; 31
    27ea:	8e ad       	ldd	r24, Y+62	; 0x3e
    27ec:	9f ad       	ldd	r25, Y+63	; 0x3f
    27ee:	6f 97       	sbiw	r28, 0x1f	; 31
    27f0:	01 96       	adiw	r24, 0x01	; 1
    27f2:	6f 96       	adiw	r28, 0x1f	; 31
    27f4:	9f af       	std	Y+63, r25	; 0x3f
    27f6:	8e af       	std	Y+62, r24	; 0x3e
    27f8:	6f 97       	sbiw	r28, 0x1f	; 31
    27fa:	6d 96       	adiw	r28, 0x1d	; 29
    27fc:	ee ad       	ldd	r30, Y+62	; 0x3e
    27fe:	ff ad       	ldd	r31, Y+63	; 0x3f
    2800:	6d 97       	sbiw	r28, 0x1d	; 29
    2802:	00 82       	st	Z, r0
    2804:	6d 96       	adiw	r28, 0x1d	; 29
    2806:	8e ad       	ldd	r24, Y+62	; 0x3e
    2808:	9f ad       	ldd	r25, Y+63	; 0x3f
    280a:	6d 97       	sbiw	r28, 0x1d	; 29
    280c:	01 96       	adiw	r24, 0x01	; 1
    280e:	6d 96       	adiw	r28, 0x1d	; 29
    2810:	9f af       	std	Y+63, r25	; 0x3f
    2812:	8e af       	std	Y+62, r24	; 0x3e
    2814:	6d 97       	sbiw	r28, 0x1d	; 29
    2816:	a0 96       	adiw	r28, 0x20	; 32
    2818:	9f ad       	ldd	r25, Y+63	; 0x3f
    281a:	a0 97       	sbiw	r28, 0x20	; 32
    281c:	91 50       	subi	r25, 0x01	; 1
    281e:	a0 96       	adiw	r28, 0x20	; 32
    2820:	9f af       	std	Y+63, r25	; 0x3f
    2822:	a0 97       	sbiw	r28, 0x20	; 32
    2824:	a0 96       	adiw	r28, 0x20	; 32
    2826:	ef ad       	ldd	r30, Y+63	; 0x3f
    2828:	a0 97       	sbiw	r28, 0x20	; 32
    282a:	ee 23       	and	r30, r30
    282c:	c1 f6       	brne	.-80     	; 0x27de <main+0xae>
	u8 Arr_Ball[8] = BALL;
    282e:	ce 01       	movw	r24, r28
    2830:	ce 96       	adiw	r24, 0x3e	; 62
    2832:	a2 96       	adiw	r28, 0x22	; 34
    2834:	9f af       	std	Y+63, r25	; 0x3f
    2836:	8e af       	std	Y+62, r24	; 0x3e
    2838:	a2 97       	sbiw	r28, 0x22	; 34
    283a:	ee e9       	ldi	r30, 0x9E	; 158
    283c:	f0 e0       	ldi	r31, 0x00	; 0
    283e:	a4 96       	adiw	r28, 0x24	; 36
    2840:	ff af       	std	Y+63, r31	; 0x3f
    2842:	ee af       	std	Y+62, r30	; 0x3e
    2844:	a4 97       	sbiw	r28, 0x24	; 36
    2846:	f8 e0       	ldi	r31, 0x08	; 8
    2848:	a5 96       	adiw	r28, 0x25	; 37
    284a:	ff af       	std	Y+63, r31	; 0x3f
    284c:	a5 97       	sbiw	r28, 0x25	; 37
    284e:	a4 96       	adiw	r28, 0x24	; 36
    2850:	ee ad       	ldd	r30, Y+62	; 0x3e
    2852:	ff ad       	ldd	r31, Y+63	; 0x3f
    2854:	a4 97       	sbiw	r28, 0x24	; 36
    2856:	00 80       	ld	r0, Z
    2858:	a4 96       	adiw	r28, 0x24	; 36
    285a:	8e ad       	ldd	r24, Y+62	; 0x3e
    285c:	9f ad       	ldd	r25, Y+63	; 0x3f
    285e:	a4 97       	sbiw	r28, 0x24	; 36
    2860:	01 96       	adiw	r24, 0x01	; 1
    2862:	a4 96       	adiw	r28, 0x24	; 36
    2864:	9f af       	std	Y+63, r25	; 0x3f
    2866:	8e af       	std	Y+62, r24	; 0x3e
    2868:	a4 97       	sbiw	r28, 0x24	; 36
    286a:	a2 96       	adiw	r28, 0x22	; 34
    286c:	ee ad       	ldd	r30, Y+62	; 0x3e
    286e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2870:	a2 97       	sbiw	r28, 0x22	; 34
    2872:	00 82       	st	Z, r0
    2874:	a2 96       	adiw	r28, 0x22	; 34
    2876:	8e ad       	ldd	r24, Y+62	; 0x3e
    2878:	9f ad       	ldd	r25, Y+63	; 0x3f
    287a:	a2 97       	sbiw	r28, 0x22	; 34
    287c:	01 96       	adiw	r24, 0x01	; 1
    287e:	a2 96       	adiw	r28, 0x22	; 34
    2880:	9f af       	std	Y+63, r25	; 0x3f
    2882:	8e af       	std	Y+62, r24	; 0x3e
    2884:	a2 97       	sbiw	r28, 0x22	; 34
    2886:	a5 96       	adiw	r28, 0x25	; 37
    2888:	9f ad       	ldd	r25, Y+63	; 0x3f
    288a:	a5 97       	sbiw	r28, 0x25	; 37
    288c:	91 50       	subi	r25, 0x01	; 1
    288e:	a5 96       	adiw	r28, 0x25	; 37
    2890:	9f af       	std	Y+63, r25	; 0x3f
    2892:	a5 97       	sbiw	r28, 0x25	; 37
    2894:	a5 96       	adiw	r28, 0x25	; 37
    2896:	ef ad       	ldd	r30, Y+63	; 0x3f
    2898:	a5 97       	sbiw	r28, 0x25	; 37
    289a:	ee 23       	and	r30, r30
    289c:	c1 f6       	brne	.-80     	; 0x284e <main+0x11e>
	u8 Player1[] = "Ahmed  ";
    289e:	ce 01       	movw	r24, r28
    28a0:	8a 5b       	subi	r24, 0xBA	; 186
    28a2:	9f 4f       	sbci	r25, 0xFF	; 255
    28a4:	a7 96       	adiw	r28, 0x27	; 39
    28a6:	9f af       	std	Y+63, r25	; 0x3f
    28a8:	8e af       	std	Y+62, r24	; 0x3e
    28aa:	a7 97       	sbiw	r28, 0x27	; 39
    28ac:	8a e6       	ldi	r24, 0x6A	; 106
    28ae:	90 e0       	ldi	r25, 0x00	; 0
    28b0:	a9 96       	adiw	r28, 0x29	; 41
    28b2:	9f af       	std	Y+63, r25	; 0x3f
    28b4:	8e af       	std	Y+62, r24	; 0x3e
    28b6:	a9 97       	sbiw	r28, 0x29	; 41
    28b8:	98 e0       	ldi	r25, 0x08	; 8
    28ba:	aa 96       	adiw	r28, 0x2a	; 42
    28bc:	9f af       	std	Y+63, r25	; 0x3f
    28be:	aa 97       	sbiw	r28, 0x2a	; 42
    28c0:	a9 96       	adiw	r28, 0x29	; 41
    28c2:	ee ad       	ldd	r30, Y+62	; 0x3e
    28c4:	ff ad       	ldd	r31, Y+63	; 0x3f
    28c6:	a9 97       	sbiw	r28, 0x29	; 41
    28c8:	00 80       	ld	r0, Z
    28ca:	a9 96       	adiw	r28, 0x29	; 41
    28cc:	8e ad       	ldd	r24, Y+62	; 0x3e
    28ce:	9f ad       	ldd	r25, Y+63	; 0x3f
    28d0:	a9 97       	sbiw	r28, 0x29	; 41
    28d2:	01 96       	adiw	r24, 0x01	; 1
    28d4:	a9 96       	adiw	r28, 0x29	; 41
    28d6:	9f af       	std	Y+63, r25	; 0x3f
    28d8:	8e af       	std	Y+62, r24	; 0x3e
    28da:	a9 97       	sbiw	r28, 0x29	; 41
    28dc:	a7 96       	adiw	r28, 0x27	; 39
    28de:	ee ad       	ldd	r30, Y+62	; 0x3e
    28e0:	ff ad       	ldd	r31, Y+63	; 0x3f
    28e2:	a7 97       	sbiw	r28, 0x27	; 39
    28e4:	00 82       	st	Z, r0
    28e6:	a7 96       	adiw	r28, 0x27	; 39
    28e8:	8e ad       	ldd	r24, Y+62	; 0x3e
    28ea:	9f ad       	ldd	r25, Y+63	; 0x3f
    28ec:	a7 97       	sbiw	r28, 0x27	; 39
    28ee:	01 96       	adiw	r24, 0x01	; 1
    28f0:	a7 96       	adiw	r28, 0x27	; 39
    28f2:	9f af       	std	Y+63, r25	; 0x3f
    28f4:	8e af       	std	Y+62, r24	; 0x3e
    28f6:	a7 97       	sbiw	r28, 0x27	; 39
    28f8:	aa 96       	adiw	r28, 0x2a	; 42
    28fa:	9f ad       	ldd	r25, Y+63	; 0x3f
    28fc:	aa 97       	sbiw	r28, 0x2a	; 42
    28fe:	91 50       	subi	r25, 0x01	; 1
    2900:	aa 96       	adiw	r28, 0x2a	; 42
    2902:	9f af       	std	Y+63, r25	; 0x3f
    2904:	aa 97       	sbiw	r28, 0x2a	; 42
    2906:	aa 96       	adiw	r28, 0x2a	; 42
    2908:	ef ad       	ldd	r30, Y+63	; 0x3f
    290a:	aa 97       	sbiw	r28, 0x2a	; 42
    290c:	ee 23       	and	r30, r30
    290e:	c1 f6       	brne	.-80     	; 0x28c0 <main+0x190>
	u8 Player2[] = "Hazim  ";
    2910:	ce 01       	movw	r24, r28
    2912:	82 5b       	subi	r24, 0xB2	; 178
    2914:	9f 4f       	sbci	r25, 0xFF	; 255
    2916:	ac 96       	adiw	r28, 0x2c	; 44
    2918:	9f af       	std	Y+63, r25	; 0x3f
    291a:	8e af       	std	Y+62, r24	; 0x3e
    291c:	ac 97       	sbiw	r28, 0x2c	; 44
    291e:	82 e7       	ldi	r24, 0x72	; 114
    2920:	90 e0       	ldi	r25, 0x00	; 0
    2922:	ae 96       	adiw	r28, 0x2e	; 46
    2924:	9f af       	std	Y+63, r25	; 0x3f
    2926:	8e af       	std	Y+62, r24	; 0x3e
    2928:	ae 97       	sbiw	r28, 0x2e	; 46
    292a:	98 e0       	ldi	r25, 0x08	; 8
    292c:	af 96       	adiw	r28, 0x2f	; 47
    292e:	9f af       	std	Y+63, r25	; 0x3f
    2930:	af 97       	sbiw	r28, 0x2f	; 47
    2932:	ae 96       	adiw	r28, 0x2e	; 46
    2934:	ee ad       	ldd	r30, Y+62	; 0x3e
    2936:	ff ad       	ldd	r31, Y+63	; 0x3f
    2938:	ae 97       	sbiw	r28, 0x2e	; 46
    293a:	00 80       	ld	r0, Z
    293c:	ae 96       	adiw	r28, 0x2e	; 46
    293e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2940:	9f ad       	ldd	r25, Y+63	; 0x3f
    2942:	ae 97       	sbiw	r28, 0x2e	; 46
    2944:	01 96       	adiw	r24, 0x01	; 1
    2946:	ae 96       	adiw	r28, 0x2e	; 46
    2948:	9f af       	std	Y+63, r25	; 0x3f
    294a:	8e af       	std	Y+62, r24	; 0x3e
    294c:	ae 97       	sbiw	r28, 0x2e	; 46
    294e:	ac 96       	adiw	r28, 0x2c	; 44
    2950:	ee ad       	ldd	r30, Y+62	; 0x3e
    2952:	ff ad       	ldd	r31, Y+63	; 0x3f
    2954:	ac 97       	sbiw	r28, 0x2c	; 44
    2956:	00 82       	st	Z, r0
    2958:	ac 96       	adiw	r28, 0x2c	; 44
    295a:	8e ad       	ldd	r24, Y+62	; 0x3e
    295c:	9f ad       	ldd	r25, Y+63	; 0x3f
    295e:	ac 97       	sbiw	r28, 0x2c	; 44
    2960:	01 96       	adiw	r24, 0x01	; 1
    2962:	ac 96       	adiw	r28, 0x2c	; 44
    2964:	9f af       	std	Y+63, r25	; 0x3f
    2966:	8e af       	std	Y+62, r24	; 0x3e
    2968:	ac 97       	sbiw	r28, 0x2c	; 44
    296a:	af 96       	adiw	r28, 0x2f	; 47
    296c:	9f ad       	ldd	r25, Y+63	; 0x3f
    296e:	af 97       	sbiw	r28, 0x2f	; 47
    2970:	91 50       	subi	r25, 0x01	; 1
    2972:	af 96       	adiw	r28, 0x2f	; 47
    2974:	9f af       	std	Y+63, r25	; 0x3f
    2976:	af 97       	sbiw	r28, 0x2f	; 47
    2978:	af 96       	adiw	r28, 0x2f	; 47
    297a:	ef ad       	ldd	r30, Y+63	; 0x3f
    297c:	af 97       	sbiw	r28, 0x2f	; 47
    297e:	ee 23       	and	r30, r30
    2980:	c1 f6       	brne	.-80     	; 0x2932 <main+0x202>
	u8 MoveLeft = 1, Player1Score = 0, Player2Score = 0;
    2982:	81 e0       	ldi	r24, 0x01	; 1
    2984:	8d a7       	std	Y+45, r24	; 0x2d
    2986:	1c a6       	std	Y+44, r1	; 0x2c
    2988:	1b a6       	std	Y+43, r1	; 0x2b
	//	LCD_voidDisplaySpecialChar(Arr_Ball,0,1,0);


	while(1)
	{
		LCD_voidSendCommand(LCD_ClearDisplay);
    298a:	81 e0       	ldi	r24, 0x01	; 1
    298c:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <LCD_voidSendCommand>
		LCD_voidGoToPosition(0,0);
    2990:	80 e0       	ldi	r24, 0x00	; 0
    2992:	60 e0       	ldi	r22, 0x00	; 0
    2994:	0e 94 05 12 	call	0x240a	; 0x240a <LCD_voidGoToPosition>
		LCD_voidWriteString(Player1);
    2998:	ce 01       	movw	r24, r28
    299a:	8a 5b       	subi	r24, 0xBA	; 186
    299c:	9f 4f       	sbci	r25, 0xFF	; 255
    299e:	0e 94 43 10 	call	0x2086	; 0x2086 <LCD_voidWriteString>
		LCD_voidWriteIntData(Player1Score);
    29a2:	8c a5       	ldd	r24, Y+44	; 0x2c
    29a4:	88 2f       	mov	r24, r24
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	a0 e0       	ldi	r26, 0x00	; 0
    29aa:	b0 e0       	ldi	r27, 0x00	; 0
    29ac:	bc 01       	movw	r22, r24
    29ae:	cd 01       	movw	r24, r26
    29b0:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_voidWriteIntData>
		LCD_voidGoToPosition(0,10);
    29b4:	80 e0       	ldi	r24, 0x00	; 0
    29b6:	6a e0       	ldi	r22, 0x0A	; 10
    29b8:	0e 94 05 12 	call	0x240a	; 0x240a <LCD_voidGoToPosition>
		LCD_voidWriteString(Player2);
    29bc:	ce 01       	movw	r24, r28
    29be:	82 5b       	subi	r24, 0xB2	; 178
    29c0:	9f 4f       	sbci	r25, 0xFF	; 255
    29c2:	0e 94 43 10 	call	0x2086	; 0x2086 <LCD_voidWriteString>
		LCD_voidWriteIntData(Player2Score);
    29c6:	8b a5       	ldd	r24, Y+43	; 0x2b
    29c8:	88 2f       	mov	r24, r24
    29ca:	90 e0       	ldi	r25, 0x00	; 0
    29cc:	a0 e0       	ldi	r26, 0x00	; 0
    29ce:	b0 e0       	ldi	r27, 0x00	; 0
    29d0:	bc 01       	movw	r22, r24
    29d2:	cd 01       	movw	r24, r26
    29d4:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_voidWriteIntData>
		LCD_voidDisplaySpecialChar(Arr_Pad1,0, Pad1x, START);
    29d8:	20 91 9a 00 	lds	r18, 0x009A
    29dc:	ce 01       	movw	r24, r28
    29de:	8e 96       	adiw	r24, 0x2e	; 46
    29e0:	60 e0       	ldi	r22, 0x00	; 0
    29e2:	42 2f       	mov	r20, r18
    29e4:	20 e8       	ldi	r18, 0x80	; 128
    29e6:	0e 94 36 12 	call	0x246c	; 0x246c <LCD_voidDisplaySpecialChar>
		LCD_voidDisplaySpecialChar(Arr_Pad2,2, Pad2x, END);
    29ea:	20 91 9b 00 	lds	r18, 0x009B
    29ee:	ce 01       	movw	r24, r28
    29f0:	c6 96       	adiw	r24, 0x36	; 54
    29f2:	62 e0       	ldi	r22, 0x02	; 2
    29f4:	42 2f       	mov	r20, r18
    29f6:	23 e9       	ldi	r18, 0x93	; 147
    29f8:	0e 94 36 12 	call	0x246c	; 0x246c <LCD_voidDisplaySpecialChar>
		LCD_voidDisplaySpecialChar(Arr_Ball,1, Ballx, Bally);
    29fc:	20 91 9c 00 	lds	r18, 0x009C
    2a00:	30 91 9d 00 	lds	r19, 0x009D
    2a04:	ce 01       	movw	r24, r28
    2a06:	ce 96       	adiw	r24, 0x3e	; 62
    2a08:	61 e0       	ldi	r22, 0x01	; 1
    2a0a:	42 2f       	mov	r20, r18
    2a0c:	23 2f       	mov	r18, r19
    2a0e:	0e 94 36 12 	call	0x246c	; 0x246c <LCD_voidDisplaySpecialChar>

		if(MoveLeft)
    2a12:	8d a5       	ldd	r24, Y+45	; 0x2d
    2a14:	88 23       	and	r24, r24
    2a16:	09 f4       	brne	.+2      	; 0x2a1a <main+0x2ea>
    2a18:	a5 c0       	rjmp	.+330    	; 0x2b64 <main+0x434>
		{
			Bally--;
    2a1a:	80 91 9d 00 	lds	r24, 0x009D
    2a1e:	81 50       	subi	r24, 0x01	; 1
    2a20:	80 93 9d 00 	sts	0x009D, r24
			if(START == Bally)
    2a24:	80 91 9d 00 	lds	r24, 0x009D
    2a28:	80 38       	cpi	r24, 0x80	; 128
    2a2a:	09 f0       	breq	.+2      	; 0x2a2e <main+0x2fe>
    2a2c:	40 c1       	rjmp	.+640    	; 0x2cae <main+0x57e>
			{
				if(Ballx == Pad1x)
    2a2e:	90 91 9c 00 	lds	r25, 0x009C
    2a32:	80 91 9a 00 	lds	r24, 0x009A
    2a36:	98 17       	cp	r25, r24
    2a38:	39 f4       	brne	.+14     	; 0x2a48 <main+0x318>
				{
					Bally += 2;
    2a3a:	80 91 9d 00 	lds	r24, 0x009D
    2a3e:	8e 5f       	subi	r24, 0xFE	; 254
    2a40:	80 93 9d 00 	sts	0x009D, r24
					MoveLeft = 0;
    2a44:	1d a6       	std	Y+45, r1	; 0x2d
    2a46:	33 c1       	rjmp	.+614    	; 0x2cae <main+0x57e>
				}
				else
				{
					Player2Score++;
    2a48:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a4a:	8f 5f       	subi	r24, 0xFF	; 255
    2a4c:	8b a7       	std	Y+43, r24	; 0x2b
					DIO_u8SetPinValue(DIO_u8PORTC, DIO_u8PIN_6, DIO_u8PIN_HIGH);// buzzer
    2a4e:	82 e0       	ldi	r24, 0x02	; 2
    2a50:	66 e0       	ldi	r22, 0x06	; 6
    2a52:	41 e0       	ldi	r20, 0x01	; 1
    2a54:	0e 94 be 05 	call	0xb7c	; 0xb7c <DIO_u8SetPinValue>
					if(Player2Score == 3)
    2a58:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a5a:	83 30       	cpi	r24, 0x03	; 3
    2a5c:	09 f0       	breq	.+2      	; 0x2a60 <main+0x330>
    2a5e:	7b c0       	rjmp	.+246    	; 0x2b56 <main+0x426>
					{
						Winner();
    2a60:	0e 94 82 13 	call	0x2704	; 0x2704 <Winner>
						LCD_voidWriteString(Player2);
    2a64:	ce 01       	movw	r24, r28
    2a66:	82 5b       	subi	r24, 0xB2	; 178
    2a68:	9f 4f       	sbci	r25, 0xFF	; 255
    2a6a:	0e 94 43 10 	call	0x2086	; 0x2086 <LCD_voidWriteString>
    2a6e:	80 e0       	ldi	r24, 0x00	; 0
    2a70:	90 e0       	ldi	r25, 0x00	; 0
    2a72:	aa ef       	ldi	r26, 0xFA	; 250
    2a74:	b4 e4       	ldi	r27, 0x44	; 68
    2a76:	8f a3       	std	Y+39, r24	; 0x27
    2a78:	98 a7       	std	Y+40, r25	; 0x28
    2a7a:	a9 a7       	std	Y+41, r26	; 0x29
    2a7c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a7e:	6f a1       	ldd	r22, Y+39	; 0x27
    2a80:	78 a5       	ldd	r23, Y+40	; 0x28
    2a82:	89 a5       	ldd	r24, Y+41	; 0x29
    2a84:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a86:	20 e0       	ldi	r18, 0x00	; 0
    2a88:	30 e0       	ldi	r19, 0x00	; 0
    2a8a:	4a ef       	ldi	r20, 0xFA	; 250
    2a8c:	54 e4       	ldi	r21, 0x44	; 68
    2a8e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a92:	dc 01       	movw	r26, r24
    2a94:	cb 01       	movw	r24, r22
    2a96:	8b a3       	std	Y+35, r24	; 0x23
    2a98:	9c a3       	std	Y+36, r25	; 0x24
    2a9a:	ad a3       	std	Y+37, r26	; 0x25
    2a9c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a9e:	6b a1       	ldd	r22, Y+35	; 0x23
    2aa0:	7c a1       	ldd	r23, Y+36	; 0x24
    2aa2:	8d a1       	ldd	r24, Y+37	; 0x25
    2aa4:	9e a1       	ldd	r25, Y+38	; 0x26
    2aa6:	20 e0       	ldi	r18, 0x00	; 0
    2aa8:	30 e0       	ldi	r19, 0x00	; 0
    2aaa:	40 e8       	ldi	r20, 0x80	; 128
    2aac:	5f e3       	ldi	r21, 0x3F	; 63
    2aae:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2ab2:	88 23       	and	r24, r24
    2ab4:	2c f4       	brge	.+10     	; 0x2ac0 <main+0x390>
		__ticks = 1;
    2ab6:	81 e0       	ldi	r24, 0x01	; 1
    2ab8:	90 e0       	ldi	r25, 0x00	; 0
    2aba:	9a a3       	std	Y+34, r25	; 0x22
    2abc:	89 a3       	std	Y+33, r24	; 0x21
    2abe:	3f c0       	rjmp	.+126    	; 0x2b3e <main+0x40e>
	else if (__tmp > 65535)
    2ac0:	6b a1       	ldd	r22, Y+35	; 0x23
    2ac2:	7c a1       	ldd	r23, Y+36	; 0x24
    2ac4:	8d a1       	ldd	r24, Y+37	; 0x25
    2ac6:	9e a1       	ldd	r25, Y+38	; 0x26
    2ac8:	20 e0       	ldi	r18, 0x00	; 0
    2aca:	3f ef       	ldi	r19, 0xFF	; 255
    2acc:	4f e7       	ldi	r20, 0x7F	; 127
    2ace:	57 e4       	ldi	r21, 0x47	; 71
    2ad0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2ad4:	18 16       	cp	r1, r24
    2ad6:	4c f5       	brge	.+82     	; 0x2b2a <main+0x3fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ad8:	6f a1       	ldd	r22, Y+39	; 0x27
    2ada:	78 a5       	ldd	r23, Y+40	; 0x28
    2adc:	89 a5       	ldd	r24, Y+41	; 0x29
    2ade:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ae0:	20 e0       	ldi	r18, 0x00	; 0
    2ae2:	30 e0       	ldi	r19, 0x00	; 0
    2ae4:	40 e2       	ldi	r20, 0x20	; 32
    2ae6:	51 e4       	ldi	r21, 0x41	; 65
    2ae8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2aec:	dc 01       	movw	r26, r24
    2aee:	cb 01       	movw	r24, r22
    2af0:	bc 01       	movw	r22, r24
    2af2:	cd 01       	movw	r24, r26
    2af4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2af8:	dc 01       	movw	r26, r24
    2afa:	cb 01       	movw	r24, r22
    2afc:	9a a3       	std	Y+34, r25	; 0x22
    2afe:	89 a3       	std	Y+33, r24	; 0x21
    2b00:	0f c0       	rjmp	.+30     	; 0x2b20 <main+0x3f0>
    2b02:	88 ec       	ldi	r24, 0xC8	; 200
    2b04:	90 e0       	ldi	r25, 0x00	; 0
    2b06:	98 a3       	std	Y+32, r25	; 0x20
    2b08:	8f 8f       	std	Y+31, r24	; 0x1f
    2b0a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b0c:	98 a1       	ldd	r25, Y+32	; 0x20
    2b0e:	01 97       	sbiw	r24, 0x01	; 1
    2b10:	f1 f7       	brne	.-4      	; 0x2b0e <main+0x3de>
    2b12:	98 a3       	std	Y+32, r25	; 0x20
    2b14:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b16:	89 a1       	ldd	r24, Y+33	; 0x21
    2b18:	9a a1       	ldd	r25, Y+34	; 0x22
    2b1a:	01 97       	sbiw	r24, 0x01	; 1
    2b1c:	9a a3       	std	Y+34, r25	; 0x22
    2b1e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b20:	89 a1       	ldd	r24, Y+33	; 0x21
    2b22:	9a a1       	ldd	r25, Y+34	; 0x22
    2b24:	00 97       	sbiw	r24, 0x00	; 0
    2b26:	69 f7       	brne	.-38     	; 0x2b02 <main+0x3d2>
    2b28:	14 c0       	rjmp	.+40     	; 0x2b52 <main+0x422>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b2a:	6b a1       	ldd	r22, Y+35	; 0x23
    2b2c:	7c a1       	ldd	r23, Y+36	; 0x24
    2b2e:	8d a1       	ldd	r24, Y+37	; 0x25
    2b30:	9e a1       	ldd	r25, Y+38	; 0x26
    2b32:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b36:	dc 01       	movw	r26, r24
    2b38:	cb 01       	movw	r24, r22
    2b3a:	9a a3       	std	Y+34, r25	; 0x22
    2b3c:	89 a3       	std	Y+33, r24	; 0x21
    2b3e:	89 a1       	ldd	r24, Y+33	; 0x21
    2b40:	9a a1       	ldd	r25, Y+34	; 0x22
    2b42:	9e 8f       	std	Y+30, r25	; 0x1e
    2b44:	8d 8f       	std	Y+29, r24	; 0x1d
    2b46:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b48:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b4a:	01 97       	sbiw	r24, 0x01	; 1
    2b4c:	f1 f7       	brne	.-4      	; 0x2b4a <main+0x41a>
    2b4e:	9e 8f       	std	Y+30, r25	; 0x1e
    2b50:	8d 8f       	std	Y+29, r24	; 0x1d
						_delay_ms(2000);
						Player2Score = 0;
    2b52:	1b a6       	std	Y+43, r1	; 0x2b
						Player1Score = 0;
    2b54:	1c a6       	std	Y+44, r1	; 0x2c
					}
					Ballx = 2;
    2b56:	82 e0       	ldi	r24, 0x02	; 2
    2b58:	80 93 9c 00 	sts	0x009C, r24
					Bally = (0x80 + 10);
    2b5c:	8a e8       	ldi	r24, 0x8A	; 138
    2b5e:	80 93 9d 00 	sts	0x009D, r24
    2b62:	a5 c0       	rjmp	.+330    	; 0x2cae <main+0x57e>
				}
			}
		}
		else
		{
			Bally++;
    2b64:	80 91 9d 00 	lds	r24, 0x009D
    2b68:	8f 5f       	subi	r24, 0xFF	; 255
    2b6a:	80 93 9d 00 	sts	0x009D, r24
			if(END == Bally)
    2b6e:	80 91 9d 00 	lds	r24, 0x009D
    2b72:	83 39       	cpi	r24, 0x93	; 147
    2b74:	09 f0       	breq	.+2      	; 0x2b78 <main+0x448>
    2b76:	9b c0       	rjmp	.+310    	; 0x2cae <main+0x57e>
			{
				if(Ballx == Pad2x)
    2b78:	90 91 9c 00 	lds	r25, 0x009C
    2b7c:	80 91 9b 00 	lds	r24, 0x009B
    2b80:	98 17       	cp	r25, r24
    2b82:	41 f4       	brne	.+16     	; 0x2b94 <main+0x464>
				{
					Bally -= 2;
    2b84:	80 91 9d 00 	lds	r24, 0x009D
    2b88:	82 50       	subi	r24, 0x02	; 2
    2b8a:	80 93 9d 00 	sts	0x009D, r24
					MoveLeft = 1;
    2b8e:	81 e0       	ldi	r24, 0x01	; 1
    2b90:	8d a7       	std	Y+45, r24	; 0x2d
    2b92:	8d c0       	rjmp	.+282    	; 0x2cae <main+0x57e>
				}
				else
				{
					Player1Score++;
    2b94:	8c a5       	ldd	r24, Y+44	; 0x2c
    2b96:	8f 5f       	subi	r24, 0xFF	; 255
    2b98:	8c a7       	std	Y+44, r24	; 0x2c
					DIO_u8SetPinValue(DIO_u8PORTC, DIO_u8PIN_6, DIO_u8PIN_HIGH);
    2b9a:	82 e0       	ldi	r24, 0x02	; 2
    2b9c:	66 e0       	ldi	r22, 0x06	; 6
    2b9e:	41 e0       	ldi	r20, 0x01	; 1
    2ba0:	0e 94 be 05 	call	0xb7c	; 0xb7c <DIO_u8SetPinValue>
					if(Player1Score == 3)
    2ba4:	8c a5       	ldd	r24, Y+44	; 0x2c
    2ba6:	83 30       	cpi	r24, 0x03	; 3
    2ba8:	09 f0       	breq	.+2      	; 0x2bac <main+0x47c>
    2baa:	7b c0       	rjmp	.+246    	; 0x2ca2 <main+0x572>
					{
						Winner();
    2bac:	0e 94 82 13 	call	0x2704	; 0x2704 <Winner>
						LCD_voidWriteString(Player1);
    2bb0:	ce 01       	movw	r24, r28
    2bb2:	8a 5b       	subi	r24, 0xBA	; 186
    2bb4:	9f 4f       	sbci	r25, 0xFF	; 255
    2bb6:	0e 94 43 10 	call	0x2086	; 0x2086 <LCD_voidWriteString>
    2bba:	80 e0       	ldi	r24, 0x00	; 0
    2bbc:	90 e0       	ldi	r25, 0x00	; 0
    2bbe:	aa ef       	ldi	r26, 0xFA	; 250
    2bc0:	b4 e4       	ldi	r27, 0x44	; 68
    2bc2:	89 8f       	std	Y+25, r24	; 0x19
    2bc4:	9a 8f       	std	Y+26, r25	; 0x1a
    2bc6:	ab 8f       	std	Y+27, r26	; 0x1b
    2bc8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bca:	69 8d       	ldd	r22, Y+25	; 0x19
    2bcc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bd0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bd2:	20 e0       	ldi	r18, 0x00	; 0
    2bd4:	30 e0       	ldi	r19, 0x00	; 0
    2bd6:	4a ef       	ldi	r20, 0xFA	; 250
    2bd8:	54 e4       	ldi	r21, 0x44	; 68
    2bda:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bde:	dc 01       	movw	r26, r24
    2be0:	cb 01       	movw	r24, r22
    2be2:	8d 8b       	std	Y+21, r24	; 0x15
    2be4:	9e 8b       	std	Y+22, r25	; 0x16
    2be6:	af 8b       	std	Y+23, r26	; 0x17
    2be8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2bea:	6d 89       	ldd	r22, Y+21	; 0x15
    2bec:	7e 89       	ldd	r23, Y+22	; 0x16
    2bee:	8f 89       	ldd	r24, Y+23	; 0x17
    2bf0:	98 8d       	ldd	r25, Y+24	; 0x18
    2bf2:	20 e0       	ldi	r18, 0x00	; 0
    2bf4:	30 e0       	ldi	r19, 0x00	; 0
    2bf6:	40 e8       	ldi	r20, 0x80	; 128
    2bf8:	5f e3       	ldi	r21, 0x3F	; 63
    2bfa:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2bfe:	88 23       	and	r24, r24
    2c00:	2c f4       	brge	.+10     	; 0x2c0c <main+0x4dc>
		__ticks = 1;
    2c02:	81 e0       	ldi	r24, 0x01	; 1
    2c04:	90 e0       	ldi	r25, 0x00	; 0
    2c06:	9c 8b       	std	Y+20, r25	; 0x14
    2c08:	8b 8b       	std	Y+19, r24	; 0x13
    2c0a:	3f c0       	rjmp	.+126    	; 0x2c8a <main+0x55a>
	else if (__tmp > 65535)
    2c0c:	6d 89       	ldd	r22, Y+21	; 0x15
    2c0e:	7e 89       	ldd	r23, Y+22	; 0x16
    2c10:	8f 89       	ldd	r24, Y+23	; 0x17
    2c12:	98 8d       	ldd	r25, Y+24	; 0x18
    2c14:	20 e0       	ldi	r18, 0x00	; 0
    2c16:	3f ef       	ldi	r19, 0xFF	; 255
    2c18:	4f e7       	ldi	r20, 0x7F	; 127
    2c1a:	57 e4       	ldi	r21, 0x47	; 71
    2c1c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2c20:	18 16       	cp	r1, r24
    2c22:	4c f5       	brge	.+82     	; 0x2c76 <main+0x546>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c24:	69 8d       	ldd	r22, Y+25	; 0x19
    2c26:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c28:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c2a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c2c:	20 e0       	ldi	r18, 0x00	; 0
    2c2e:	30 e0       	ldi	r19, 0x00	; 0
    2c30:	40 e2       	ldi	r20, 0x20	; 32
    2c32:	51 e4       	ldi	r21, 0x41	; 65
    2c34:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c38:	dc 01       	movw	r26, r24
    2c3a:	cb 01       	movw	r24, r22
    2c3c:	bc 01       	movw	r22, r24
    2c3e:	cd 01       	movw	r24, r26
    2c40:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c44:	dc 01       	movw	r26, r24
    2c46:	cb 01       	movw	r24, r22
    2c48:	9c 8b       	std	Y+20, r25	; 0x14
    2c4a:	8b 8b       	std	Y+19, r24	; 0x13
    2c4c:	0f c0       	rjmp	.+30     	; 0x2c6c <main+0x53c>
    2c4e:	88 ec       	ldi	r24, 0xC8	; 200
    2c50:	90 e0       	ldi	r25, 0x00	; 0
    2c52:	9a 8b       	std	Y+18, r25	; 0x12
    2c54:	89 8b       	std	Y+17, r24	; 0x11
    2c56:	89 89       	ldd	r24, Y+17	; 0x11
    2c58:	9a 89       	ldd	r25, Y+18	; 0x12
    2c5a:	01 97       	sbiw	r24, 0x01	; 1
    2c5c:	f1 f7       	brne	.-4      	; 0x2c5a <main+0x52a>
    2c5e:	9a 8b       	std	Y+18, r25	; 0x12
    2c60:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c62:	8b 89       	ldd	r24, Y+19	; 0x13
    2c64:	9c 89       	ldd	r25, Y+20	; 0x14
    2c66:	01 97       	sbiw	r24, 0x01	; 1
    2c68:	9c 8b       	std	Y+20, r25	; 0x14
    2c6a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c6c:	8b 89       	ldd	r24, Y+19	; 0x13
    2c6e:	9c 89       	ldd	r25, Y+20	; 0x14
    2c70:	00 97       	sbiw	r24, 0x00	; 0
    2c72:	69 f7       	brne	.-38     	; 0x2c4e <main+0x51e>
    2c74:	14 c0       	rjmp	.+40     	; 0x2c9e <main+0x56e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c76:	6d 89       	ldd	r22, Y+21	; 0x15
    2c78:	7e 89       	ldd	r23, Y+22	; 0x16
    2c7a:	8f 89       	ldd	r24, Y+23	; 0x17
    2c7c:	98 8d       	ldd	r25, Y+24	; 0x18
    2c7e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c82:	dc 01       	movw	r26, r24
    2c84:	cb 01       	movw	r24, r22
    2c86:	9c 8b       	std	Y+20, r25	; 0x14
    2c88:	8b 8b       	std	Y+19, r24	; 0x13
    2c8a:	8b 89       	ldd	r24, Y+19	; 0x13
    2c8c:	9c 89       	ldd	r25, Y+20	; 0x14
    2c8e:	98 8b       	std	Y+16, r25	; 0x10
    2c90:	8f 87       	std	Y+15, r24	; 0x0f
    2c92:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c94:	98 89       	ldd	r25, Y+16	; 0x10
    2c96:	01 97       	sbiw	r24, 0x01	; 1
    2c98:	f1 f7       	brne	.-4      	; 0x2c96 <main+0x566>
    2c9a:	98 8b       	std	Y+16, r25	; 0x10
    2c9c:	8f 87       	std	Y+15, r24	; 0x0f
						_delay_ms(2000);
						Player1Score = 0;
    2c9e:	1c a6       	std	Y+44, r1	; 0x2c
						Player2Score = 0;
    2ca0:	1b a6       	std	Y+43, r1	; 0x2b
					}
					Ballx = 2;
    2ca2:	82 e0       	ldi	r24, 0x02	; 2
    2ca4:	80 93 9c 00 	sts	0x009C, r24
					Bally = (0x80 + 10);
    2ca8:	8a e8       	ldi	r24, 0x8A	; 138
    2caa:	80 93 9d 00 	sts	0x009D, r24

				}
			}
		}

		MovePad();
    2cae:	0e 94 2c 13 	call	0x2658	; 0x2658 <MovePad>
		MoveBall();
    2cb2:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <MoveBall>
    2cb6:	80 e0       	ldi	r24, 0x00	; 0
    2cb8:	90 e0       	ldi	r25, 0x00	; 0
    2cba:	af ea       	ldi	r26, 0xAF	; 175
    2cbc:	b3 e4       	ldi	r27, 0x43	; 67
    2cbe:	8b 87       	std	Y+11, r24	; 0x0b
    2cc0:	9c 87       	std	Y+12, r25	; 0x0c
    2cc2:	ad 87       	std	Y+13, r26	; 0x0d
    2cc4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cc6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cc8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cca:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ccc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cce:	20 e0       	ldi	r18, 0x00	; 0
    2cd0:	30 e0       	ldi	r19, 0x00	; 0
    2cd2:	4a ef       	ldi	r20, 0xFA	; 250
    2cd4:	54 e4       	ldi	r21, 0x44	; 68
    2cd6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2cda:	dc 01       	movw	r26, r24
    2cdc:	cb 01       	movw	r24, r22
    2cde:	8f 83       	std	Y+7, r24	; 0x07
    2ce0:	98 87       	std	Y+8, r25	; 0x08
    2ce2:	a9 87       	std	Y+9, r26	; 0x09
    2ce4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ce6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ce8:	78 85       	ldd	r23, Y+8	; 0x08
    2cea:	89 85       	ldd	r24, Y+9	; 0x09
    2cec:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cee:	20 e0       	ldi	r18, 0x00	; 0
    2cf0:	30 e0       	ldi	r19, 0x00	; 0
    2cf2:	40 e8       	ldi	r20, 0x80	; 128
    2cf4:	5f e3       	ldi	r21, 0x3F	; 63
    2cf6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2cfa:	88 23       	and	r24, r24
    2cfc:	2c f4       	brge	.+10     	; 0x2d08 <main+0x5d8>
		__ticks = 1;
    2cfe:	81 e0       	ldi	r24, 0x01	; 1
    2d00:	90 e0       	ldi	r25, 0x00	; 0
    2d02:	9e 83       	std	Y+6, r25	; 0x06
    2d04:	8d 83       	std	Y+5, r24	; 0x05
    2d06:	3f c0       	rjmp	.+126    	; 0x2d86 <main+0x656>
	else if (__tmp > 65535)
    2d08:	6f 81       	ldd	r22, Y+7	; 0x07
    2d0a:	78 85       	ldd	r23, Y+8	; 0x08
    2d0c:	89 85       	ldd	r24, Y+9	; 0x09
    2d0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d10:	20 e0       	ldi	r18, 0x00	; 0
    2d12:	3f ef       	ldi	r19, 0xFF	; 255
    2d14:	4f e7       	ldi	r20, 0x7F	; 127
    2d16:	57 e4       	ldi	r21, 0x47	; 71
    2d18:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2d1c:	18 16       	cp	r1, r24
    2d1e:	4c f5       	brge	.+82     	; 0x2d72 <main+0x642>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d20:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d22:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d24:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d26:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d28:	20 e0       	ldi	r18, 0x00	; 0
    2d2a:	30 e0       	ldi	r19, 0x00	; 0
    2d2c:	40 e2       	ldi	r20, 0x20	; 32
    2d2e:	51 e4       	ldi	r21, 0x41	; 65
    2d30:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d34:	dc 01       	movw	r26, r24
    2d36:	cb 01       	movw	r24, r22
    2d38:	bc 01       	movw	r22, r24
    2d3a:	cd 01       	movw	r24, r26
    2d3c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d40:	dc 01       	movw	r26, r24
    2d42:	cb 01       	movw	r24, r22
    2d44:	9e 83       	std	Y+6, r25	; 0x06
    2d46:	8d 83       	std	Y+5, r24	; 0x05
    2d48:	0f c0       	rjmp	.+30     	; 0x2d68 <main+0x638>
    2d4a:	88 ec       	ldi	r24, 0xC8	; 200
    2d4c:	90 e0       	ldi	r25, 0x00	; 0
    2d4e:	9c 83       	std	Y+4, r25	; 0x04
    2d50:	8b 83       	std	Y+3, r24	; 0x03
    2d52:	8b 81       	ldd	r24, Y+3	; 0x03
    2d54:	9c 81       	ldd	r25, Y+4	; 0x04
    2d56:	01 97       	sbiw	r24, 0x01	; 1
    2d58:	f1 f7       	brne	.-4      	; 0x2d56 <main+0x626>
    2d5a:	9c 83       	std	Y+4, r25	; 0x04
    2d5c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d5e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d60:	9e 81       	ldd	r25, Y+6	; 0x06
    2d62:	01 97       	sbiw	r24, 0x01	; 1
    2d64:	9e 83       	std	Y+6, r25	; 0x06
    2d66:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d68:	8d 81       	ldd	r24, Y+5	; 0x05
    2d6a:	9e 81       	ldd	r25, Y+6	; 0x06
    2d6c:	00 97       	sbiw	r24, 0x00	; 0
    2d6e:	69 f7       	brne	.-38     	; 0x2d4a <main+0x61a>
    2d70:	14 c0       	rjmp	.+40     	; 0x2d9a <main+0x66a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d72:	6f 81       	ldd	r22, Y+7	; 0x07
    2d74:	78 85       	ldd	r23, Y+8	; 0x08
    2d76:	89 85       	ldd	r24, Y+9	; 0x09
    2d78:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d7a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d7e:	dc 01       	movw	r26, r24
    2d80:	cb 01       	movw	r24, r22
    2d82:	9e 83       	std	Y+6, r25	; 0x06
    2d84:	8d 83       	std	Y+5, r24	; 0x05
    2d86:	8d 81       	ldd	r24, Y+5	; 0x05
    2d88:	9e 81       	ldd	r25, Y+6	; 0x06
    2d8a:	9a 83       	std	Y+2, r25	; 0x02
    2d8c:	89 83       	std	Y+1, r24	; 0x01
    2d8e:	89 81       	ldd	r24, Y+1	; 0x01
    2d90:	9a 81       	ldd	r25, Y+2	; 0x02
    2d92:	01 97       	sbiw	r24, 0x01	; 1
    2d94:	f1 f7       	brne	.-4      	; 0x2d92 <main+0x662>
    2d96:	9a 83       	std	Y+2, r25	; 0x02
    2d98:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(350);
		DIO_u8SetPinValue(DIO_u8PORTC, DIO_u8PIN_6, DIO_u8PIN_LOW);
    2d9a:	82 e0       	ldi	r24, 0x02	; 2
    2d9c:	66 e0       	ldi	r22, 0x06	; 6
    2d9e:	40 e0       	ldi	r20, 0x00	; 0
    2da0:	0e 94 be 05 	call	0xb7c	; 0xb7c <DIO_u8SetPinValue>
    2da4:	f2 cd       	rjmp	.-1052   	; 0x298a <main+0x25a>

00002da6 <__divmodsi4>:
    2da6:	97 fb       	bst	r25, 7
    2da8:	09 2e       	mov	r0, r25
    2daa:	05 26       	eor	r0, r21
    2dac:	0e d0       	rcall	.+28     	; 0x2dca <__divmodsi4_neg1>
    2dae:	57 fd       	sbrc	r21, 7
    2db0:	04 d0       	rcall	.+8      	; 0x2dba <__divmodsi4_neg2>
    2db2:	14 d0       	rcall	.+40     	; 0x2ddc <__udivmodsi4>
    2db4:	0a d0       	rcall	.+20     	; 0x2dca <__divmodsi4_neg1>
    2db6:	00 1c       	adc	r0, r0
    2db8:	38 f4       	brcc	.+14     	; 0x2dc8 <__divmodsi4_exit>

00002dba <__divmodsi4_neg2>:
    2dba:	50 95       	com	r21
    2dbc:	40 95       	com	r20
    2dbe:	30 95       	com	r19
    2dc0:	21 95       	neg	r18
    2dc2:	3f 4f       	sbci	r19, 0xFF	; 255
    2dc4:	4f 4f       	sbci	r20, 0xFF	; 255
    2dc6:	5f 4f       	sbci	r21, 0xFF	; 255

00002dc8 <__divmodsi4_exit>:
    2dc8:	08 95       	ret

00002dca <__divmodsi4_neg1>:
    2dca:	f6 f7       	brtc	.-4      	; 0x2dc8 <__divmodsi4_exit>
    2dcc:	90 95       	com	r25
    2dce:	80 95       	com	r24
    2dd0:	70 95       	com	r23
    2dd2:	61 95       	neg	r22
    2dd4:	7f 4f       	sbci	r23, 0xFF	; 255
    2dd6:	8f 4f       	sbci	r24, 0xFF	; 255
    2dd8:	9f 4f       	sbci	r25, 0xFF	; 255
    2dda:	08 95       	ret

00002ddc <__udivmodsi4>:
    2ddc:	a1 e2       	ldi	r26, 0x21	; 33
    2dde:	1a 2e       	mov	r1, r26
    2de0:	aa 1b       	sub	r26, r26
    2de2:	bb 1b       	sub	r27, r27
    2de4:	fd 01       	movw	r30, r26
    2de6:	0d c0       	rjmp	.+26     	; 0x2e02 <__udivmodsi4_ep>

00002de8 <__udivmodsi4_loop>:
    2de8:	aa 1f       	adc	r26, r26
    2dea:	bb 1f       	adc	r27, r27
    2dec:	ee 1f       	adc	r30, r30
    2dee:	ff 1f       	adc	r31, r31
    2df0:	a2 17       	cp	r26, r18
    2df2:	b3 07       	cpc	r27, r19
    2df4:	e4 07       	cpc	r30, r20
    2df6:	f5 07       	cpc	r31, r21
    2df8:	20 f0       	brcs	.+8      	; 0x2e02 <__udivmodsi4_ep>
    2dfa:	a2 1b       	sub	r26, r18
    2dfc:	b3 0b       	sbc	r27, r19
    2dfe:	e4 0b       	sbc	r30, r20
    2e00:	f5 0b       	sbc	r31, r21

00002e02 <__udivmodsi4_ep>:
    2e02:	66 1f       	adc	r22, r22
    2e04:	77 1f       	adc	r23, r23
    2e06:	88 1f       	adc	r24, r24
    2e08:	99 1f       	adc	r25, r25
    2e0a:	1a 94       	dec	r1
    2e0c:	69 f7       	brne	.-38     	; 0x2de8 <__udivmodsi4_loop>
    2e0e:	60 95       	com	r22
    2e10:	70 95       	com	r23
    2e12:	80 95       	com	r24
    2e14:	90 95       	com	r25
    2e16:	9b 01       	movw	r18, r22
    2e18:	ac 01       	movw	r20, r24
    2e1a:	bd 01       	movw	r22, r26
    2e1c:	cf 01       	movw	r24, r30
    2e1e:	08 95       	ret

00002e20 <__prologue_saves__>:
    2e20:	2f 92       	push	r2
    2e22:	3f 92       	push	r3
    2e24:	4f 92       	push	r4
    2e26:	5f 92       	push	r5
    2e28:	6f 92       	push	r6
    2e2a:	7f 92       	push	r7
    2e2c:	8f 92       	push	r8
    2e2e:	9f 92       	push	r9
    2e30:	af 92       	push	r10
    2e32:	bf 92       	push	r11
    2e34:	cf 92       	push	r12
    2e36:	df 92       	push	r13
    2e38:	ef 92       	push	r14
    2e3a:	ff 92       	push	r15
    2e3c:	0f 93       	push	r16
    2e3e:	1f 93       	push	r17
    2e40:	cf 93       	push	r28
    2e42:	df 93       	push	r29
    2e44:	cd b7       	in	r28, 0x3d	; 61
    2e46:	de b7       	in	r29, 0x3e	; 62
    2e48:	ca 1b       	sub	r28, r26
    2e4a:	db 0b       	sbc	r29, r27
    2e4c:	0f b6       	in	r0, 0x3f	; 63
    2e4e:	f8 94       	cli
    2e50:	de bf       	out	0x3e, r29	; 62
    2e52:	0f be       	out	0x3f, r0	; 63
    2e54:	cd bf       	out	0x3d, r28	; 61
    2e56:	09 94       	ijmp

00002e58 <__epilogue_restores__>:
    2e58:	2a 88       	ldd	r2, Y+18	; 0x12
    2e5a:	39 88       	ldd	r3, Y+17	; 0x11
    2e5c:	48 88       	ldd	r4, Y+16	; 0x10
    2e5e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e60:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e62:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e64:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e66:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e68:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e6a:	b9 84       	ldd	r11, Y+9	; 0x09
    2e6c:	c8 84       	ldd	r12, Y+8	; 0x08
    2e6e:	df 80       	ldd	r13, Y+7	; 0x07
    2e70:	ee 80       	ldd	r14, Y+6	; 0x06
    2e72:	fd 80       	ldd	r15, Y+5	; 0x05
    2e74:	0c 81       	ldd	r16, Y+4	; 0x04
    2e76:	1b 81       	ldd	r17, Y+3	; 0x03
    2e78:	aa 81       	ldd	r26, Y+2	; 0x02
    2e7a:	b9 81       	ldd	r27, Y+1	; 0x01
    2e7c:	ce 0f       	add	r28, r30
    2e7e:	d1 1d       	adc	r29, r1
    2e80:	0f b6       	in	r0, 0x3f	; 63
    2e82:	f8 94       	cli
    2e84:	de bf       	out	0x3e, r29	; 62
    2e86:	0f be       	out	0x3f, r0	; 63
    2e88:	cd bf       	out	0x3d, r28	; 61
    2e8a:	ed 01       	movw	r28, r26
    2e8c:	08 95       	ret

00002e8e <_exit>:
    2e8e:	f8 94       	cli

00002e90 <__stop_program>:
    2e90:	ff cf       	rjmp	.-2      	; 0x2e90 <__stop_program>
